
HiringTask.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b34  08000130  08000130  00001130  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000047c  08007c68  08007c68  00008c68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080080e4  080080e4  0000a1f0  2**0
                  CONTENTS
  4 .ARM          00000008  080080e4  080080e4  000090e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080080ec  080080ec  0000a1f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080080ec  080080ec  000090ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080080f0  080080f0  000090f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f0  20000000  080080f4  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001fc  200001f0  080082e4  0000a1f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003ec  080082e4  0000a3ec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a1f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005d2b  00000000  00000000  0000a219  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001747  00000000  00000000  0000ff44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000820  00000000  00000000  00011690  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000641  00000000  00000000  00011eb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002fe9  00000000  00000000  000124f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a085  00000000  00000000  000154da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000183d9  00000000  00000000  0001f55f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00037938  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000350c  00000000  00000000  0003797c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  0003ae88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	@ (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	@ (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	@ (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	200001f0 	.word	0x200001f0
 800014c:	00000000 	.word	0x00000000
 8000150:	08007c4c 	.word	0x08007c4c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	@ (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	@ (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	@ (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	200001f4 	.word	0x200001f4
 800016c:	08007c4c 	.word	0x08007c4c

08000170 <strcmp>:
 8000170:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000174:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000178:	2a01      	cmp	r2, #1
 800017a:	bf28      	it	cs
 800017c:	429a      	cmpcs	r2, r3
 800017e:	d0f7      	beq.n	8000170 <strcmp>
 8000180:	1ad0      	subs	r0, r2, r3
 8000182:	4770      	bx	lr

08000184 <strlen>:
 8000184:	4603      	mov	r3, r0
 8000186:	f813 2b01 	ldrb.w	r2, [r3], #1
 800018a:	2a00      	cmp	r2, #0
 800018c:	d1fb      	bne.n	8000186 <strlen+0x2>
 800018e:	1a18      	subs	r0, r3, r0
 8000190:	3801      	subs	r0, #1
 8000192:	4770      	bx	lr

08000194 <__aeabi_drsub>:
 8000194:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000198:	e002      	b.n	80001a0 <__adddf3>
 800019a:	bf00      	nop

0800019c <__aeabi_dsub>:
 800019c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001a0 <__adddf3>:
 80001a0:	b530      	push	{r4, r5, lr}
 80001a2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001aa:	ea94 0f05 	teq	r4, r5
 80001ae:	bf08      	it	eq
 80001b0:	ea90 0f02 	teqeq	r0, r2
 80001b4:	bf1f      	itttt	ne
 80001b6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ba:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001be:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001c2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c6:	f000 80e2 	beq.w	800038e <__adddf3+0x1ee>
 80001ca:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ce:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001d2:	bfb8      	it	lt
 80001d4:	426d      	neglt	r5, r5
 80001d6:	dd0c      	ble.n	80001f2 <__adddf3+0x52>
 80001d8:	442c      	add	r4, r5
 80001da:	ea80 0202 	eor.w	r2, r0, r2
 80001de:	ea81 0303 	eor.w	r3, r1, r3
 80001e2:	ea82 0000 	eor.w	r0, r2, r0
 80001e6:	ea83 0101 	eor.w	r1, r3, r1
 80001ea:	ea80 0202 	eor.w	r2, r0, r2
 80001ee:	ea81 0303 	eor.w	r3, r1, r3
 80001f2:	2d36      	cmp	r5, #54	@ 0x36
 80001f4:	bf88      	it	hi
 80001f6:	bd30      	pophi	{r4, r5, pc}
 80001f8:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001fc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000200:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000204:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000208:	d002      	beq.n	8000210 <__adddf3+0x70>
 800020a:	4240      	negs	r0, r0
 800020c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000210:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000214:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000218:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800021c:	d002      	beq.n	8000224 <__adddf3+0x84>
 800021e:	4252      	negs	r2, r2
 8000220:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000224:	ea94 0f05 	teq	r4, r5
 8000228:	f000 80a7 	beq.w	800037a <__adddf3+0x1da>
 800022c:	f1a4 0401 	sub.w	r4, r4, #1
 8000230:	f1d5 0e20 	rsbs	lr, r5, #32
 8000234:	db0d      	blt.n	8000252 <__adddf3+0xb2>
 8000236:	fa02 fc0e 	lsl.w	ip, r2, lr
 800023a:	fa22 f205 	lsr.w	r2, r2, r5
 800023e:	1880      	adds	r0, r0, r2
 8000240:	f141 0100 	adc.w	r1, r1, #0
 8000244:	fa03 f20e 	lsl.w	r2, r3, lr
 8000248:	1880      	adds	r0, r0, r2
 800024a:	fa43 f305 	asr.w	r3, r3, r5
 800024e:	4159      	adcs	r1, r3
 8000250:	e00e      	b.n	8000270 <__adddf3+0xd0>
 8000252:	f1a5 0520 	sub.w	r5, r5, #32
 8000256:	f10e 0e20 	add.w	lr, lr, #32
 800025a:	2a01      	cmp	r2, #1
 800025c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000260:	bf28      	it	cs
 8000262:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000266:	fa43 f305 	asr.w	r3, r3, r5
 800026a:	18c0      	adds	r0, r0, r3
 800026c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000270:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000274:	d507      	bpl.n	8000286 <__adddf3+0xe6>
 8000276:	f04f 0e00 	mov.w	lr, #0
 800027a:	f1dc 0c00 	rsbs	ip, ip, #0
 800027e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000282:	eb6e 0101 	sbc.w	r1, lr, r1
 8000286:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800028a:	d31b      	bcc.n	80002c4 <__adddf3+0x124>
 800028c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000290:	d30c      	bcc.n	80002ac <__adddf3+0x10c>
 8000292:	0849      	lsrs	r1, r1, #1
 8000294:	ea5f 0030 	movs.w	r0, r0, rrx
 8000298:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800029c:	f104 0401 	add.w	r4, r4, #1
 80002a0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002a8:	f080 809a 	bcs.w	80003e0 <__adddf3+0x240>
 80002ac:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002b0:	bf08      	it	eq
 80002b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b6:	f150 0000 	adcs.w	r0, r0, #0
 80002ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002be:	ea41 0105 	orr.w	r1, r1, r5
 80002c2:	bd30      	pop	{r4, r5, pc}
 80002c4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c8:	4140      	adcs	r0, r0
 80002ca:	eb41 0101 	adc.w	r1, r1, r1
 80002ce:	3c01      	subs	r4, #1
 80002d0:	bf28      	it	cs
 80002d2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002d6:	d2e9      	bcs.n	80002ac <__adddf3+0x10c>
 80002d8:	f091 0f00 	teq	r1, #0
 80002dc:	bf04      	itt	eq
 80002de:	4601      	moveq	r1, r0
 80002e0:	2000      	moveq	r0, #0
 80002e2:	fab1 f381 	clz	r3, r1
 80002e6:	bf08      	it	eq
 80002e8:	3320      	addeq	r3, #32
 80002ea:	f1a3 030b 	sub.w	r3, r3, #11
 80002ee:	f1b3 0220 	subs.w	r2, r3, #32
 80002f2:	da0c      	bge.n	800030e <__adddf3+0x16e>
 80002f4:	320c      	adds	r2, #12
 80002f6:	dd08      	ble.n	800030a <__adddf3+0x16a>
 80002f8:	f102 0c14 	add.w	ip, r2, #20
 80002fc:	f1c2 020c 	rsb	r2, r2, #12
 8000300:	fa01 f00c 	lsl.w	r0, r1, ip
 8000304:	fa21 f102 	lsr.w	r1, r1, r2
 8000308:	e00c      	b.n	8000324 <__adddf3+0x184>
 800030a:	f102 0214 	add.w	r2, r2, #20
 800030e:	bfd8      	it	le
 8000310:	f1c2 0c20 	rsble	ip, r2, #32
 8000314:	fa01 f102 	lsl.w	r1, r1, r2
 8000318:	fa20 fc0c 	lsr.w	ip, r0, ip
 800031c:	bfdc      	itt	le
 800031e:	ea41 010c 	orrle.w	r1, r1, ip
 8000322:	4090      	lslle	r0, r2
 8000324:	1ae4      	subs	r4, r4, r3
 8000326:	bfa2      	ittt	ge
 8000328:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800032c:	4329      	orrge	r1, r5
 800032e:	bd30      	popge	{r4, r5, pc}
 8000330:	ea6f 0404 	mvn.w	r4, r4
 8000334:	3c1f      	subs	r4, #31
 8000336:	da1c      	bge.n	8000372 <__adddf3+0x1d2>
 8000338:	340c      	adds	r4, #12
 800033a:	dc0e      	bgt.n	800035a <__adddf3+0x1ba>
 800033c:	f104 0414 	add.w	r4, r4, #20
 8000340:	f1c4 0220 	rsb	r2, r4, #32
 8000344:	fa20 f004 	lsr.w	r0, r0, r4
 8000348:	fa01 f302 	lsl.w	r3, r1, r2
 800034c:	ea40 0003 	orr.w	r0, r0, r3
 8000350:	fa21 f304 	lsr.w	r3, r1, r4
 8000354:	ea45 0103 	orr.w	r1, r5, r3
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f1c4 040c 	rsb	r4, r4, #12
 800035e:	f1c4 0220 	rsb	r2, r4, #32
 8000362:	fa20 f002 	lsr.w	r0, r0, r2
 8000366:	fa01 f304 	lsl.w	r3, r1, r4
 800036a:	ea40 0003 	orr.w	r0, r0, r3
 800036e:	4629      	mov	r1, r5
 8000370:	bd30      	pop	{r4, r5, pc}
 8000372:	fa21 f004 	lsr.w	r0, r1, r4
 8000376:	4629      	mov	r1, r5
 8000378:	bd30      	pop	{r4, r5, pc}
 800037a:	f094 0f00 	teq	r4, #0
 800037e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000382:	bf06      	itte	eq
 8000384:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000388:	3401      	addeq	r4, #1
 800038a:	3d01      	subne	r5, #1
 800038c:	e74e      	b.n	800022c <__adddf3+0x8c>
 800038e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000392:	bf18      	it	ne
 8000394:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000398:	d029      	beq.n	80003ee <__adddf3+0x24e>
 800039a:	ea94 0f05 	teq	r4, r5
 800039e:	bf08      	it	eq
 80003a0:	ea90 0f02 	teqeq	r0, r2
 80003a4:	d005      	beq.n	80003b2 <__adddf3+0x212>
 80003a6:	ea54 0c00 	orrs.w	ip, r4, r0
 80003aa:	bf04      	itt	eq
 80003ac:	4619      	moveq	r1, r3
 80003ae:	4610      	moveq	r0, r2
 80003b0:	bd30      	pop	{r4, r5, pc}
 80003b2:	ea91 0f03 	teq	r1, r3
 80003b6:	bf1e      	ittt	ne
 80003b8:	2100      	movne	r1, #0
 80003ba:	2000      	movne	r0, #0
 80003bc:	bd30      	popne	{r4, r5, pc}
 80003be:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003c2:	d105      	bne.n	80003d0 <__adddf3+0x230>
 80003c4:	0040      	lsls	r0, r0, #1
 80003c6:	4149      	adcs	r1, r1
 80003c8:	bf28      	it	cs
 80003ca:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003d4:	bf3c      	itt	cc
 80003d6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003da:	bd30      	popcc	{r4, r5, pc}
 80003dc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003e0:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003e4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003e8:	f04f 0000 	mov.w	r0, #0
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003f2:	bf1a      	itte	ne
 80003f4:	4619      	movne	r1, r3
 80003f6:	4610      	movne	r0, r2
 80003f8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003fc:	bf1c      	itt	ne
 80003fe:	460b      	movne	r3, r1
 8000400:	4602      	movne	r2, r0
 8000402:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000406:	bf06      	itte	eq
 8000408:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800040c:	ea91 0f03 	teqeq	r1, r3
 8000410:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	bf00      	nop

08000418 <__aeabi_ui2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800042c:	f04f 0500 	mov.w	r5, #0
 8000430:	f04f 0100 	mov.w	r1, #0
 8000434:	e750      	b.n	80002d8 <__adddf3+0x138>
 8000436:	bf00      	nop

08000438 <__aeabi_i2d>:
 8000438:	f090 0f00 	teq	r0, #0
 800043c:	bf04      	itt	eq
 800043e:	2100      	moveq	r1, #0
 8000440:	4770      	bxeq	lr
 8000442:	b530      	push	{r4, r5, lr}
 8000444:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000448:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800044c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000450:	bf48      	it	mi
 8000452:	4240      	negmi	r0, r0
 8000454:	f04f 0100 	mov.w	r1, #0
 8000458:	e73e      	b.n	80002d8 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_f2d>:
 800045c:	0042      	lsls	r2, r0, #1
 800045e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000462:	ea4f 0131 	mov.w	r1, r1, rrx
 8000466:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800046a:	bf1f      	itttt	ne
 800046c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000470:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000474:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000478:	4770      	bxne	lr
 800047a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800047e:	bf08      	it	eq
 8000480:	4770      	bxeq	lr
 8000482:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000486:	bf04      	itt	eq
 8000488:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000494:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000498:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800049c:	e71c      	b.n	80002d8 <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_ul2d>:
 80004a0:	ea50 0201 	orrs.w	r2, r0, r1
 80004a4:	bf08      	it	eq
 80004a6:	4770      	bxeq	lr
 80004a8:	b530      	push	{r4, r5, lr}
 80004aa:	f04f 0500 	mov.w	r5, #0
 80004ae:	e00a      	b.n	80004c6 <__aeabi_l2d+0x16>

080004b0 <__aeabi_l2d>:
 80004b0:	ea50 0201 	orrs.w	r2, r0, r1
 80004b4:	bf08      	it	eq
 80004b6:	4770      	bxeq	lr
 80004b8:	b530      	push	{r4, r5, lr}
 80004ba:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004be:	d502      	bpl.n	80004c6 <__aeabi_l2d+0x16>
 80004c0:	4240      	negs	r0, r0
 80004c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ca:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004ce:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004d2:	f43f aed8 	beq.w	8000286 <__adddf3+0xe6>
 80004d6:	f04f 0203 	mov.w	r2, #3
 80004da:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004de:	bf18      	it	ne
 80004e0:	3203      	addne	r2, #3
 80004e2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004e6:	bf18      	it	ne
 80004e8:	3203      	addne	r2, #3
 80004ea:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ee:	f1c2 0320 	rsb	r3, r2, #32
 80004f2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f6:	fa20 f002 	lsr.w	r0, r0, r2
 80004fa:	fa01 fe03 	lsl.w	lr, r1, r3
 80004fe:	ea40 000e 	orr.w	r0, r0, lr
 8000502:	fa21 f102 	lsr.w	r1, r1, r2
 8000506:	4414      	add	r4, r2
 8000508:	e6bd      	b.n	8000286 <__adddf3+0xe6>
 800050a:	bf00      	nop

0800050c <__aeabi_dmul>:
 800050c:	b570      	push	{r4, r5, r6, lr}
 800050e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000512:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000516:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800051a:	bf1d      	ittte	ne
 800051c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000520:	ea94 0f0c 	teqne	r4, ip
 8000524:	ea95 0f0c 	teqne	r5, ip
 8000528:	f000 f8de 	bleq	80006e8 <__aeabi_dmul+0x1dc>
 800052c:	442c      	add	r4, r5
 800052e:	ea81 0603 	eor.w	r6, r1, r3
 8000532:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000536:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800053a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800053e:	bf18      	it	ne
 8000540:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000544:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000548:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800054c:	d038      	beq.n	80005c0 <__aeabi_dmul+0xb4>
 800054e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000552:	f04f 0500 	mov.w	r5, #0
 8000556:	fbe1 e502 	umlal	lr, r5, r1, r2
 800055a:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800055e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000562:	f04f 0600 	mov.w	r6, #0
 8000566:	fbe1 5603 	umlal	r5, r6, r1, r3
 800056a:	f09c 0f00 	teq	ip, #0
 800056e:	bf18      	it	ne
 8000570:	f04e 0e01 	orrne.w	lr, lr, #1
 8000574:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000578:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 800057c:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000580:	d204      	bcs.n	800058c <__aeabi_dmul+0x80>
 8000582:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000586:	416d      	adcs	r5, r5
 8000588:	eb46 0606 	adc.w	r6, r6, r6
 800058c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000590:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000594:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000598:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800059c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005a0:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005a4:	bf88      	it	hi
 80005a6:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005aa:	d81e      	bhi.n	80005ea <__aeabi_dmul+0xde>
 80005ac:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005b0:	bf08      	it	eq
 80005b2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005b6:	f150 0000 	adcs.w	r0, r0, #0
 80005ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005be:	bd70      	pop	{r4, r5, r6, pc}
 80005c0:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005c4:	ea46 0101 	orr.w	r1, r6, r1
 80005c8:	ea40 0002 	orr.w	r0, r0, r2
 80005cc:	ea81 0103 	eor.w	r1, r1, r3
 80005d0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005d4:	bfc2      	ittt	gt
 80005d6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005da:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005de:	bd70      	popgt	{r4, r5, r6, pc}
 80005e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005e4:	f04f 0e00 	mov.w	lr, #0
 80005e8:	3c01      	subs	r4, #1
 80005ea:	f300 80ab 	bgt.w	8000744 <__aeabi_dmul+0x238>
 80005ee:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005f2:	bfde      	ittt	le
 80005f4:	2000      	movle	r0, #0
 80005f6:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005fa:	bd70      	pople	{r4, r5, r6, pc}
 80005fc:	f1c4 0400 	rsb	r4, r4, #0
 8000600:	3c20      	subs	r4, #32
 8000602:	da35      	bge.n	8000670 <__aeabi_dmul+0x164>
 8000604:	340c      	adds	r4, #12
 8000606:	dc1b      	bgt.n	8000640 <__aeabi_dmul+0x134>
 8000608:	f104 0414 	add.w	r4, r4, #20
 800060c:	f1c4 0520 	rsb	r5, r4, #32
 8000610:	fa00 f305 	lsl.w	r3, r0, r5
 8000614:	fa20 f004 	lsr.w	r0, r0, r4
 8000618:	fa01 f205 	lsl.w	r2, r1, r5
 800061c:	ea40 0002 	orr.w	r0, r0, r2
 8000620:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000624:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	fa21 f604 	lsr.w	r6, r1, r4
 8000630:	eb42 0106 	adc.w	r1, r2, r6
 8000634:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000638:	bf08      	it	eq
 800063a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063e:	bd70      	pop	{r4, r5, r6, pc}
 8000640:	f1c4 040c 	rsb	r4, r4, #12
 8000644:	f1c4 0520 	rsb	r5, r4, #32
 8000648:	fa00 f304 	lsl.w	r3, r0, r4
 800064c:	fa20 f005 	lsr.w	r0, r0, r5
 8000650:	fa01 f204 	lsl.w	r2, r1, r4
 8000654:	ea40 0002 	orr.w	r0, r0, r2
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	f141 0100 	adc.w	r1, r1, #0
 8000664:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000668:	bf08      	it	eq
 800066a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066e:	bd70      	pop	{r4, r5, r6, pc}
 8000670:	f1c4 0520 	rsb	r5, r4, #32
 8000674:	fa00 f205 	lsl.w	r2, r0, r5
 8000678:	ea4e 0e02 	orr.w	lr, lr, r2
 800067c:	fa20 f304 	lsr.w	r3, r0, r4
 8000680:	fa01 f205 	lsl.w	r2, r1, r5
 8000684:	ea43 0302 	orr.w	r3, r3, r2
 8000688:	fa21 f004 	lsr.w	r0, r1, r4
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	fa21 f204 	lsr.w	r2, r1, r4
 8000694:	ea20 0002 	bic.w	r0, r0, r2
 8000698:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800069c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a0:	bf08      	it	eq
 80006a2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a6:	bd70      	pop	{r4, r5, r6, pc}
 80006a8:	f094 0f00 	teq	r4, #0
 80006ac:	d10f      	bne.n	80006ce <__aeabi_dmul+0x1c2>
 80006ae:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006b2:	0040      	lsls	r0, r0, #1
 80006b4:	eb41 0101 	adc.w	r1, r1, r1
 80006b8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3c01      	subeq	r4, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1a6>
 80006c2:	ea41 0106 	orr.w	r1, r1, r6
 80006c6:	f095 0f00 	teq	r5, #0
 80006ca:	bf18      	it	ne
 80006cc:	4770      	bxne	lr
 80006ce:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80006d2:	0052      	lsls	r2, r2, #1
 80006d4:	eb43 0303 	adc.w	r3, r3, r3
 80006d8:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006dc:	bf08      	it	eq
 80006de:	3d01      	subeq	r5, #1
 80006e0:	d0f7      	beq.n	80006d2 <__aeabi_dmul+0x1c6>
 80006e2:	ea43 0306 	orr.w	r3, r3, r6
 80006e6:	4770      	bx	lr
 80006e8:	ea94 0f0c 	teq	r4, ip
 80006ec:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006f0:	bf18      	it	ne
 80006f2:	ea95 0f0c 	teqne	r5, ip
 80006f6:	d00c      	beq.n	8000712 <__aeabi_dmul+0x206>
 80006f8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006fc:	bf18      	it	ne
 80006fe:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000702:	d1d1      	bne.n	80006a8 <__aeabi_dmul+0x19c>
 8000704:	ea81 0103 	eor.w	r1, r1, r3
 8000708:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000716:	bf06      	itte	eq
 8000718:	4610      	moveq	r0, r2
 800071a:	4619      	moveq	r1, r3
 800071c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000720:	d019      	beq.n	8000756 <__aeabi_dmul+0x24a>
 8000722:	ea94 0f0c 	teq	r4, ip
 8000726:	d102      	bne.n	800072e <__aeabi_dmul+0x222>
 8000728:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800072c:	d113      	bne.n	8000756 <__aeabi_dmul+0x24a>
 800072e:	ea95 0f0c 	teq	r5, ip
 8000732:	d105      	bne.n	8000740 <__aeabi_dmul+0x234>
 8000734:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000738:	bf1c      	itt	ne
 800073a:	4610      	movne	r0, r2
 800073c:	4619      	movne	r1, r3
 800073e:	d10a      	bne.n	8000756 <__aeabi_dmul+0x24a>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800074c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800075a:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800075e:	bd70      	pop	{r4, r5, r6, pc}

08000760 <__aeabi_ddiv>:
 8000760:	b570      	push	{r4, r5, r6, lr}
 8000762:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000766:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800076a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800076e:	bf1d      	ittte	ne
 8000770:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000774:	ea94 0f0c 	teqne	r4, ip
 8000778:	ea95 0f0c 	teqne	r5, ip
 800077c:	f000 f8a7 	bleq	80008ce <__aeabi_ddiv+0x16e>
 8000780:	eba4 0405 	sub.w	r4, r4, r5
 8000784:	ea81 0e03 	eor.w	lr, r1, r3
 8000788:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800078c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000790:	f000 8088 	beq.w	80008a4 <__aeabi_ddiv+0x144>
 8000794:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000798:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 800079c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007a0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007a4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007a8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007ac:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007b0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007b4:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007b8:	429d      	cmp	r5, r3
 80007ba:	bf08      	it	eq
 80007bc:	4296      	cmpeq	r6, r2
 80007be:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007c2:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007c6:	d202      	bcs.n	80007ce <__aeabi_ddiv+0x6e>
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	1ab6      	subs	r6, r6, r2
 80007d0:	eb65 0503 	sbc.w	r5, r5, r3
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007de:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007f4:	085b      	lsrs	r3, r3, #1
 80007f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fa:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000802:	bf22      	ittt	cs
 8000804:	1ab6      	subcs	r6, r6, r2
 8000806:	4675      	movcs	r5, lr
 8000808:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	ebb6 0e02 	subs.w	lr, r6, r2
 8000816:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081a:	bf22      	ittt	cs
 800081c:	1ab6      	subcs	r6, r6, r2
 800081e:	4675      	movcs	r5, lr
 8000820:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	ebb6 0e02 	subs.w	lr, r6, r2
 800082e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000832:	bf22      	ittt	cs
 8000834:	1ab6      	subcs	r6, r6, r2
 8000836:	4675      	movcs	r5, lr
 8000838:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800083c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000840:	d018      	beq.n	8000874 <__aeabi_ddiv+0x114>
 8000842:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000846:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800084a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800084e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000852:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000856:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800085a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800085e:	d1c0      	bne.n	80007e2 <__aeabi_ddiv+0x82>
 8000860:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000864:	d10b      	bne.n	800087e <__aeabi_ddiv+0x11e>
 8000866:	ea41 0100 	orr.w	r1, r1, r0
 800086a:	f04f 0000 	mov.w	r0, #0
 800086e:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000872:	e7b6      	b.n	80007e2 <__aeabi_ddiv+0x82>
 8000874:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000878:	bf04      	itt	eq
 800087a:	4301      	orreq	r1, r0
 800087c:	2000      	moveq	r0, #0
 800087e:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000882:	bf88      	it	hi
 8000884:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000888:	f63f aeaf 	bhi.w	80005ea <__aeabi_dmul+0xde>
 800088c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000890:	bf04      	itt	eq
 8000892:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000896:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800089a:	f150 0000 	adcs.w	r0, r0, #0
 800089e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008a2:	bd70      	pop	{r4, r5, r6, pc}
 80008a4:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008a8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008ac:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008b0:	bfc2      	ittt	gt
 80008b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ba:	bd70      	popgt	{r4, r5, r6, pc}
 80008bc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008c0:	f04f 0e00 	mov.w	lr, #0
 80008c4:	3c01      	subs	r4, #1
 80008c6:	e690      	b.n	80005ea <__aeabi_dmul+0xde>
 80008c8:	ea45 0e06 	orr.w	lr, r5, r6
 80008cc:	e68d      	b.n	80005ea <__aeabi_dmul+0xde>
 80008ce:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008d2:	ea94 0f0c 	teq	r4, ip
 80008d6:	bf08      	it	eq
 80008d8:	ea95 0f0c 	teqeq	r5, ip
 80008dc:	f43f af3b 	beq.w	8000756 <__aeabi_dmul+0x24a>
 80008e0:	ea94 0f0c 	teq	r4, ip
 80008e4:	d10a      	bne.n	80008fc <__aeabi_ddiv+0x19c>
 80008e6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ea:	f47f af34 	bne.w	8000756 <__aeabi_dmul+0x24a>
 80008ee:	ea95 0f0c 	teq	r5, ip
 80008f2:	f47f af25 	bne.w	8000740 <__aeabi_dmul+0x234>
 80008f6:	4610      	mov	r0, r2
 80008f8:	4619      	mov	r1, r3
 80008fa:	e72c      	b.n	8000756 <__aeabi_dmul+0x24a>
 80008fc:	ea95 0f0c 	teq	r5, ip
 8000900:	d106      	bne.n	8000910 <__aeabi_ddiv+0x1b0>
 8000902:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000906:	f43f aefd 	beq.w	8000704 <__aeabi_dmul+0x1f8>
 800090a:	4610      	mov	r0, r2
 800090c:	4619      	mov	r1, r3
 800090e:	e722      	b.n	8000756 <__aeabi_dmul+0x24a>
 8000910:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000914:	bf18      	it	ne
 8000916:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800091a:	f47f aec5 	bne.w	80006a8 <__aeabi_dmul+0x19c>
 800091e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000922:	f47f af0d 	bne.w	8000740 <__aeabi_dmul+0x234>
 8000926:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800092a:	f47f aeeb 	bne.w	8000704 <__aeabi_dmul+0x1f8>
 800092e:	e712      	b.n	8000756 <__aeabi_dmul+0x24a>

08000930 <__gedf2>:
 8000930:	f04f 3cff 	mov.w	ip, #4294967295
 8000934:	e006      	b.n	8000944 <__cmpdf2+0x4>
 8000936:	bf00      	nop

08000938 <__ledf2>:
 8000938:	f04f 0c01 	mov.w	ip, #1
 800093c:	e002      	b.n	8000944 <__cmpdf2+0x4>
 800093e:	bf00      	nop

08000940 <__cmpdf2>:
 8000940:	f04f 0c01 	mov.w	ip, #1
 8000944:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000948:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800094c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000950:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000954:	bf18      	it	ne
 8000956:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800095a:	d01b      	beq.n	8000994 <__cmpdf2+0x54>
 800095c:	b001      	add	sp, #4
 800095e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000962:	bf0c      	ite	eq
 8000964:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000968:	ea91 0f03 	teqne	r1, r3
 800096c:	bf02      	ittt	eq
 800096e:	ea90 0f02 	teqeq	r0, r2
 8000972:	2000      	moveq	r0, #0
 8000974:	4770      	bxeq	lr
 8000976:	f110 0f00 	cmn.w	r0, #0
 800097a:	ea91 0f03 	teq	r1, r3
 800097e:	bf58      	it	pl
 8000980:	4299      	cmppl	r1, r3
 8000982:	bf08      	it	eq
 8000984:	4290      	cmpeq	r0, r2
 8000986:	bf2c      	ite	cs
 8000988:	17d8      	asrcs	r0, r3, #31
 800098a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800098e:	f040 0001 	orr.w	r0, r0, #1
 8000992:	4770      	bx	lr
 8000994:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000998:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800099c:	d102      	bne.n	80009a4 <__cmpdf2+0x64>
 800099e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009a2:	d107      	bne.n	80009b4 <__cmpdf2+0x74>
 80009a4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ac:	d1d6      	bne.n	800095c <__cmpdf2+0x1c>
 80009ae:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009b2:	d0d3      	beq.n	800095c <__cmpdf2+0x1c>
 80009b4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop

080009bc <__aeabi_cdrcmple>:
 80009bc:	4684      	mov	ip, r0
 80009be:	4610      	mov	r0, r2
 80009c0:	4662      	mov	r2, ip
 80009c2:	468c      	mov	ip, r1
 80009c4:	4619      	mov	r1, r3
 80009c6:	4663      	mov	r3, ip
 80009c8:	e000      	b.n	80009cc <__aeabi_cdcmpeq>
 80009ca:	bf00      	nop

080009cc <__aeabi_cdcmpeq>:
 80009cc:	b501      	push	{r0, lr}
 80009ce:	f7ff ffb7 	bl	8000940 <__cmpdf2>
 80009d2:	2800      	cmp	r0, #0
 80009d4:	bf48      	it	mi
 80009d6:	f110 0f00 	cmnmi.w	r0, #0
 80009da:	bd01      	pop	{r0, pc}

080009dc <__aeabi_dcmpeq>:
 80009dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e0:	f7ff fff4 	bl	80009cc <__aeabi_cdcmpeq>
 80009e4:	bf0c      	ite	eq
 80009e6:	2001      	moveq	r0, #1
 80009e8:	2000      	movne	r0, #0
 80009ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ee:	bf00      	nop

080009f0 <__aeabi_dcmplt>:
 80009f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f4:	f7ff ffea 	bl	80009cc <__aeabi_cdcmpeq>
 80009f8:	bf34      	ite	cc
 80009fa:	2001      	movcc	r0, #1
 80009fc:	2000      	movcs	r0, #0
 80009fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a02:	bf00      	nop

08000a04 <__aeabi_dcmple>:
 8000a04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a08:	f7ff ffe0 	bl	80009cc <__aeabi_cdcmpeq>
 8000a0c:	bf94      	ite	ls
 8000a0e:	2001      	movls	r0, #1
 8000a10:	2000      	movhi	r0, #0
 8000a12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a16:	bf00      	nop

08000a18 <__aeabi_dcmpge>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff ffce 	bl	80009bc <__aeabi_cdrcmple>
 8000a20:	bf94      	ite	ls
 8000a22:	2001      	movls	r0, #1
 8000a24:	2000      	movhi	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmpgt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffc4 	bl	80009bc <__aeabi_cdrcmple>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmpun>:
 8000a40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d102      	bne.n	8000a50 <__aeabi_dcmpun+0x10>
 8000a4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4e:	d10a      	bne.n	8000a66 <__aeabi_dcmpun+0x26>
 8000a50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a58:	d102      	bne.n	8000a60 <__aeabi_dcmpun+0x20>
 8000a5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5e:	d102      	bne.n	8000a66 <__aeabi_dcmpun+0x26>
 8000a60:	f04f 0000 	mov.w	r0, #0
 8000a64:	4770      	bx	lr
 8000a66:	f04f 0001 	mov.w	r0, #1
 8000a6a:	4770      	bx	lr

08000a6c <__aeabi_d2iz>:
 8000a6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a70:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a74:	d215      	bcs.n	8000aa2 <__aeabi_d2iz+0x36>
 8000a76:	d511      	bpl.n	8000a9c <__aeabi_d2iz+0x30>
 8000a78:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a80:	d912      	bls.n	8000aa8 <__aeabi_d2iz+0x3c>
 8000a82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a86:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a92:	fa23 f002 	lsr.w	r0, r3, r2
 8000a96:	bf18      	it	ne
 8000a98:	4240      	negne	r0, r0
 8000a9a:	4770      	bx	lr
 8000a9c:	f04f 0000 	mov.w	r0, #0
 8000aa0:	4770      	bx	lr
 8000aa2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa6:	d105      	bne.n	8000ab4 <__aeabi_d2iz+0x48>
 8000aa8:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000aac:	bf08      	it	eq
 8000aae:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <__aeabi_d2uiz>:
 8000abc:	004a      	lsls	r2, r1, #1
 8000abe:	d211      	bcs.n	8000ae4 <__aeabi_d2uiz+0x28>
 8000ac0:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ac4:	d211      	bcs.n	8000aea <__aeabi_d2uiz+0x2e>
 8000ac6:	d50d      	bpl.n	8000ae4 <__aeabi_d2uiz+0x28>
 8000ac8:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000acc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad0:	d40e      	bmi.n	8000af0 <__aeabi_d2uiz+0x34>
 8000ad2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ada:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ade:	fa23 f002 	lsr.w	r0, r3, r2
 8000ae2:	4770      	bx	lr
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aee:	d102      	bne.n	8000af6 <__aeabi_d2uiz+0x3a>
 8000af0:	f04f 30ff 	mov.w	r0, #4294967295
 8000af4:	4770      	bx	lr
 8000af6:	f04f 0000 	mov.w	r0, #0
 8000afa:	4770      	bx	lr

08000afc <__aeabi_d2lz>:
 8000afc:	b538      	push	{r3, r4, r5, lr}
 8000afe:	2200      	movs	r2, #0
 8000b00:	2300      	movs	r3, #0
 8000b02:	4604      	mov	r4, r0
 8000b04:	460d      	mov	r5, r1
 8000b06:	f7ff ff73 	bl	80009f0 <__aeabi_dcmplt>
 8000b0a:	b928      	cbnz	r0, 8000b18 <__aeabi_d2lz+0x1c>
 8000b0c:	4620      	mov	r0, r4
 8000b0e:	4629      	mov	r1, r5
 8000b10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b14:	f000 b80a 	b.w	8000b2c <__aeabi_d2ulz>
 8000b18:	4620      	mov	r0, r4
 8000b1a:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000b1e:	f000 f805 	bl	8000b2c <__aeabi_d2ulz>
 8000b22:	4240      	negs	r0, r0
 8000b24:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b28:	bd38      	pop	{r3, r4, r5, pc}
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2ulz>:
 8000b2c:	b5d0      	push	{r4, r6, r7, lr}
 8000b2e:	2200      	movs	r2, #0
 8000b30:	4b0b      	ldr	r3, [pc, #44]	@ (8000b60 <__aeabi_d2ulz+0x34>)
 8000b32:	4606      	mov	r6, r0
 8000b34:	460f      	mov	r7, r1
 8000b36:	f7ff fce9 	bl	800050c <__aeabi_dmul>
 8000b3a:	f7ff ffbf 	bl	8000abc <__aeabi_d2uiz>
 8000b3e:	4604      	mov	r4, r0
 8000b40:	f7ff fc6a 	bl	8000418 <__aeabi_ui2d>
 8000b44:	2200      	movs	r2, #0
 8000b46:	4b07      	ldr	r3, [pc, #28]	@ (8000b64 <__aeabi_d2ulz+0x38>)
 8000b48:	f7ff fce0 	bl	800050c <__aeabi_dmul>
 8000b4c:	4602      	mov	r2, r0
 8000b4e:	460b      	mov	r3, r1
 8000b50:	4630      	mov	r0, r6
 8000b52:	4639      	mov	r1, r7
 8000b54:	f7ff fb22 	bl	800019c <__aeabi_dsub>
 8000b58:	f7ff ffb0 	bl	8000abc <__aeabi_d2uiz>
 8000b5c:	4621      	mov	r1, r4
 8000b5e:	bdd0      	pop	{r4, r6, r7, pc}
 8000b60:	3df00000 	.word	0x3df00000
 8000b64:	41f00000 	.word	0x41f00000

08000b68 <LDR_init>:
 */

#include "LDR.h"


void LDR_init(ADC_Registers_t* ADCx){
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
	ADC_init(ADC1);
 8000b70:	4803      	ldr	r0, [pc, #12]	@ (8000b80 <LDR_init+0x18>)
 8000b72:	f002 fa13 	bl	8002f9c <ADC_init>
}
 8000b76:	bf00      	nop
 8000b78:	3708      	adds	r7, #8
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	40012400 	.word	0x40012400

08000b84 <LDR_Read>:

uint16 LDR_Read(ADC_Registers_t* ADCx,ADC_CHANNEL_t CHx){
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
 8000b8c:	460b      	mov	r3, r1
 8000b8e:	70fb      	strb	r3, [r7, #3]
	return	ADC_read(ADCx,CHx);
 8000b90:	78fb      	ldrb	r3, [r7, #3]
 8000b92:	4619      	mov	r1, r3
 8000b94:	6878      	ldr	r0, [r7, #4]
 8000b96:	f002 fa2f 	bl	8002ff8 <ADC_read>
 8000b9a:	4603      	mov	r3, r0

}
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	3708      	adds	r7, #8
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}

08000ba4 <LM35_init>:
 */


#include "LM35.h"

void LM35_init(ADC_Registers_t* ADCx){
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
	ADC_init(ADCx);
 8000bac:	6878      	ldr	r0, [r7, #4]
 8000bae:	f002 f9f5 	bl	8002f9c <ADC_init>
}
 8000bb2:	bf00      	nop
 8000bb4:	3708      	adds	r7, #8
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
	...

08000bbc <LM35_Read>:
uint16 LM35_Read(ADC_Registers_t* ADCx,ADC_CHANNEL_t CHx){
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b084      	sub	sp, #16
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
 8000bc4:	460b      	mov	r3, r1
 8000bc6:	70fb      	strb	r3, [r7, #3]
	uint16 data = ADC_read(ADCx, CHx);
 8000bc8:	78fb      	ldrb	r3, [r7, #3]
 8000bca:	4619      	mov	r1, r3
 8000bcc:	6878      	ldr	r0, [r7, #4]
 8000bce:	f002 fa13 	bl	8002ff8 <ADC_read>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	81fb      	strh	r3, [r7, #14]

	/*
	 *data >>> mvolt
	  4095 >>> 3300
	 */
	uint16 temp = (data*165)/4095;
 8000bd6:	89fa      	ldrh	r2, [r7, #14]
 8000bd8:	4613      	mov	r3, r2
 8000bda:	009b      	lsls	r3, r3, #2
 8000bdc:	4413      	add	r3, r2
 8000bde:	015a      	lsls	r2, r3, #5
 8000be0:	4413      	add	r3, r2
 8000be2:	4a06      	ldr	r2, [pc, #24]	@ (8000bfc <LM35_Read+0x40>)
 8000be4:	fb82 1203 	smull	r1, r2, r2, r3
 8000be8:	441a      	add	r2, r3
 8000bea:	12d2      	asrs	r2, r2, #11
 8000bec:	17db      	asrs	r3, r3, #31
 8000bee:	1ad3      	subs	r3, r2, r3
 8000bf0:	81bb      	strh	r3, [r7, #12]
	return temp;
 8000bf2:	89bb      	ldrh	r3, [r7, #12]
}
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	3710      	adds	r7, #16
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	80080081 	.word	0x80080081

08000c00 <enableNode>:

#include "Node.h"

uint8 buffer[5];

void enableNode(node_t *node) {
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b086      	sub	sp, #24
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
	uint8 command[3];
	if (node->nodeID == tempID) {
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	685b      	ldr	r3, [r3, #4]
 8000c0c:	2b80      	cmp	r3, #128	@ 0x80
 8000c0e:	d10c      	bne.n	8000c2a <enableNode+0x2a>
		LM35_init(ADC1);
 8000c10:	4826      	ldr	r0, [pc, #152]	@ (8000cac <enableNode+0xac>)
 8000c12:	f7ff ffc7 	bl	8000ba4 <LM35_init>
		strcpy(command, "NS");
 8000c16:	4a26      	ldr	r2, [pc, #152]	@ (8000cb0 <enableNode+0xb0>)
 8000c18:	f107 0310 	add.w	r3, r7, #16
 8000c1c:	6812      	ldr	r2, [r2, #0]
 8000c1e:	4611      	mov	r1, r2
 8000c20:	8019      	strh	r1, [r3, #0]
 8000c22:	3302      	adds	r3, #2
 8000c24:	0c12      	lsrs	r2, r2, #16
 8000c26:	701a      	strb	r2, [r3, #0]
 8000c28:	e029      	b.n	8000c7e <enableNode+0x7e>
	} else if (node->nodeID == relayID) {
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	685b      	ldr	r3, [r3, #4]
 8000c2e:	2b50      	cmp	r3, #80	@ 0x50
 8000c30:	d115      	bne.n	8000c5e <enableNode+0x5e>
		GPIO_PinConfig_t pinConfig;
		pinConfig.MODE = MODE_OUTPUT_PP;
 8000c32:	2304      	movs	r3, #4
 8000c34:	73bb      	strb	r3, [r7, #14]
		pinConfig.Pin_Number = Relay_PIN;
 8000c36:	2308      	movs	r3, #8
 8000c38:	81bb      	strh	r3, [r7, #12]
		pinConfig.Output_Speed = SPEED_10M;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	73fb      	strb	r3, [r7, #15]
		GPIO_init(Relay_GPIO, &pinConfig);
 8000c3e:	f107 030c 	add.w	r3, r7, #12
 8000c42:	4619      	mov	r1, r3
 8000c44:	481b      	ldr	r0, [pc, #108]	@ (8000cb4 <enableNode+0xb4>)
 8000c46:	f002 fd2b 	bl	80036a0 <GPIO_init>
		strcpy(command, "NA");
 8000c4a:	4a1b      	ldr	r2, [pc, #108]	@ (8000cb8 <enableNode+0xb8>)
 8000c4c:	f107 0310 	add.w	r3, r7, #16
 8000c50:	6812      	ldr	r2, [r2, #0]
 8000c52:	4611      	mov	r1, r2
 8000c54:	8019      	strh	r1, [r3, #0]
 8000c56:	3302      	adds	r3, #2
 8000c58:	0c12      	lsrs	r2, r2, #16
 8000c5a:	701a      	strb	r2, [r3, #0]
 8000c5c:	e00f      	b.n	8000c7e <enableNode+0x7e>
	} else if (node->nodeID == ldrID) {
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	685b      	ldr	r3, [r3, #4]
 8000c62:	2b81      	cmp	r3, #129	@ 0x81
 8000c64:	d10b      	bne.n	8000c7e <enableNode+0x7e>
		LDR_init(LDR_ADC);
 8000c66:	4811      	ldr	r0, [pc, #68]	@ (8000cac <enableNode+0xac>)
 8000c68:	f7ff ff7e 	bl	8000b68 <LDR_init>
		strcpy(command, "NS");
 8000c6c:	4a10      	ldr	r2, [pc, #64]	@ (8000cb0 <enableNode+0xb0>)
 8000c6e:	f107 0310 	add.w	r3, r7, #16
 8000c72:	6812      	ldr	r2, [r2, #0]
 8000c74:	4611      	mov	r1, r2
 8000c76:	8019      	strh	r1, [r3, #0]
 8000c78:	3302      	adds	r3, #2
 8000c7a:	0c12      	lsrs	r2, r2, #16
 8000c7c:	701a      	strb	r2, [r3, #0]
	}
	sprintf((char*) buffer, "0x%x", node->nodeID);
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	685b      	ldr	r3, [r3, #4]
 8000c82:	461a      	mov	r2, r3
 8000c84:	490d      	ldr	r1, [pc, #52]	@ (8000cbc <enableNode+0xbc>)
 8000c86:	480e      	ldr	r0, [pc, #56]	@ (8000cc0 <enableNode+0xc0>)
 8000c88:	f004 fba6 	bl	80053d8 <siprintf>
	uint8 *message = JSON_createString(command, buffer, (uint8*) "DONE");
 8000c8c:	f107 0310 	add.w	r3, r7, #16
 8000c90:	4a0c      	ldr	r2, [pc, #48]	@ (8000cc4 <enableNode+0xc4>)
 8000c92:	490b      	ldr	r1, [pc, #44]	@ (8000cc0 <enableNode+0xc0>)
 8000c94:	4618      	mov	r0, r3
 8000c96:	f000 f93b 	bl	8000f10 <JSON_createString>
 8000c9a:	6178      	str	r0, [r7, #20]
	USART_SendString(USART1, message);
 8000c9c:	6979      	ldr	r1, [r7, #20]
 8000c9e:	480a      	ldr	r0, [pc, #40]	@ (8000cc8 <enableNode+0xc8>)
 8000ca0:	f003 f94c 	bl	8003f3c <USART_SendString>

}
 8000ca4:	bf00      	nop
 8000ca6:	3718      	adds	r7, #24
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	40012400 	.word	0x40012400
 8000cb0:	08007c68 	.word	0x08007c68
 8000cb4:	40010800 	.word	0x40010800
 8000cb8:	08007c6c 	.word	0x08007c6c
 8000cbc:	08007c70 	.word	0x08007c70
 8000cc0:	2000020c 	.word	0x2000020c
 8000cc4:	08007c78 	.word	0x08007c78
 8000cc8:	40013800 	.word	0x40013800

08000ccc <disableNode>:
void disableNode(node_t *node) {
 8000ccc:	b480      	push	{r7}
 8000cce:	b083      	sub	sp, #12
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
	if (node->nodeID == tempID) {
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	685b      	ldr	r3, [r3, #4]
 8000cd8:	2b80      	cmp	r3, #128	@ 0x80
 8000cda:	d002      	beq.n	8000ce2 <disableNode+0x16>

	} else if (node->nodeID == relayID) {
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	685b      	ldr	r3, [r3, #4]
 8000ce0:	2b50      	cmp	r3, #80	@ 0x50

	} else if (node->nodeID == ldrID) {

	}
}
 8000ce2:	bf00      	nop
 8000ce4:	370c      	adds	r7, #12
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bc80      	pop	{r7}
 8000cea:	4770      	bx	lr

08000cec <actOnNode>:
void actOnNode(node_t *node, uint8 value) {
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
 8000cf4:	460b      	mov	r3, r1
 8000cf6:	70fb      	strb	r3, [r7, #3]
	if (node->nodeID == relayID) {
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	2b50      	cmp	r3, #80	@ 0x50
 8000cfe:	d108      	bne.n	8000d12 <actOnNode+0x26>
		Relay_setPin(Relay_GPIO, Relay_PIN, value);
 8000d00:	78fb      	ldrb	r3, [r7, #3]
 8000d02:	461a      	mov	r2, r3
 8000d04:	2108      	movs	r1, #8
 8000d06:	4805      	ldr	r0, [pc, #20]	@ (8000d1c <actOnNode+0x30>)
 8000d08:	f000 f880 	bl	8000e0c <Relay_setPin>
		node->status = value;
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	78fa      	ldrb	r2, [r7, #3]
 8000d10:	701a      	strb	r2, [r3, #0]
	}
}
 8000d12:	bf00      	nop
 8000d14:	3708      	adds	r7, #8
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	40010800 	.word	0x40010800

08000d20 <getNodeStatus>:
void getNodeStatus(node_t *node) {
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b084      	sub	sp, #16
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
	if (node->nodeID == relayID) {
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	685b      	ldr	r3, [r3, #4]
 8000d2c:	2b50      	cmp	r3, #80	@ 0x50
 8000d2e:	d111      	bne.n	8000d54 <getNodeStatus+0x34>
		sprintf((char*) buffer, "0x%x", node->nodeID);
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	685b      	ldr	r3, [r3, #4]
 8000d34:	461a      	mov	r2, r3
 8000d36:	4909      	ldr	r1, [pc, #36]	@ (8000d5c <getNodeStatus+0x3c>)
 8000d38:	4809      	ldr	r0, [pc, #36]	@ (8000d60 <getNodeStatus+0x40>)
 8000d3a:	f004 fb4d 	bl	80053d8 <siprintf>
		uint8 *message = JSON_createString((uint8*) "NA", buffer,
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	461a      	mov	r2, r3
 8000d42:	4907      	ldr	r1, [pc, #28]	@ (8000d60 <getNodeStatus+0x40>)
 8000d44:	4807      	ldr	r0, [pc, #28]	@ (8000d64 <getNodeStatus+0x44>)
 8000d46:	f000 f8e3 	bl	8000f10 <JSON_createString>
 8000d4a:	60f8      	str	r0, [r7, #12]
				&node->status);
		USART_SendString(USART1, message);
 8000d4c:	68f9      	ldr	r1, [r7, #12]
 8000d4e:	4806      	ldr	r0, [pc, #24]	@ (8000d68 <getNodeStatus+0x48>)
 8000d50:	f003 f8f4 	bl	8003f3c <USART_SendString>
	}

}
 8000d54:	bf00      	nop
 8000d56:	3710      	adds	r7, #16
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	08007c70 	.word	0x08007c70
 8000d60:	2000020c 	.word	0x2000020c
 8000d64:	08007c6c 	.word	0x08007c6c
 8000d68:	40013800 	.word	0x40013800

08000d6c <setNodeDuration>:
void setNodeDuration(node_t *node, uint32 duration) {
 8000d6c:	b480      	push	{r7}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
 8000d74:	6039      	str	r1, [r7, #0]
	node->duration = duration;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	683a      	ldr	r2, [r7, #0]
 8000d7a:	609a      	str	r2, [r3, #8]
}
 8000d7c:	bf00      	nop
 8000d7e:	370c      	adds	r7, #12
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bc80      	pop	{r7}
 8000d84:	4770      	bx	lr
	...

08000d88 <getNodeReading>:
void getNodeReading(node_t *node) {
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b084      	sub	sp, #16
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
	STK_delayMs(node->duration);
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	689b      	ldr	r3, [r3, #8]
 8000d94:	4618      	mov	r0, r3
 8000d96:	f002 fecd 	bl	8003b34 <STK_delayMs>
	uint8 value;
	if (node->nodeID == tempID) {
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	685b      	ldr	r3, [r3, #4]
 8000d9e:	2b80      	cmp	r3, #128	@ 0x80
 8000da0:	d107      	bne.n	8000db2 <getNodeReading+0x2a>
		value = LM35_Read(LM35_ADC, LM35_CHANNEL);
 8000da2:	2101      	movs	r1, #1
 8000da4:	4814      	ldr	r0, [pc, #80]	@ (8000df8 <getNodeReading+0x70>)
 8000da6:	f7ff ff09 	bl	8000bbc <LM35_Read>
 8000daa:	4603      	mov	r3, r0
 8000dac:	b2db      	uxtb	r3, r3
 8000dae:	72fb      	strb	r3, [r7, #11]
 8000db0:	e00a      	b.n	8000dc8 <getNodeReading+0x40>
	} else if (node->nodeID == ldrID) {
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	2b81      	cmp	r3, #129	@ 0x81
 8000db8:	d106      	bne.n	8000dc8 <getNodeReading+0x40>
		value = LDR_Read(LDR_ADC, LDR_CHANNEL);
 8000dba:	2103      	movs	r1, #3
 8000dbc:	480e      	ldr	r0, [pc, #56]	@ (8000df8 <getNodeReading+0x70>)
 8000dbe:	f7ff fee1 	bl	8000b84 <LDR_Read>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	b2db      	uxtb	r3, r3
 8000dc6:	72fb      	strb	r3, [r7, #11]
	}
	sprintf((char*) buffer, "0x%x", node->nodeID);
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	685b      	ldr	r3, [r3, #4]
 8000dcc:	461a      	mov	r2, r3
 8000dce:	490b      	ldr	r1, [pc, #44]	@ (8000dfc <getNodeReading+0x74>)
 8000dd0:	480b      	ldr	r0, [pc, #44]	@ (8000e00 <getNodeReading+0x78>)
 8000dd2:	f004 fb01 	bl	80053d8 <siprintf>
	uint8 *message = JSON_createString((uint8*) "NS", buffer, &value);
 8000dd6:	f107 030b 	add.w	r3, r7, #11
 8000dda:	461a      	mov	r2, r3
 8000ddc:	4908      	ldr	r1, [pc, #32]	@ (8000e00 <getNodeReading+0x78>)
 8000dde:	4809      	ldr	r0, [pc, #36]	@ (8000e04 <getNodeReading+0x7c>)
 8000de0:	f000 f896 	bl	8000f10 <JSON_createString>
 8000de4:	60f8      	str	r0, [r7, #12]
	USART_SendString(USART1, message);
 8000de6:	68f9      	ldr	r1, [r7, #12]
 8000de8:	4807      	ldr	r0, [pc, #28]	@ (8000e08 <getNodeReading+0x80>)
 8000dea:	f003 f8a7 	bl	8003f3c <USART_SendString>

}
 8000dee:	bf00      	nop
 8000df0:	3710      	adds	r7, #16
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	40012400 	.word	0x40012400
 8000dfc:	08007c70 	.word	0x08007c70
 8000e00:	2000020c 	.word	0x2000020c
 8000e04:	08007c68 	.word	0x08007c68
 8000e08:	40013800 	.word	0x40013800

08000e0c <Relay_setPin>:
	GPIO_init(GPIOx, pinConfig);
}



void Relay_setPin(GPIO_Registers_t* GPIOx , uint16 pinNumber, uint8 value){
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
 8000e14:	460b      	mov	r3, r1
 8000e16:	807b      	strh	r3, [r7, #2]
 8000e18:	4613      	mov	r3, r2
 8000e1a:	707b      	strb	r3, [r7, #1]
	GPIO_WritePin(GPIOx, pinNumber, value);
 8000e1c:	787a      	ldrb	r2, [r7, #1]
 8000e1e:	887b      	ldrh	r3, [r7, #2]
 8000e20:	4619      	mov	r1, r3
 8000e22:	6878      	ldr	r0, [r7, #4]
 8000e24:	f002 fcb8 	bl	8003798 <GPIO_WritePin>

}
 8000e28:	bf00      	nop
 8000e2a:	3708      	adds	r7, #8
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}

08000e30 <JSON_parseString>:
 *  Created on: Dec 6, 2024
 *      Author: Alaa
 */

#include "JSON_Parser.h"
Parsed_JSON_t JSON_parseString(uint8 *message) {
 8000e30:	b5b0      	push	{r4, r5, r7, lr}
 8000e32:	b090      	sub	sp, #64	@ 0x40
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
 8000e38:	6039      	str	r1, [r7, #0]
	cJSON *json_message = cJSON_Parse(message);
 8000e3a:	6838      	ldr	r0, [r7, #0]
 8000e3c:	f001 f954 	bl	80020e8 <cJSON_Parse>
 8000e40:	63f8      	str	r0, [r7, #60]	@ 0x3c
	Parsed_JSON_t parsed_message={0};
 8000e42:	f107 030c 	add.w	r3, r7, #12
 8000e46:	2224      	movs	r2, #36	@ 0x24
 8000e48:	2100      	movs	r1, #0
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f004 fb53 	bl	80054f6 <memset>

	if (json_message == NULL) {
 8000e50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d10a      	bne.n	8000e6c <JSON_parseString+0x3c>
		return parsed_message;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	461d      	mov	r5, r3
 8000e5a:	f107 040c 	add.w	r4, r7, #12
 8000e5e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e60:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e62:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e64:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e66:	6823      	ldr	r3, [r4, #0]
 8000e68:	602b      	str	r3, [r5, #0]
 8000e6a:	e047      	b.n	8000efc <JSON_parseString+0xcc>
	}

	cJSON *command = cJSON_GetObjectItem(json_message, "command");
 8000e6c:	4925      	ldr	r1, [pc, #148]	@ (8000f04 <JSON_parseString+0xd4>)
 8000e6e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8000e70:	f001 ff6e 	bl	8002d50 <cJSON_GetObjectItem>
 8000e74:	63b8      	str	r0, [r7, #56]	@ 0x38
	if (cJSON_IsString(command)) {
 8000e76:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8000e78:	f002 f87a 	bl	8002f70 <cJSON_IsString>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d007      	beq.n	8000e92 <JSON_parseString+0x62>
		strncpy(parsed_message.command, command->valuestring,
 8000e82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000e84:	6919      	ldr	r1, [r3, #16]
 8000e86:	f107 030c 	add.w	r3, r7, #12
 8000e8a:	220f      	movs	r2, #15
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f004 fb4c 	bl	800552a <strncpy>
				sizeof(parsed_message.command) - 1);
	}

	cJSON *nodeID = cJSON_GetObjectItem(json_message, "nodeID");
 8000e92:	491d      	ldr	r1, [pc, #116]	@ (8000f08 <JSON_parseString+0xd8>)
 8000e94:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8000e96:	f001 ff5b 	bl	8002d50 <cJSON_GetObjectItem>
 8000e9a:	6378      	str	r0, [r7, #52]	@ 0x34
	if (cJSON_IsString(nodeID)) {
 8000e9c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8000e9e:	f002 f867 	bl	8002f70 <cJSON_IsString>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d008      	beq.n	8000eba <JSON_parseString+0x8a>
		parsed_message.nodeID = (int) strtol(nodeID->valuestring, NULL, 16);
 8000ea8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000eaa:	691b      	ldr	r3, [r3, #16]
 8000eac:	2210      	movs	r2, #16
 8000eae:	2100      	movs	r1, #0
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f004 f9c5 	bl	8005240 <strtol>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	61fb      	str	r3, [r7, #28]
	}

	cJSON *data = cJSON_GetObjectItem(json_message, "data");
 8000eba:	4914      	ldr	r1, [pc, #80]	@ (8000f0c <JSON_parseString+0xdc>)
 8000ebc:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8000ebe:	f001 ff47 	bl	8002d50 <cJSON_GetObjectItem>
 8000ec2:	6338      	str	r0, [r7, #48]	@ 0x30
	if (cJSON_IsString(data)) {
 8000ec4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8000ec6:	f002 f853 	bl	8002f70 <cJSON_IsString>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d008      	beq.n	8000ee2 <JSON_parseString+0xb2>
		strncpy(parsed_message.data, data->valuestring,
 8000ed0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000ed2:	6919      	ldr	r1, [r3, #16]
 8000ed4:	f107 030c 	add.w	r3, r7, #12
 8000ed8:	3314      	adds	r3, #20
 8000eda:	220f      	movs	r2, #15
 8000edc:	4618      	mov	r0, r3
 8000ede:	f004 fb24 	bl	800552a <strncpy>
				sizeof(parsed_message.data) - 1);
	}

	cJSON_Delete(json_message);
 8000ee2:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8000ee4:	f000 f8e8 	bl	80010b8 <cJSON_Delete>
	return parsed_message;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	461d      	mov	r5, r3
 8000eec:	f107 040c 	add.w	r4, r7, #12
 8000ef0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ef2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ef4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ef6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ef8:	6823      	ldr	r3, [r4, #0]
 8000efa:	602b      	str	r3, [r5, #0]

}
 8000efc:	6878      	ldr	r0, [r7, #4]
 8000efe:	3740      	adds	r7, #64	@ 0x40
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bdb0      	pop	{r4, r5, r7, pc}
 8000f04:	08007c80 	.word	0x08007c80
 8000f08:	08007c88 	.word	0x08007c88
 8000f0c:	08007c90 	.word	0x08007c90

08000f10 <JSON_createString>:
uint8* JSON_createString(uint8 *command, uint8 *nodeID, uint8 *data) {
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b086      	sub	sp, #24
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	60f8      	str	r0, [r7, #12]
 8000f18:	60b9      	str	r1, [r7, #8]
 8000f1a:	607a      	str	r2, [r7, #4]

	cJSON *json_message = cJSON_CreateObject();
 8000f1c:	f002 f814 	bl	8002f48 <cJSON_CreateObject>
 8000f20:	6178      	str	r0, [r7, #20]
	cJSON_AddStringToObject(json_message, "command", command);
 8000f22:	68fa      	ldr	r2, [r7, #12]
 8000f24:	490c      	ldr	r1, [pc, #48]	@ (8000f58 <JSON_createString+0x48>)
 8000f26:	6978      	ldr	r0, [r7, #20]
 8000f28:	f001 ffc6 	bl	8002eb8 <cJSON_AddStringToObject>
	cJSON_AddStringToObject(json_message, "nodeID", nodeID);
 8000f2c:	68ba      	ldr	r2, [r7, #8]
 8000f2e:	490b      	ldr	r1, [pc, #44]	@ (8000f5c <JSON_createString+0x4c>)
 8000f30:	6978      	ldr	r0, [r7, #20]
 8000f32:	f001 ffc1 	bl	8002eb8 <cJSON_AddStringToObject>
	cJSON_AddStringToObject(json_message, "data", data);
 8000f36:	687a      	ldr	r2, [r7, #4]
 8000f38:	4909      	ldr	r1, [pc, #36]	@ (8000f60 <JSON_createString+0x50>)
 8000f3a:	6978      	ldr	r0, [r7, #20]
 8000f3c:	f001 ffbc 	bl	8002eb8 <cJSON_AddStringToObject>

	uint8 *ret_String = cJSON_PrintUnformatted(json_message);
 8000f40:	6978      	ldr	r0, [r7, #20]
 8000f42:	f001 f969 	bl	8002218 <cJSON_PrintUnformatted>
 8000f46:	6138      	str	r0, [r7, #16]

	cJSON_Delete(json_message);
 8000f48:	6978      	ldr	r0, [r7, #20]
 8000f4a:	f000 f8b5 	bl	80010b8 <cJSON_Delete>
	return ret_String;
 8000f4e:	693b      	ldr	r3, [r7, #16]

}
 8000f50:	4618      	mov	r0, r3
 8000f52:	3718      	adds	r7, #24
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	08007c80 	.word	0x08007c80
 8000f5c:	08007c88 	.word	0x08007c88
 8000f60:	08007c90 	.word	0x08007c90

08000f64 <case_insensitive_strcmp>:
    return version;
}

/* Case insensitive string comparison, doesn't consider two NULL pointers equal though */
static int case_insensitive_strcmp(const unsigned char *string1, const unsigned char *string2)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b085      	sub	sp, #20
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
 8000f6c:	6039      	str	r1, [r7, #0]
    if ((string1 == NULL) || (string2 == NULL))
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d002      	beq.n	8000f7a <case_insensitive_strcmp+0x16>
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d101      	bne.n	8000f7e <case_insensitive_strcmp+0x1a>
    {
        return 1;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	e056      	b.n	800102c <case_insensitive_strcmp+0xc8>
    }

    if (string1 == string2)
 8000f7e:	687a      	ldr	r2, [r7, #4]
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	429a      	cmp	r2, r3
 8000f84:	d10d      	bne.n	8000fa2 <case_insensitive_strcmp+0x3e>
    {
        return 0;
 8000f86:	2300      	movs	r3, #0
 8000f88:	e050      	b.n	800102c <case_insensitive_strcmp+0xc8>
    }

    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
    {
        if (*string1 == '\0')
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d101      	bne.n	8000f96 <case_insensitive_strcmp+0x32>
        {
            return 0;
 8000f92:	2300      	movs	r3, #0
 8000f94:	e04a      	b.n	800102c <case_insensitive_strcmp+0xc8>
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	3301      	adds	r3, #1
 8000f9a:	607b      	str	r3, [r7, #4]
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	3301      	adds	r3, #1
 8000fa0:	603b      	str	r3, [r7, #0]
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	73fb      	strb	r3, [r7, #15]
 8000fa8:	7bfb      	ldrb	r3, [r7, #15]
 8000faa:	3301      	adds	r3, #1
 8000fac:	4a22      	ldr	r2, [pc, #136]	@ (8001038 <case_insensitive_strcmp+0xd4>)
 8000fae:	4413      	add	r3, r2
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	f003 0303 	and.w	r3, r3, #3
 8000fb6:	2b01      	cmp	r3, #1
 8000fb8:	d103      	bne.n	8000fc2 <case_insensitive_strcmp+0x5e>
 8000fba:	7bfb      	ldrb	r3, [r7, #15]
 8000fbc:	f103 0220 	add.w	r2, r3, #32
 8000fc0:	e000      	b.n	8000fc4 <case_insensitive_strcmp+0x60>
 8000fc2:	7bfa      	ldrb	r2, [r7, #15]
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	73bb      	strb	r3, [r7, #14]
 8000fca:	7bbb      	ldrb	r3, [r7, #14]
 8000fcc:	3301      	adds	r3, #1
 8000fce:	491a      	ldr	r1, [pc, #104]	@ (8001038 <case_insensitive_strcmp+0xd4>)
 8000fd0:	440b      	add	r3, r1
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	f003 0303 	and.w	r3, r3, #3
 8000fd8:	2b01      	cmp	r3, #1
 8000fda:	d102      	bne.n	8000fe2 <case_insensitive_strcmp+0x7e>
 8000fdc:	7bbb      	ldrb	r3, [r7, #14]
 8000fde:	3320      	adds	r3, #32
 8000fe0:	e000      	b.n	8000fe4 <case_insensitive_strcmp+0x80>
 8000fe2:	7bbb      	ldrb	r3, [r7, #14]
 8000fe4:	429a      	cmp	r2, r3
 8000fe6:	d0d0      	beq.n	8000f8a <case_insensitive_strcmp+0x26>
        }
    }

    return tolower(*string1) - tolower(*string2);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	737b      	strb	r3, [r7, #13]
 8000fee:	7b7b      	ldrb	r3, [r7, #13]
 8000ff0:	3301      	adds	r3, #1
 8000ff2:	4a11      	ldr	r2, [pc, #68]	@ (8001038 <case_insensitive_strcmp+0xd4>)
 8000ff4:	4413      	add	r3, r2
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	f003 0303 	and.w	r3, r3, #3
 8000ffc:	2b01      	cmp	r3, #1
 8000ffe:	d103      	bne.n	8001008 <case_insensitive_strcmp+0xa4>
 8001000:	7b7b      	ldrb	r3, [r7, #13]
 8001002:	f103 0220 	add.w	r2, r3, #32
 8001006:	e000      	b.n	800100a <case_insensitive_strcmp+0xa6>
 8001008:	7b7a      	ldrb	r2, [r7, #13]
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	733b      	strb	r3, [r7, #12]
 8001010:	7b3b      	ldrb	r3, [r7, #12]
 8001012:	3301      	adds	r3, #1
 8001014:	4908      	ldr	r1, [pc, #32]	@ (8001038 <case_insensitive_strcmp+0xd4>)
 8001016:	440b      	add	r3, r1
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	f003 0303 	and.w	r3, r3, #3
 800101e:	2b01      	cmp	r3, #1
 8001020:	d102      	bne.n	8001028 <case_insensitive_strcmp+0xc4>
 8001022:	7b3b      	ldrb	r3, [r7, #12]
 8001024:	3320      	adds	r3, #32
 8001026:	e000      	b.n	800102a <case_insensitive_strcmp+0xc6>
 8001028:	7b3b      	ldrb	r3, [r7, #12]
 800102a:	1ad3      	subs	r3, r2, r3
}
 800102c:	4618      	mov	r0, r3
 800102e:	3714      	adds	r7, #20
 8001030:	46bd      	mov	sp, r7
 8001032:	bc80      	pop	{r7}
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	08007d70 	.word	0x08007d70

0800103c <cJSON_strdup>:
#define static_strlen(string_literal) (sizeof(string_literal) - sizeof(""))

static internal_hooks global_hooks = { internal_malloc, internal_free, internal_realloc };

static unsigned char* cJSON_strdup(const unsigned char* string, const internal_hooks * const hooks)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b084      	sub	sp, #16
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	6039      	str	r1, [r7, #0]
    size_t length = 0;
 8001046:	2300      	movs	r3, #0
 8001048:	60fb      	str	r3, [r7, #12]
    unsigned char *copy = NULL;
 800104a:	2300      	movs	r3, #0
 800104c:	60bb      	str	r3, [r7, #8]

    if (string == NULL)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d101      	bne.n	8001058 <cJSON_strdup+0x1c>
    {
        return NULL;
 8001054:	2300      	movs	r3, #0
 8001056:	e015      	b.n	8001084 <cJSON_strdup+0x48>
    }

    length = strlen((const char*)string) + sizeof("");
 8001058:	6878      	ldr	r0, [r7, #4]
 800105a:	f7ff f893 	bl	8000184 <strlen>
 800105e:	4603      	mov	r3, r0
 8001060:	3301      	adds	r3, #1
 8001062:	60fb      	str	r3, [r7, #12]
    copy = (unsigned char*)hooks->allocate(length);
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	68f8      	ldr	r0, [r7, #12]
 800106a:	4798      	blx	r3
 800106c:	60b8      	str	r0, [r7, #8]
    if (copy == NULL)
 800106e:	68bb      	ldr	r3, [r7, #8]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d101      	bne.n	8001078 <cJSON_strdup+0x3c>
    {
        return NULL;
 8001074:	2300      	movs	r3, #0
 8001076:	e005      	b.n	8001084 <cJSON_strdup+0x48>
    }
    memcpy(copy, string, length);
 8001078:	68fa      	ldr	r2, [r7, #12]
 800107a:	6879      	ldr	r1, [r7, #4]
 800107c:	68b8      	ldr	r0, [r7, #8]
 800107e:	f004 faea 	bl	8005656 <memcpy>

    return copy;
 8001082:	68bb      	ldr	r3, [r7, #8]
}
 8001084:	4618      	mov	r0, r3
 8001086:	3710      	adds	r7, #16
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}

0800108c <cJSON_New_Item>:
    }
}

/* Internal constructor. */
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b084      	sub	sp, #16
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	2028      	movs	r0, #40	@ 0x28
 800109a:	4798      	blx	r3
 800109c:	60f8      	str	r0, [r7, #12]
    if (node)
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d004      	beq.n	80010ae <cJSON_New_Item+0x22>
    {
        memset(node, '\0', sizeof(cJSON));
 80010a4:	2228      	movs	r2, #40	@ 0x28
 80010a6:	2100      	movs	r1, #0
 80010a8:	68f8      	ldr	r0, [r7, #12]
 80010aa:	f004 fa24 	bl	80054f6 <memset>
    }

    return node;
 80010ae:	68fb      	ldr	r3, [r7, #12]
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	3710      	adds	r7, #16
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}

080010b8 <cJSON_Delete>:

/* Delete a cJSON structure. */
CJSON_PUBLIC(void) cJSON_Delete(cJSON *item)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b084      	sub	sp, #16
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
    cJSON *next = NULL;
 80010c0:	2300      	movs	r3, #0
 80010c2:	60fb      	str	r3, [r7, #12]
    while (item != NULL)
 80010c4:	e03d      	b.n	8001142 <cJSON_Delete+0x8a>
    {
        next = item->next;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	60fb      	str	r3, [r7, #12]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	68db      	ldr	r3, [r3, #12]
 80010d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d108      	bne.n	80010ea <cJSON_Delete+0x32>
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	689b      	ldr	r3, [r3, #8]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d004      	beq.n	80010ea <cJSON_Delete+0x32>
        {
            cJSON_Delete(item->child);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	689b      	ldr	r3, [r3, #8]
 80010e4:	4618      	mov	r0, r3
 80010e6:	f7ff ffe7 	bl	80010b8 <cJSON_Delete>
        }
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	68db      	ldr	r3, [r3, #12]
 80010ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d10c      	bne.n	8001110 <cJSON_Delete+0x58>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	691b      	ldr	r3, [r3, #16]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d008      	beq.n	8001110 <cJSON_Delete+0x58>
        {
            global_hooks.deallocate(item->valuestring);
 80010fe:	4b15      	ldr	r3, [pc, #84]	@ (8001154 <cJSON_Delete+0x9c>)
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	687a      	ldr	r2, [r7, #4]
 8001104:	6912      	ldr	r2, [r2, #16]
 8001106:	4610      	mov	r0, r2
 8001108:	4798      	blx	r3
            item->valuestring = NULL;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	2200      	movs	r2, #0
 800110e:	611a      	str	r2, [r3, #16]
        }
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	68db      	ldr	r3, [r3, #12]
 8001114:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001118:	2b00      	cmp	r3, #0
 800111a:	d10c      	bne.n	8001136 <cJSON_Delete+0x7e>
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6a1b      	ldr	r3, [r3, #32]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d008      	beq.n	8001136 <cJSON_Delete+0x7e>
        {
            global_hooks.deallocate(item->string);
 8001124:	4b0b      	ldr	r3, [pc, #44]	@ (8001154 <cJSON_Delete+0x9c>)
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	687a      	ldr	r2, [r7, #4]
 800112a:	6a12      	ldr	r2, [r2, #32]
 800112c:	4610      	mov	r0, r2
 800112e:	4798      	blx	r3
            item->string = NULL;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2200      	movs	r2, #0
 8001134:	621a      	str	r2, [r3, #32]
        }
        global_hooks.deallocate(item);
 8001136:	4b07      	ldr	r3, [pc, #28]	@ (8001154 <cJSON_Delete+0x9c>)
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	6878      	ldr	r0, [r7, #4]
 800113c:	4798      	blx	r3
        item = next;
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	607b      	str	r3, [r7, #4]
    while (item != NULL)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d1be      	bne.n	80010c6 <cJSON_Delete+0xe>
    }
}
 8001148:	bf00      	nop
 800114a:	bf00      	nop
 800114c:	3710      	adds	r7, #16
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	20000000 	.word	0x20000000

08001158 <get_decimal_point>:

/* get the decimal point character of the current locale */
static unsigned char get_decimal_point(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
#ifdef ENABLE_LOCALES
    struct lconv *lconv = localeconv();
    return (unsigned char) lconv->decimal_point[0];
#else
    return '.';
 800115c:	232e      	movs	r3, #46	@ 0x2e
#endif
}
 800115e:	4618      	mov	r0, r3
 8001160:	46bd      	mov	sp, r7
 8001162:	bc80      	pop	{r7}
 8001164:	4770      	bx	lr
	...

08001168 <parse_number>:
/* get a pointer to the buffer at the position */
#define buffer_at_offset(buffer) ((buffer)->content + (buffer)->offset)

/* Parse the input text to generate a number, and populate the result into item. */
static cJSON_bool parse_number(cJSON * const item, parse_buffer * const input_buffer)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b098      	sub	sp, #96	@ 0x60
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
 8001170:	6039      	str	r1, [r7, #0]
    double number = 0;
 8001172:	f04f 0200 	mov.w	r2, #0
 8001176:	f04f 0300 	mov.w	r3, #0
 800117a:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    unsigned char *after_end = NULL;
 800117e:	2300      	movs	r3, #0
 8001180:	64bb      	str	r3, [r7, #72]	@ 0x48
    unsigned char number_c_string[64];
    unsigned char decimal_point = get_decimal_point();
 8001182:	f7ff ffe9 	bl	8001158 <get_decimal_point>
 8001186:	4603      	mov	r3, r0
 8001188:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    size_t i = 0;
 800118c:	2300      	movs	r3, #0
 800118e:	65fb      	str	r3, [r7, #92]	@ 0x5c

    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d003      	beq.n	800119e <parse_number+0x36>
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d101      	bne.n	80011a2 <parse_number+0x3a>
    {
        return false;
 800119e:	2300      	movs	r3, #0
 80011a0:	e0a0      	b.n	80012e4 <parse_number+0x17c>
    }

    /* copy the number into a temporary buffer and replace '.' with the decimal point
     * of the current locale (for strtod)
     * This also takes care of '\0' not necessarily being available for marking the end of the input */
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 80011a2:	2300      	movs	r3, #0
 80011a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80011a6:	e03d      	b.n	8001224 <parse_number+0xbc>
    {
        switch (buffer_at_offset(input_buffer)[i])
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	6899      	ldr	r1, [r3, #8]
 80011b0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80011b2:	440b      	add	r3, r1
 80011b4:	4413      	add	r3, r2
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	2b45      	cmp	r3, #69	@ 0x45
 80011ba:	dc17      	bgt.n	80011ec <parse_number+0x84>
 80011bc:	2b2b      	cmp	r3, #43	@ 0x2b
 80011be:	db40      	blt.n	8001242 <parse_number+0xda>
 80011c0:	3b2b      	subs	r3, #43	@ 0x2b
 80011c2:	2201      	movs	r2, #1
 80011c4:	409a      	lsls	r2, r3
 80011c6:	4b4c      	ldr	r3, [pc, #304]	@ (80012f8 <parse_number+0x190>)
 80011c8:	4013      	ands	r3, r2
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	bf14      	ite	ne
 80011ce:	2301      	movne	r3, #1
 80011d0:	2300      	moveq	r3, #0
 80011d2:	b2db      	uxtb	r3, r3
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d10b      	bne.n	80011f0 <parse_number+0x88>
 80011d8:	f002 0308 	and.w	r3, r2, #8
 80011dc:	2b00      	cmp	r3, #0
 80011de:	bf14      	ite	ne
 80011e0:	2301      	movne	r3, #1
 80011e2:	2300      	moveq	r3, #0
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d111      	bne.n	800120e <parse_number+0xa6>
            case '.':
                number_c_string[i] = decimal_point;
                break;

            default:
                goto loop_end;
 80011ea:	e02a      	b.n	8001242 <parse_number+0xda>
        switch (buffer_at_offset(input_buffer)[i])
 80011ec:	2b65      	cmp	r3, #101	@ 0x65
 80011ee:	d128      	bne.n	8001242 <parse_number+0xda>
                number_c_string[i] = buffer_at_offset(input_buffer)[i];
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	6899      	ldr	r1, [r3, #8]
 80011f8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80011fa:	440b      	add	r3, r1
 80011fc:	4413      	add	r3, r2
 80011fe:	7819      	ldrb	r1, [r3, #0]
 8001200:	f107 0208 	add.w	r2, r7, #8
 8001204:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001206:	4413      	add	r3, r2
 8001208:	460a      	mov	r2, r1
 800120a:	701a      	strb	r2, [r3, #0]
                break;
 800120c:	e007      	b.n	800121e <parse_number+0xb6>
                number_c_string[i] = decimal_point;
 800120e:	f107 0208 	add.w	r2, r7, #8
 8001212:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001214:	4413      	add	r3, r2
 8001216:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 800121a:	701a      	strb	r2, [r3, #0]
                break;
 800121c:	bf00      	nop
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 800121e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001220:	3301      	adds	r3, #1
 8001222:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001224:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001226:	2b3e      	cmp	r3, #62	@ 0x3e
 8001228:	d80d      	bhi.n	8001246 <parse_number+0xde>
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d00a      	beq.n	8001246 <parse_number+0xde>
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	689a      	ldr	r2, [r3, #8]
 8001234:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001236:	441a      	add	r2, r3
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	429a      	cmp	r2, r3
 800123e:	d3b3      	bcc.n	80011a8 <parse_number+0x40>
        }
    }
loop_end:
 8001240:	e001      	b.n	8001246 <parse_number+0xde>
                goto loop_end;
 8001242:	bf00      	nop
 8001244:	e000      	b.n	8001248 <parse_number+0xe0>
loop_end:
 8001246:	bf00      	nop
    number_c_string[i] = '\0';
 8001248:	f107 0208 	add.w	r2, r7, #8
 800124c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800124e:	4413      	add	r3, r2
 8001250:	2200      	movs	r2, #0
 8001252:	701a      	strb	r2, [r3, #0]

    number = strtod((const char*)number_c_string, (char**)&after_end);
 8001254:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8001258:	f107 0308 	add.w	r3, r7, #8
 800125c:	4611      	mov	r1, r2
 800125e:	4618      	mov	r0, r3
 8001260:	f003 ff66 	bl	8005130 <strtod>
 8001264:	e9c7 0114 	strd	r0, r1, [r7, #80]	@ 0x50
    if (number_c_string == after_end)
 8001268:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800126a:	f107 0308 	add.w	r3, r7, #8
 800126e:	429a      	cmp	r2, r3
 8001270:	d101      	bne.n	8001276 <parse_number+0x10e>
    {
        return false; /* parse_error */
 8001272:	2300      	movs	r3, #0
 8001274:	e036      	b.n	80012e4 <parse_number+0x17c>
    }

    item->valuedouble = number;
 8001276:	6879      	ldr	r1, [r7, #4]
 8001278:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800127c:	e9c1 2306 	strd	r2, r3, [r1, #24]

    /* use saturation in case of overflow */
    if (number >= INT_MAX)
 8001280:	a31b      	add	r3, pc, #108	@ (adr r3, 80012f0 <parse_number+0x188>)
 8001282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001286:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800128a:	f7ff fbc5 	bl	8000a18 <__aeabi_dcmpge>
 800128e:	4603      	mov	r3, r0
 8001290:	2b00      	cmp	r3, #0
 8001292:	d004      	beq.n	800129e <parse_number+0x136>
    {
        item->valueint = INT_MAX;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 800129a:	615a      	str	r2, [r3, #20]
 800129c:	e015      	b.n	80012ca <parse_number+0x162>
    }
    else if (number <= (double)INT_MIN)
 800129e:	f04f 0200 	mov.w	r2, #0
 80012a2:	4b16      	ldr	r3, [pc, #88]	@ (80012fc <parse_number+0x194>)
 80012a4:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 80012a8:	f7ff fbac 	bl	8000a04 <__aeabi_dcmple>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d004      	beq.n	80012bc <parse_number+0x154>
    {
        item->valueint = INT_MIN;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80012b8:	615a      	str	r2, [r3, #20]
 80012ba:	e006      	b.n	80012ca <parse_number+0x162>
    }
    else
    {
        item->valueint = (int)number;
 80012bc:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 80012c0:	f7ff fbd4 	bl	8000a6c <__aeabi_d2iz>
 80012c4:	4602      	mov	r2, r0
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	615a      	str	r2, [r3, #20]
    }

    item->type = cJSON_Number;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2208      	movs	r2, #8
 80012ce:	60da      	str	r2, [r3, #12]

    input_buffer->offset += (size_t)(after_end - number_c_string);
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	689b      	ldr	r3, [r3, #8]
 80012d4:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80012d6:	f107 0208 	add.w	r2, r7, #8
 80012da:	1a8a      	subs	r2, r1, r2
 80012dc:	441a      	add	r2, r3
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	609a      	str	r2, [r3, #8]
    return true;
 80012e2:	2301      	movs	r3, #1
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	3760      	adds	r7, #96	@ 0x60
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	f3af 8000 	nop.w
 80012f0:	ffc00000 	.word	0xffc00000
 80012f4:	41dfffff 	.word	0x41dfffff
 80012f8:	04007fe5 	.word	0x04007fe5
 80012fc:	c1e00000 	.word	0xc1e00000

08001300 <ensure>:
    internal_hooks hooks;
} printbuffer;

/* realloc printbuffer if necessary to have at least "needed" bytes more */
static unsigned char* ensure(printbuffer * const p, size_t needed)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b084      	sub	sp, #16
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
 8001308:	6039      	str	r1, [r7, #0]
    unsigned char *newbuffer = NULL;
 800130a:	2300      	movs	r3, #0
 800130c:	60fb      	str	r3, [r7, #12]
    size_t newsize = 0;
 800130e:	2300      	movs	r3, #0
 8001310:	60bb      	str	r3, [r7, #8]

    if ((p == NULL) || (p->buffer == NULL))
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d003      	beq.n	8001320 <ensure+0x20>
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d101      	bne.n	8001324 <ensure+0x24>
    {
        return NULL;
 8001320:	2300      	movs	r3, #0
 8001322:	e083      	b.n	800142c <ensure+0x12c>
    }

    if ((p->length > 0) && (p->offset >= p->length))
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d007      	beq.n	800133c <ensure+0x3c>
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	689a      	ldr	r2, [r3, #8]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	429a      	cmp	r2, r3
 8001336:	d301      	bcc.n	800133c <ensure+0x3c>
    {
        /* make sure that offset is valid */
        return NULL;
 8001338:	2300      	movs	r3, #0
 800133a:	e077      	b.n	800142c <ensure+0x12c>
    }

    if (needed > INT_MAX)
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	2b00      	cmp	r3, #0
 8001340:	da01      	bge.n	8001346 <ensure+0x46>
    {
        /* sizes bigger than INT_MAX are currently not supported */
        return NULL;
 8001342:	2300      	movs	r3, #0
 8001344:	e072      	b.n	800142c <ensure+0x12c>
    }

    needed += p->offset + 1;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	689a      	ldr	r2, [r3, #8]
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	4413      	add	r3, r2
 800134e:	3301      	adds	r3, #1
 8001350:	603b      	str	r3, [r7, #0]
    if (needed <= p->length)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	683a      	ldr	r2, [r7, #0]
 8001358:	429a      	cmp	r2, r3
 800135a:	d805      	bhi.n	8001368 <ensure+0x68>
    {
        return p->buffer + p->offset;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	689b      	ldr	r3, [r3, #8]
 8001364:	4413      	add	r3, r2
 8001366:	e061      	b.n	800142c <ensure+0x12c>
    }

    if (p->noalloc) {
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	691b      	ldr	r3, [r3, #16]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <ensure+0x74>
        return NULL;
 8001370:	2300      	movs	r3, #0
 8001372:	e05b      	b.n	800142c <ensure+0x12c>
    }

    /* calculate new buffer size */
    if (needed > (INT_MAX / 2))
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800137a:	d308      	bcc.n	800138e <ensure+0x8e>
    {
        /* overflow of int, use INT_MAX if possible */
        if (needed <= INT_MAX)
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	2b00      	cmp	r3, #0
 8001380:	db03      	blt.n	800138a <ensure+0x8a>
        {
            newsize = INT_MAX;
 8001382:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8001386:	60bb      	str	r3, [r7, #8]
 8001388:	e004      	b.n	8001394 <ensure+0x94>
        }
        else
        {
            return NULL;
 800138a:	2300      	movs	r3, #0
 800138c:	e04e      	b.n	800142c <ensure+0x12c>
        }
    }
    else
    {
        newsize = needed * 2;
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	005b      	lsls	r3, r3, #1
 8001392:	60bb      	str	r3, [r7, #8]
    }

    if (p->hooks.reallocate != NULL)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6a1b      	ldr	r3, [r3, #32]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d018      	beq.n	80013ce <ensure+0xce>
    {
        /* reallocate with realloc if available */
        newbuffer = (unsigned char*)p->hooks.reallocate(p->buffer, newsize);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6a1b      	ldr	r3, [r3, #32]
 80013a0:	687a      	ldr	r2, [r7, #4]
 80013a2:	6812      	ldr	r2, [r2, #0]
 80013a4:	68b9      	ldr	r1, [r7, #8]
 80013a6:	4610      	mov	r0, r2
 80013a8:	4798      	blx	r3
 80013aa:	60f8      	str	r0, [r7, #12]
        if (newbuffer == NULL)
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d132      	bne.n	8001418 <ensure+0x118>
        {
            p->hooks.deallocate(p->buffer);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	69db      	ldr	r3, [r3, #28]
 80013b6:	687a      	ldr	r2, [r7, #4]
 80013b8:	6812      	ldr	r2, [r2, #0]
 80013ba:	4610      	mov	r0, r2
 80013bc:	4798      	blx	r3
            p->length = 0;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	2200      	movs	r2, #0
 80013c2:	605a      	str	r2, [r3, #4]
            p->buffer = NULL;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2200      	movs	r2, #0
 80013c8:	601a      	str	r2, [r3, #0]

            return NULL;
 80013ca:	2300      	movs	r3, #0
 80013cc:	e02e      	b.n	800142c <ensure+0x12c>
        }
    }
    else
    {
        /* otherwise reallocate manually */
        newbuffer = (unsigned char*)p->hooks.allocate(newsize);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	699b      	ldr	r3, [r3, #24]
 80013d2:	68b8      	ldr	r0, [r7, #8]
 80013d4:	4798      	blx	r3
 80013d6:	60f8      	str	r0, [r7, #12]
        if (!newbuffer)
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d10d      	bne.n	80013fa <ensure+0xfa>
        {
            p->hooks.deallocate(p->buffer);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	69db      	ldr	r3, [r3, #28]
 80013e2:	687a      	ldr	r2, [r7, #4]
 80013e4:	6812      	ldr	r2, [r2, #0]
 80013e6:	4610      	mov	r0, r2
 80013e8:	4798      	blx	r3
            p->length = 0;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2200      	movs	r2, #0
 80013ee:	605a      	str	r2, [r3, #4]
            p->buffer = NULL;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	2200      	movs	r2, #0
 80013f4:	601a      	str	r2, [r3, #0]

            return NULL;
 80013f6:	2300      	movs	r3, #0
 80013f8:	e018      	b.n	800142c <ensure+0x12c>
        }

        memcpy(newbuffer, p->buffer, p->offset + 1);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6819      	ldr	r1, [r3, #0]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	689b      	ldr	r3, [r3, #8]
 8001402:	3301      	adds	r3, #1
 8001404:	461a      	mov	r2, r3
 8001406:	68f8      	ldr	r0, [r7, #12]
 8001408:	f004 f925 	bl	8005656 <memcpy>
        p->hooks.deallocate(p->buffer);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	69db      	ldr	r3, [r3, #28]
 8001410:	687a      	ldr	r2, [r7, #4]
 8001412:	6812      	ldr	r2, [r2, #0]
 8001414:	4610      	mov	r0, r2
 8001416:	4798      	blx	r3
    }
    p->length = newsize;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	68ba      	ldr	r2, [r7, #8]
 800141c:	605a      	str	r2, [r3, #4]
    p->buffer = newbuffer;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	68fa      	ldr	r2, [r7, #12]
 8001422:	601a      	str	r2, [r3, #0]

    return newbuffer + p->offset;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	689b      	ldr	r3, [r3, #8]
 8001428:	68fa      	ldr	r2, [r7, #12]
 800142a:	4413      	add	r3, r2
}
 800142c:	4618      	mov	r0, r3
 800142e:	3710      	adds	r7, #16
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}

08001434 <update_offset>:

/* calculate the new length of the string in a printbuffer and update the offset */
static void update_offset(printbuffer * const buffer)
{
 8001434:	b590      	push	{r4, r7, lr}
 8001436:	b085      	sub	sp, #20
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
    const unsigned char *buffer_pointer = NULL;
 800143c:	2300      	movs	r3, #0
 800143e:	60fb      	str	r3, [r7, #12]
    if ((buffer == NULL) || (buffer->buffer == NULL))
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d013      	beq.n	800146e <update_offset+0x3a>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d00f      	beq.n	800146e <update_offset+0x3a>
    {
        return;
    }
    buffer_pointer = buffer->buffer + buffer->offset;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	689b      	ldr	r3, [r3, #8]
 8001456:	4413      	add	r3, r2
 8001458:	60fb      	str	r3, [r7, #12]

    buffer->offset += strlen((const char*)buffer_pointer);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	689c      	ldr	r4, [r3, #8]
 800145e:	68f8      	ldr	r0, [r7, #12]
 8001460:	f7fe fe90 	bl	8000184 <strlen>
 8001464:	4603      	mov	r3, r0
 8001466:	18e2      	adds	r2, r4, r3
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	609a      	str	r2, [r3, #8]
 800146c:	e000      	b.n	8001470 <update_offset+0x3c>
        return;
 800146e:	bf00      	nop
}
 8001470:	3714      	adds	r7, #20
 8001472:	46bd      	mov	sp, r7
 8001474:	bd90      	pop	{r4, r7, pc}
	...

08001478 <compare_double>:

/* securely comparison of floating-point variables */
static cJSON_bool compare_double(double a, double b)
{
 8001478:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800147c:	b08a      	sub	sp, #40	@ 0x28
 800147e:	af00      	add	r7, sp, #0
 8001480:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8001484:	e9c7 2304 	strd	r2, r3, [r7, #16]
    double maxVal = fabs(a) > fabs(b) ? fabs(a) : fabs(b);
 8001488:	69bb      	ldr	r3, [r7, #24]
 800148a:	60bb      	str	r3, [r7, #8]
 800148c:	69fb      	ldr	r3, [r7, #28]
 800148e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001492:	60fb      	str	r3, [r7, #12]
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	603b      	str	r3, [r7, #0]
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800149e:	607b      	str	r3, [r7, #4]
 80014a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80014a4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80014a8:	f7ff fac0 	bl	8000a2c <__aeabi_dcmpgt>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d004      	beq.n	80014bc <compare_double+0x44>
 80014b2:	69bc      	ldr	r4, [r7, #24]
 80014b4:	69fb      	ldr	r3, [r7, #28]
 80014b6:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 80014ba:	e003      	b.n	80014c4 <compare_double+0x4c>
 80014bc:	693c      	ldr	r4, [r7, #16]
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 80014c4:	e9c7 4508 	strd	r4, r5, [r7, #32]
    return (fabs(a - b) <= maxVal * DBL_EPSILON);
 80014c8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80014cc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80014d0:	f7fe fe64 	bl	800019c <__aeabi_dsub>
 80014d4:	4602      	mov	r2, r0
 80014d6:	460b      	mov	r3, r1
 80014d8:	4690      	mov	r8, r2
 80014da:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 80014de:	f04f 0200 	mov.w	r2, #0
 80014e2:	4b0c      	ldr	r3, [pc, #48]	@ (8001514 <compare_double+0x9c>)
 80014e4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80014e8:	f7ff f810 	bl	800050c <__aeabi_dmul>
 80014ec:	4602      	mov	r2, r0
 80014ee:	460b      	mov	r3, r1
 80014f0:	2101      	movs	r1, #1
 80014f2:	460c      	mov	r4, r1
 80014f4:	4640      	mov	r0, r8
 80014f6:	4649      	mov	r1, r9
 80014f8:	f7ff fa84 	bl	8000a04 <__aeabi_dcmple>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d101      	bne.n	8001506 <compare_double+0x8e>
 8001502:	2300      	movs	r3, #0
 8001504:	461c      	mov	r4, r3
 8001506:	b2e3      	uxtb	r3, r4
}
 8001508:	4618      	mov	r0, r3
 800150a:	3728      	adds	r7, #40	@ 0x28
 800150c:	46bd      	mov	sp, r7
 800150e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001512:	bf00      	nop
 8001514:	3cb00000 	.word	0x3cb00000

08001518 <print_number>:

/* Render the number nicely from the given item into a string. */
static cJSON_bool print_number(const cJSON * const item, printbuffer * const output_buffer)
{
 8001518:	b5f0      	push	{r4, r5, r6, r7, lr}
 800151a:	b093      	sub	sp, #76	@ 0x4c
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
 8001520:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 8001522:	2300      	movs	r3, #0
 8001524:	63fb      	str	r3, [r7, #60]	@ 0x3c
    double d = item->valuedouble;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800152c:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    int length = 0;
 8001530:	2300      	movs	r3, #0
 8001532:	647b      	str	r3, [r7, #68]	@ 0x44
    size_t i = 0;
 8001534:	2300      	movs	r3, #0
 8001536:	643b      	str	r3, [r7, #64]	@ 0x40
    unsigned char number_buffer[26] = {0}; /* temporary buffer to print the number into */
 8001538:	2300      	movs	r3, #0
 800153a:	617b      	str	r3, [r7, #20]
 800153c:	f107 0318 	add.w	r3, r7, #24
 8001540:	2200      	movs	r2, #0
 8001542:	601a      	str	r2, [r3, #0]
 8001544:	605a      	str	r2, [r3, #4]
 8001546:	609a      	str	r2, [r3, #8]
 8001548:	60da      	str	r2, [r3, #12]
 800154a:	611a      	str	r2, [r3, #16]
 800154c:	829a      	strh	r2, [r3, #20]
    unsigned char decimal_point = get_decimal_point();
 800154e:	f7ff fe03 	bl	8001158 <get_decimal_point>
 8001552:	4603      	mov	r3, r0
 8001554:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    double test = 0.0;
 8001558:	f04f 0200 	mov.w	r2, #0
 800155c:	f04f 0300 	mov.w	r3, #0
 8001560:	e9c7 2302 	strd	r2, r3, [r7, #8]

    if (output_buffer == NULL)
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d101      	bne.n	800156e <print_number+0x56>
    {
        return false;
 800156a:	2300      	movs	r3, #0
 800156c:	e0b0      	b.n	80016d0 <print_number+0x1b8>
    }

    /* This checks for NaN and Infinity */
    if (isnan(d) || isinf(d))
 800156e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001572:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8001576:	f7ff fa63 	bl	8000a40 <__aeabi_dcmpun>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d121      	bne.n	80015c4 <print_number+0xac>
 8001580:	6b3c      	ldr	r4, [r7, #48]	@ 0x30
 8001582:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001584:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 8001588:	2301      	movs	r3, #1
 800158a:	461e      	mov	r6, r3
 800158c:	f04f 32ff 	mov.w	r2, #4294967295
 8001590:	4b51      	ldr	r3, [pc, #324]	@ (80016d8 <print_number+0x1c0>)
 8001592:	4620      	mov	r0, r4
 8001594:	4629      	mov	r1, r5
 8001596:	f7ff fa53 	bl	8000a40 <__aeabi_dcmpun>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d10b      	bne.n	80015b8 <print_number+0xa0>
 80015a0:	f04f 32ff 	mov.w	r2, #4294967295
 80015a4:	4b4c      	ldr	r3, [pc, #304]	@ (80016d8 <print_number+0x1c0>)
 80015a6:	4620      	mov	r0, r4
 80015a8:	4629      	mov	r1, r5
 80015aa:	f7ff fa2b 	bl	8000a04 <__aeabi_dcmple>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d101      	bne.n	80015b8 <print_number+0xa0>
 80015b4:	2300      	movs	r3, #0
 80015b6:	461e      	mov	r6, r3
 80015b8:	b2f3      	uxtb	r3, r6
 80015ba:	f083 0301 	eor.w	r3, r3, #1
 80015be:	b2db      	uxtb	r3, r3
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d007      	beq.n	80015d4 <print_number+0xbc>
    {
        length = sprintf((char*)number_buffer, "null");
 80015c4:	f107 0314 	add.w	r3, r7, #20
 80015c8:	4944      	ldr	r1, [pc, #272]	@ (80016dc <print_number+0x1c4>)
 80015ca:	4618      	mov	r0, r3
 80015cc:	f003 ff04 	bl	80053d8 <siprintf>
 80015d0:	6478      	str	r0, [r7, #68]	@ 0x44
 80015d2:	e03b      	b.n	800164c <print_number+0x134>
    }
    else if(d == (double)item->valueint)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	695b      	ldr	r3, [r3, #20]
 80015d8:	4618      	mov	r0, r3
 80015da:	f7fe ff2d 	bl	8000438 <__aeabi_i2d>
 80015de:	4602      	mov	r2, r0
 80015e0:	460b      	mov	r3, r1
 80015e2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80015e6:	f7ff f9f9 	bl	80009dc <__aeabi_dcmpeq>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d009      	beq.n	8001604 <print_number+0xec>
    {
        length = sprintf((char*)number_buffer, "%d", item->valueint);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	695a      	ldr	r2, [r3, #20]
 80015f4:	f107 0314 	add.w	r3, r7, #20
 80015f8:	4939      	ldr	r1, [pc, #228]	@ (80016e0 <print_number+0x1c8>)
 80015fa:	4618      	mov	r0, r3
 80015fc:	f003 feec 	bl	80053d8 <siprintf>
 8001600:	6478      	str	r0, [r7, #68]	@ 0x44
 8001602:	e023      	b.n	800164c <print_number+0x134>
    }
    else
    {
        /* Try 15 decimal places of precision to avoid nonsignificant nonzero digits */
        length = sprintf((char*)number_buffer, "%1.15g", d);
 8001604:	f107 0014 	add.w	r0, r7, #20
 8001608:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800160c:	4935      	ldr	r1, [pc, #212]	@ (80016e4 <print_number+0x1cc>)
 800160e:	f003 fee3 	bl	80053d8 <siprintf>
 8001612:	6478      	str	r0, [r7, #68]	@ 0x44

        /* Check whether the original double can be recovered */
        if ((sscanf((char*)number_buffer, "%lg", &test) != 1) || !compare_double((double)test, d))
 8001614:	f107 0208 	add.w	r2, r7, #8
 8001618:	f107 0314 	add.w	r3, r7, #20
 800161c:	4932      	ldr	r1, [pc, #200]	@ (80016e8 <print_number+0x1d0>)
 800161e:	4618      	mov	r0, r3
 8001620:	f003 fefa 	bl	8005418 <siscanf>
 8001624:	4603      	mov	r3, r0
 8001626:	2b01      	cmp	r3, #1
 8001628:	d108      	bne.n	800163c <print_number+0x124>
 800162a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800162e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001632:	f7ff ff21 	bl	8001478 <compare_double>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d107      	bne.n	800164c <print_number+0x134>
        {
            /* If not, print with 17 decimal places of precision */
            length = sprintf((char*)number_buffer, "%1.17g", d);
 800163c:	f107 0014 	add.w	r0, r7, #20
 8001640:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001644:	4929      	ldr	r1, [pc, #164]	@ (80016ec <print_number+0x1d4>)
 8001646:	f003 fec7 	bl	80053d8 <siprintf>
 800164a:	6478      	str	r0, [r7, #68]	@ 0x44
        }
    }

    /* sprintf failed or buffer overrun occurred */
    if ((length < 0) || (length > (int)(sizeof(number_buffer) - 1)))
 800164c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800164e:	2b00      	cmp	r3, #0
 8001650:	db02      	blt.n	8001658 <print_number+0x140>
 8001652:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001654:	2b19      	cmp	r3, #25
 8001656:	dd01      	ble.n	800165c <print_number+0x144>
    {
        return false;
 8001658:	2300      	movs	r3, #0
 800165a:	e039      	b.n	80016d0 <print_number+0x1b8>
    }

    /* reserve appropriate space in the output */
    output_pointer = ensure(output_buffer, (size_t)length + sizeof(""));
 800165c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800165e:	3301      	adds	r3, #1
 8001660:	4619      	mov	r1, r3
 8001662:	6838      	ldr	r0, [r7, #0]
 8001664:	f7ff fe4c 	bl	8001300 <ensure>
 8001668:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if (output_pointer == NULL)
 800166a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800166c:	2b00      	cmp	r3, #0
 800166e:	d101      	bne.n	8001674 <print_number+0x15c>
    {
        return false;
 8001670:	2300      	movs	r3, #0
 8001672:	e02d      	b.n	80016d0 <print_number+0x1b8>
    }

    /* copy the printed number to the output and replace locale
     * dependent decimal point with '.' */
    for (i = 0; i < ((size_t)length); i++)
 8001674:	2300      	movs	r3, #0
 8001676:	643b      	str	r3, [r7, #64]	@ 0x40
 8001678:	e01a      	b.n	80016b0 <print_number+0x198>
    {
        if (number_buffer[i] == decimal_point)
 800167a:	f107 0214 	add.w	r2, r7, #20
 800167e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001680:	4413      	add	r3, r2
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8001688:	429a      	cmp	r2, r3
 800168a:	d105      	bne.n	8001698 <print_number+0x180>
        {
            output_pointer[i] = '.';
 800168c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800168e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001690:	4413      	add	r3, r2
 8001692:	222e      	movs	r2, #46	@ 0x2e
 8001694:	701a      	strb	r2, [r3, #0]
            continue;
 8001696:	e008      	b.n	80016aa <print_number+0x192>
        }

        output_pointer[i] = number_buffer[i];
 8001698:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800169a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800169c:	4413      	add	r3, r2
 800169e:	f107 0114 	add.w	r1, r7, #20
 80016a2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80016a4:	440a      	add	r2, r1
 80016a6:	7812      	ldrb	r2, [r2, #0]
 80016a8:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < ((size_t)length); i++)
 80016aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80016ac:	3301      	adds	r3, #1
 80016ae:	643b      	str	r3, [r7, #64]	@ 0x40
 80016b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80016b2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d3e0      	bcc.n	800167a <print_number+0x162>
    }
    output_pointer[i] = '\0';
 80016b8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80016ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80016bc:	4413      	add	r3, r2
 80016be:	2200      	movs	r2, #0
 80016c0:	701a      	strb	r2, [r3, #0]

    output_buffer->offset += (size_t)length;
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	689a      	ldr	r2, [r3, #8]
 80016c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80016c8:	441a      	add	r2, r3
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	609a      	str	r2, [r3, #8]

    return true;
 80016ce:	2301      	movs	r3, #1
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	374c      	adds	r7, #76	@ 0x4c
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016d8:	7fefffff 	.word	0x7fefffff
 80016dc:	08007ca4 	.word	0x08007ca4
 80016e0:	08007cac 	.word	0x08007cac
 80016e4:	08007cb0 	.word	0x08007cb0
 80016e8:	08007cb8 	.word	0x08007cb8
 80016ec:	08007cbc 	.word	0x08007cbc

080016f0 <parse_hex4>:

/* parse 4 digit hexadecimal number */
static unsigned parse_hex4(const unsigned char * const input)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b085      	sub	sp, #20
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
    unsigned int h = 0;
 80016f8:	2300      	movs	r3, #0
 80016fa:	60fb      	str	r3, [r7, #12]
    size_t i = 0;
 80016fc:	2300      	movs	r3, #0
 80016fe:	60bb      	str	r3, [r7, #8]

    for (i = 0; i < 4; i++)
 8001700:	2300      	movs	r3, #0
 8001702:	60bb      	str	r3, [r7, #8]
 8001704:	e04c      	b.n	80017a0 <parse_hex4+0xb0>
    {
        /* parse digit */
        if ((input[i] >= '0') && (input[i] <= '9'))
 8001706:	687a      	ldr	r2, [r7, #4]
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	4413      	add	r3, r2
 800170c:	781b      	ldrb	r3, [r3, #0]
 800170e:	2b2f      	cmp	r3, #47	@ 0x2f
 8001710:	d90f      	bls.n	8001732 <parse_hex4+0x42>
 8001712:	687a      	ldr	r2, [r7, #4]
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	4413      	add	r3, r2
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	2b39      	cmp	r3, #57	@ 0x39
 800171c:	d809      	bhi.n	8001732 <parse_hex4+0x42>
        {
            h += (unsigned int) input[i] - '0';
 800171e:	687a      	ldr	r2, [r7, #4]
 8001720:	68bb      	ldr	r3, [r7, #8]
 8001722:	4413      	add	r3, r2
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	461a      	mov	r2, r3
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	4413      	add	r3, r2
 800172c:	3b30      	subs	r3, #48	@ 0x30
 800172e:	60fb      	str	r3, [r7, #12]
 8001730:	e02d      	b.n	800178e <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'A') && (input[i] <= 'F'))
 8001732:	687a      	ldr	r2, [r7, #4]
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	4413      	add	r3, r2
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	2b40      	cmp	r3, #64	@ 0x40
 800173c:	d90f      	bls.n	800175e <parse_hex4+0x6e>
 800173e:	687a      	ldr	r2, [r7, #4]
 8001740:	68bb      	ldr	r3, [r7, #8]
 8001742:	4413      	add	r3, r2
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	2b46      	cmp	r3, #70	@ 0x46
 8001748:	d809      	bhi.n	800175e <parse_hex4+0x6e>
        {
            h += (unsigned int) 10 + input[i] - 'A';
 800174a:	687a      	ldr	r2, [r7, #4]
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	4413      	add	r3, r2
 8001750:	781b      	ldrb	r3, [r3, #0]
 8001752:	461a      	mov	r2, r3
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	4413      	add	r3, r2
 8001758:	3b37      	subs	r3, #55	@ 0x37
 800175a:	60fb      	str	r3, [r7, #12]
 800175c:	e017      	b.n	800178e <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'a') && (input[i] <= 'f'))
 800175e:	687a      	ldr	r2, [r7, #4]
 8001760:	68bb      	ldr	r3, [r7, #8]
 8001762:	4413      	add	r3, r2
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	2b60      	cmp	r3, #96	@ 0x60
 8001768:	d90f      	bls.n	800178a <parse_hex4+0x9a>
 800176a:	687a      	ldr	r2, [r7, #4]
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	4413      	add	r3, r2
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	2b66      	cmp	r3, #102	@ 0x66
 8001774:	d809      	bhi.n	800178a <parse_hex4+0x9a>
        {
            h += (unsigned int) 10 + input[i] - 'a';
 8001776:	687a      	ldr	r2, [r7, #4]
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	4413      	add	r3, r2
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	461a      	mov	r2, r3
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	4413      	add	r3, r2
 8001784:	3b57      	subs	r3, #87	@ 0x57
 8001786:	60fb      	str	r3, [r7, #12]
 8001788:	e001      	b.n	800178e <parse_hex4+0x9e>
        }
        else /* invalid */
        {
            return 0;
 800178a:	2300      	movs	r3, #0
 800178c:	e00c      	b.n	80017a8 <parse_hex4+0xb8>
        }

        if (i < 3)
 800178e:	68bb      	ldr	r3, [r7, #8]
 8001790:	2b02      	cmp	r3, #2
 8001792:	d802      	bhi.n	800179a <parse_hex4+0xaa>
        {
            /* shift left to make place for the next nibble */
            h = h << 4;
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	011b      	lsls	r3, r3, #4
 8001798:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < 4; i++)
 800179a:	68bb      	ldr	r3, [r7, #8]
 800179c:	3301      	adds	r3, #1
 800179e:	60bb      	str	r3, [r7, #8]
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	2b03      	cmp	r3, #3
 80017a4:	d9af      	bls.n	8001706 <parse_hex4+0x16>
        }
    }

    return h;
 80017a6:	68fb      	ldr	r3, [r7, #12]
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	3714      	adds	r7, #20
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bc80      	pop	{r7}
 80017b0:	4770      	bx	lr
	...

080017b4 <utf16_literal_to_utf8>:

/* converts a UTF-16 literal to UTF-8
 * A literal can be one or two sequences of the form \uXXXX */
static unsigned char utf16_literal_to_utf8(const unsigned char * const input_pointer, const unsigned char * const input_end, unsigned char **output_pointer)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b08a      	sub	sp, #40	@ 0x28
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	60f8      	str	r0, [r7, #12]
 80017bc:	60b9      	str	r1, [r7, #8]
 80017be:	607a      	str	r2, [r7, #4]
    long unsigned int codepoint = 0;
 80017c0:	2300      	movs	r3, #0
 80017c2:	627b      	str	r3, [r7, #36]	@ 0x24
    unsigned int first_code = 0;
 80017c4:	2300      	movs	r3, #0
 80017c6:	61fb      	str	r3, [r7, #28]
    const unsigned char *first_sequence = input_pointer;
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	61bb      	str	r3, [r7, #24]
    unsigned char utf8_length = 0;
 80017cc:	2300      	movs	r3, #0
 80017ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    unsigned char utf8_position = 0;
 80017d2:	2300      	movs	r3, #0
 80017d4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    unsigned char sequence_length = 0;
 80017d8:	2300      	movs	r3, #0
 80017da:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    unsigned char first_byte_mark = 0;
 80017de:	2300      	movs	r3, #0
 80017e0:	f887 3020 	strb.w	r3, [r7, #32]

    if ((input_end - first_sequence) < 6)
 80017e4:	68ba      	ldr	r2, [r7, #8]
 80017e6:	69bb      	ldr	r3, [r7, #24]
 80017e8:	1ad3      	subs	r3, r2, r3
 80017ea:	2b05      	cmp	r3, #5
 80017ec:	f340 80b7 	ble.w	800195e <utf16_literal_to_utf8+0x1aa>
        /* input ends unexpectedly */
        goto fail;
    }

    /* get the first utf16 sequence */
    first_code = parse_hex4(first_sequence + 2);
 80017f0:	69bb      	ldr	r3, [r7, #24]
 80017f2:	3302      	adds	r3, #2
 80017f4:	4618      	mov	r0, r3
 80017f6:	f7ff ff7b 	bl	80016f0 <parse_hex4>
 80017fa:	61f8      	str	r0, [r7, #28]

    /* check that the code is valid */
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
 80017fc:	69fb      	ldr	r3, [r7, #28]
 80017fe:	f5b3 4f5c 	cmp.w	r3, #56320	@ 0xdc00
 8001802:	d304      	bcc.n	800180e <utf16_literal_to_utf8+0x5a>
 8001804:	69fb      	ldr	r3, [r7, #28]
 8001806:	f5b3 4f60 	cmp.w	r3, #57344	@ 0xe000
 800180a:	f0c0 80aa 	bcc.w	8001962 <utf16_literal_to_utf8+0x1ae>
    {
        goto fail;
    }

    /* UTF16 surrogate pair */
    if ((first_code >= 0xD800) && (first_code <= 0xDBFF))
 800180e:	69fb      	ldr	r3, [r7, #28]
 8001810:	f5b3 4f58 	cmp.w	r3, #55296	@ 0xd800
 8001814:	d337      	bcc.n	8001886 <utf16_literal_to_utf8+0xd2>
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	f5b3 4f5c 	cmp.w	r3, #56320	@ 0xdc00
 800181c:	d233      	bcs.n	8001886 <utf16_literal_to_utf8+0xd2>
    {
        const unsigned char *second_sequence = first_sequence + 6;
 800181e:	69bb      	ldr	r3, [r7, #24]
 8001820:	3306      	adds	r3, #6
 8001822:	617b      	str	r3, [r7, #20]
        unsigned int second_code = 0;
 8001824:	2300      	movs	r3, #0
 8001826:	613b      	str	r3, [r7, #16]
        sequence_length = 12; /* \uXXXX\uXXXX */
 8001828:	230c      	movs	r3, #12
 800182a:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

        if ((input_end - second_sequence) < 6)
 800182e:	68ba      	ldr	r2, [r7, #8]
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	1ad3      	subs	r3, r2, r3
 8001834:	2b05      	cmp	r3, #5
 8001836:	f340 8096 	ble.w	8001966 <utf16_literal_to_utf8+0x1b2>
        {
            /* input ends unexpectedly */
            goto fail;
        }

        if ((second_sequence[0] != '\\') || (second_sequence[1] != 'u'))
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	781b      	ldrb	r3, [r3, #0]
 800183e:	2b5c      	cmp	r3, #92	@ 0x5c
 8001840:	f040 8093 	bne.w	800196a <utf16_literal_to_utf8+0x1b6>
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	3301      	adds	r3, #1
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	2b75      	cmp	r3, #117	@ 0x75
 800184c:	f040 808d 	bne.w	800196a <utf16_literal_to_utf8+0x1b6>
            /* missing second half of the surrogate pair */
            goto fail;
        }

        /* get the second utf16 sequence */
        second_code = parse_hex4(second_sequence + 2);
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	3302      	adds	r3, #2
 8001854:	4618      	mov	r0, r3
 8001856:	f7ff ff4b 	bl	80016f0 <parse_hex4>
 800185a:	6138      	str	r0, [r7, #16]
        /* check that the code is valid */
        if ((second_code < 0xDC00) || (second_code > 0xDFFF))
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	f5b3 4f5c 	cmp.w	r3, #56320	@ 0xdc00
 8001862:	f0c0 8084 	bcc.w	800196e <utf16_literal_to_utf8+0x1ba>
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	f5b3 4f60 	cmp.w	r3, #57344	@ 0xe000
 800186c:	d27f      	bcs.n	800196e <utf16_literal_to_utf8+0x1ba>
            goto fail;
        }


        /* calculate the unicode codepoint from the surrogate pair */
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
 800186e:	69fb      	ldr	r3, [r7, #28]
 8001870:	029a      	lsls	r2, r3, #10
 8001872:	4b43      	ldr	r3, [pc, #268]	@ (8001980 <utf16_literal_to_utf8+0x1cc>)
 8001874:	4013      	ands	r3, r2
 8001876:	693a      	ldr	r2, [r7, #16]
 8001878:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800187c:	4313      	orrs	r3, r2
 800187e:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8001882:	627b      	str	r3, [r7, #36]	@ 0x24
    {
 8001884:	e004      	b.n	8001890 <utf16_literal_to_utf8+0xdc>
    }
    else
    {
        sequence_length = 6; /* \uXXXX */
 8001886:	2306      	movs	r3, #6
 8001888:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
        codepoint = first_code;
 800188c:	69fb      	ldr	r3, [r7, #28]
 800188e:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    /* encode as UTF-8
     * takes at maximum 4 bytes to encode:
     * 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx */
    if (codepoint < 0x80)
 8001890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001892:	2b7f      	cmp	r3, #127	@ 0x7f
 8001894:	d803      	bhi.n	800189e <utf16_literal_to_utf8+0xea>
    {
        /* normal ascii, encoding 0xxxxxxx */
        utf8_length = 1;
 8001896:	2301      	movs	r3, #1
 8001898:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800189c:	e01f      	b.n	80018de <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x800)
 800189e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018a0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80018a4:	d206      	bcs.n	80018b4 <utf16_literal_to_utf8+0x100>
    {
        /* two bytes, encoding 110xxxxx 10xxxxxx */
        utf8_length = 2;
 80018a6:	2302      	movs	r3, #2
 80018a8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        first_byte_mark = 0xC0; /* 11000000 */
 80018ac:	23c0      	movs	r3, #192	@ 0xc0
 80018ae:	f887 3020 	strb.w	r3, [r7, #32]
 80018b2:	e014      	b.n	80018de <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x10000)
 80018b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80018ba:	d206      	bcs.n	80018ca <utf16_literal_to_utf8+0x116>
    {
        /* three bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx */
        utf8_length = 3;
 80018bc:	2303      	movs	r3, #3
 80018be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        first_byte_mark = 0xE0; /* 11100000 */
 80018c2:	23e0      	movs	r3, #224	@ 0xe0
 80018c4:	f887 3020 	strb.w	r3, [r7, #32]
 80018c8:	e009      	b.n	80018de <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint <= 0x10FFFF)
 80018ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018cc:	f5b3 1f88 	cmp.w	r3, #1114112	@ 0x110000
 80018d0:	d24f      	bcs.n	8001972 <utf16_literal_to_utf8+0x1be>
    {
        /* four bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx 10xxxxxx */
        utf8_length = 4;
 80018d2:	2304      	movs	r3, #4
 80018d4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        first_byte_mark = 0xF0; /* 11110000 */
 80018d8:	23f0      	movs	r3, #240	@ 0xf0
 80018da:	f887 3020 	strb.w	r3, [r7, #32]
        /* invalid unicode codepoint */
        goto fail;
    }

    /* encode as utf8 */
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 80018de:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80018e2:	3b01      	subs	r3, #1
 80018e4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80018e8:	e015      	b.n	8001916 <utf16_literal_to_utf8+0x162>
    {
        /* 10xxxxxx */
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
 80018ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018ec:	b2db      	uxtb	r3, r3
 80018ee:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80018f2:	b2da      	uxtb	r2, r3
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6819      	ldr	r1, [r3, #0]
 80018f8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80018fc:	440b      	add	r3, r1
 80018fe:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8001902:	b2d2      	uxtb	r2, r2
 8001904:	701a      	strb	r2, [r3, #0]
        codepoint >>= 6;
 8001906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001908:	099b      	lsrs	r3, r3, #6
 800190a:	627b      	str	r3, [r7, #36]	@ 0x24
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 800190c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001910:	3b01      	subs	r3, #1
 8001912:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8001916:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800191a:	2b00      	cmp	r3, #0
 800191c:	d1e5      	bne.n	80018ea <utf16_literal_to_utf8+0x136>
    }
    /* encode first byte */
    if (utf8_length > 1)
 800191e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001922:	2b01      	cmp	r3, #1
 8001924:	d909      	bls.n	800193a <utf16_literal_to_utf8+0x186>
    {
        (*output_pointer)[0] = (unsigned char)((codepoint | first_byte_mark) & 0xFF);
 8001926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001928:	b2d9      	uxtb	r1, r3
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001932:	430a      	orrs	r2, r1
 8001934:	b2d2      	uxtb	r2, r2
 8001936:	701a      	strb	r2, [r3, #0]
 8001938:	e007      	b.n	800194a <utf16_literal_to_utf8+0x196>
    }
    else
    {
        (*output_pointer)[0] = (unsigned char)(codepoint & 0x7F);
 800193a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800193c:	b2da      	uxtb	r2, r3
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001946:	b2d2      	uxtb	r2, r2
 8001948:	701a      	strb	r2, [r3, #0]
    }

    *output_pointer += utf8_length;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681a      	ldr	r2, [r3, #0]
 800194e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001952:	441a      	add	r2, r3
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	601a      	str	r2, [r3, #0]

    return sequence_length;
 8001958:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800195c:	e00b      	b.n	8001976 <utf16_literal_to_utf8+0x1c2>
        goto fail;
 800195e:	bf00      	nop
 8001960:	e008      	b.n	8001974 <utf16_literal_to_utf8+0x1c0>
        goto fail;
 8001962:	bf00      	nop
 8001964:	e006      	b.n	8001974 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 8001966:	bf00      	nop
 8001968:	e004      	b.n	8001974 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 800196a:	bf00      	nop
 800196c:	e002      	b.n	8001974 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 800196e:	bf00      	nop
 8001970:	e000      	b.n	8001974 <utf16_literal_to_utf8+0x1c0>
        goto fail;
 8001972:	bf00      	nop

fail:
    return 0;
 8001974:	2300      	movs	r3, #0
}
 8001976:	4618      	mov	r0, r3
 8001978:	3728      	adds	r7, #40	@ 0x28
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	000ffc00 	.word	0x000ffc00

08001984 <parse_string>:

/* Parse the input text into an unescaped cinput, and populate item. */
static cJSON_bool parse_string(cJSON * const item, parse_buffer * const input_buffer)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b08a      	sub	sp, #40	@ 0x28
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
 800198c:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	689b      	ldr	r3, [r3, #8]
 8001996:	3301      	adds	r3, #1
 8001998:	4413      	add	r3, r2
 800199a:	627b      	str	r3, [r7, #36]	@ 0x24
    const unsigned char *input_end = buffer_at_offset(input_buffer) + 1;
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	681a      	ldr	r2, [r3, #0]
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	3301      	adds	r3, #1
 80019a6:	4413      	add	r3, r2
 80019a8:	623b      	str	r3, [r7, #32]
    unsigned char *output_pointer = NULL;
 80019aa:	2300      	movs	r3, #0
 80019ac:	60fb      	str	r3, [r7, #12]
    unsigned char *output = NULL;
 80019ae:	2300      	movs	r3, #0
 80019b0:	61fb      	str	r3, [r7, #28]

    /* not a string */
    if (buffer_at_offset(input_buffer)[0] != '\"')
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	4413      	add	r3, r2
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	2b22      	cmp	r3, #34	@ 0x22
 80019c0:	f040 8103 	bne.w	8001bca <parse_string+0x246>
        goto fail;
    }

    {
        /* calculate approximate size of the output (overestimate) */
        size_t allocation_length = 0;
 80019c4:	2300      	movs	r3, #0
 80019c6:	613b      	str	r3, [r7, #16]
        size_t skipped_bytes = 0;
 80019c8:	2300      	movs	r3, #0
 80019ca:	61bb      	str	r3, [r7, #24]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 80019cc:	e017      	b.n	80019fe <parse_string+0x7a>
        {
            /* is escape sequence */
            if (input_end[0] == '\\')
 80019ce:	6a3b      	ldr	r3, [r7, #32]
 80019d0:	781b      	ldrb	r3, [r3, #0]
 80019d2:	2b5c      	cmp	r3, #92	@ 0x5c
 80019d4:	d110      	bne.n	80019f8 <parse_string+0x74>
            {
                if ((size_t)(input_end + 1 - input_buffer->content) >= input_buffer->length)
 80019d6:	6a3b      	ldr	r3, [r7, #32]
 80019d8:	1c5a      	adds	r2, r3, #1
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	1ad3      	subs	r3, r2, r3
 80019e0:	461a      	mov	r2, r3
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	429a      	cmp	r2, r3
 80019e8:	f080 80f1 	bcs.w	8001bce <parse_string+0x24a>
                {
                    /* prevent buffer overflow when last input character is a backslash */
                    goto fail;
                }
                skipped_bytes++;
 80019ec:	69bb      	ldr	r3, [r7, #24]
 80019ee:	3301      	adds	r3, #1
 80019f0:	61bb      	str	r3, [r7, #24]
                input_end++;
 80019f2:	6a3b      	ldr	r3, [r7, #32]
 80019f4:	3301      	adds	r3, #1
 80019f6:	623b      	str	r3, [r7, #32]
            }
            input_end++;
 80019f8:	6a3b      	ldr	r3, [r7, #32]
 80019fa:	3301      	adds	r3, #1
 80019fc:	623b      	str	r3, [r7, #32]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	6a3a      	ldr	r2, [r7, #32]
 8001a04:	1ad3      	subs	r3, r2, r3
 8001a06:	461a      	mov	r2, r3
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	d203      	bcs.n	8001a18 <parse_string+0x94>
 8001a10:	6a3b      	ldr	r3, [r7, #32]
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	2b22      	cmp	r3, #34	@ 0x22
 8001a16:	d1da      	bne.n	80019ce <parse_string+0x4a>
        }
        if (((size_t)(input_end - input_buffer->content) >= input_buffer->length) || (*input_end != '\"'))
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	6a3a      	ldr	r2, [r7, #32]
 8001a1e:	1ad3      	subs	r3, r2, r3
 8001a20:	461a      	mov	r2, r3
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	429a      	cmp	r2, r3
 8001a28:	f080 80d3 	bcs.w	8001bd2 <parse_string+0x24e>
 8001a2c:	6a3b      	ldr	r3, [r7, #32]
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	2b22      	cmp	r3, #34	@ 0x22
 8001a32:	f040 80ce 	bne.w	8001bd2 <parse_string+0x24e>
        {
            goto fail; /* string ended unexpectedly */
        }

        /* This is at most how much we need for the output */
        allocation_length = (size_t) (input_end - buffer_at_offset(input_buffer)) - skipped_bytes;
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	689b      	ldr	r3, [r3, #8]
 8001a3e:	4413      	add	r3, r2
 8001a40:	6a3a      	ldr	r2, [r7, #32]
 8001a42:	1ad3      	subs	r3, r2, r3
 8001a44:	461a      	mov	r2, r3
 8001a46:	69bb      	ldr	r3, [r7, #24]
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	613b      	str	r3, [r7, #16]
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	691b      	ldr	r3, [r3, #16]
 8001a50:	693a      	ldr	r2, [r7, #16]
 8001a52:	3201      	adds	r2, #1
 8001a54:	4610      	mov	r0, r2
 8001a56:	4798      	blx	r3
 8001a58:	61f8      	str	r0, [r7, #28]
        if (output == NULL)
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	f000 80ba 	beq.w	8001bd6 <parse_string+0x252>
        {
            goto fail; /* allocation failure */
        }
    }

    output_pointer = output;
 8001a62:	69fb      	ldr	r3, [r7, #28]
 8001a64:	60fb      	str	r3, [r7, #12]
    /* loop through the string literal */
    while (input_pointer < input_end)
 8001a66:	e094      	b.n	8001b92 <parse_string+0x20e>
    {
        if (*input_pointer != '\\')
 8001a68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	2b5c      	cmp	r3, #92	@ 0x5c
 8001a6e:	d008      	beq.n	8001a82 <parse_string+0xfe>
        {
            *output_pointer++ = *input_pointer++;
 8001a70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a72:	1c53      	adds	r3, r2, #1
 8001a74:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	1c59      	adds	r1, r3, #1
 8001a7a:	60f9      	str	r1, [r7, #12]
 8001a7c:	7812      	ldrb	r2, [r2, #0]
 8001a7e:	701a      	strb	r2, [r3, #0]
 8001a80:	e087      	b.n	8001b92 <parse_string+0x20e>
        }
        /* escape sequence */
        else
        {
            unsigned char sequence_length = 2;
 8001a82:	2302      	movs	r3, #2
 8001a84:	75fb      	strb	r3, [r7, #23]
            if ((input_end - input_pointer) < 1)
 8001a86:	6a3a      	ldr	r2, [r7, #32]
 8001a88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a8a:	1ad3      	subs	r3, r2, r3
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	f340 80a4 	ble.w	8001bda <parse_string+0x256>
            {
                goto fail;
            }

            switch (input_pointer[1])
 8001a92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a94:	3301      	adds	r3, #1
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	2b75      	cmp	r3, #117	@ 0x75
 8001a9a:	f300 80a0 	bgt.w	8001bde <parse_string+0x25a>
 8001a9e:	2b5c      	cmp	r3, #92	@ 0x5c
 8001aa0:	da04      	bge.n	8001aac <parse_string+0x128>
 8001aa2:	2b22      	cmp	r3, #34	@ 0x22
 8001aa4:	d05c      	beq.n	8001b60 <parse_string+0x1dc>
 8001aa6:	2b2f      	cmp	r3, #47	@ 0x2f
 8001aa8:	d05a      	beq.n	8001b60 <parse_string+0x1dc>
                        goto fail;
                    }
                    break;

                default:
                    goto fail;
 8001aaa:	e098      	b.n	8001bde <parse_string+0x25a>
            switch (input_pointer[1])
 8001aac:	3b5c      	subs	r3, #92	@ 0x5c
 8001aae:	2b19      	cmp	r3, #25
 8001ab0:	f200 8095 	bhi.w	8001bde <parse_string+0x25a>
 8001ab4:	a201      	add	r2, pc, #4	@ (adr r2, 8001abc <parse_string+0x138>)
 8001ab6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001aba:	bf00      	nop
 8001abc:	08001b61 	.word	0x08001b61
 8001ac0:	08001bdf 	.word	0x08001bdf
 8001ac4:	08001bdf 	.word	0x08001bdf
 8001ac8:	08001bdf 	.word	0x08001bdf
 8001acc:	08001bdf 	.word	0x08001bdf
 8001ad0:	08001bdf 	.word	0x08001bdf
 8001ad4:	08001b25 	.word	0x08001b25
 8001ad8:	08001bdf 	.word	0x08001bdf
 8001adc:	08001bdf 	.word	0x08001bdf
 8001ae0:	08001bdf 	.word	0x08001bdf
 8001ae4:	08001b31 	.word	0x08001b31
 8001ae8:	08001bdf 	.word	0x08001bdf
 8001aec:	08001bdf 	.word	0x08001bdf
 8001af0:	08001bdf 	.word	0x08001bdf
 8001af4:	08001bdf 	.word	0x08001bdf
 8001af8:	08001bdf 	.word	0x08001bdf
 8001afc:	08001bdf 	.word	0x08001bdf
 8001b00:	08001bdf 	.word	0x08001bdf
 8001b04:	08001b3d 	.word	0x08001b3d
 8001b08:	08001bdf 	.word	0x08001bdf
 8001b0c:	08001bdf 	.word	0x08001bdf
 8001b10:	08001bdf 	.word	0x08001bdf
 8001b14:	08001b49 	.word	0x08001b49
 8001b18:	08001bdf 	.word	0x08001bdf
 8001b1c:	08001b55 	.word	0x08001b55
 8001b20:	08001b71 	.word	0x08001b71
                    *output_pointer++ = '\b';
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	1c5a      	adds	r2, r3, #1
 8001b28:	60fa      	str	r2, [r7, #12]
 8001b2a:	2208      	movs	r2, #8
 8001b2c:	701a      	strb	r2, [r3, #0]
                    break;
 8001b2e:	e02c      	b.n	8001b8a <parse_string+0x206>
                    *output_pointer++ = '\f';
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	1c5a      	adds	r2, r3, #1
 8001b34:	60fa      	str	r2, [r7, #12]
 8001b36:	220c      	movs	r2, #12
 8001b38:	701a      	strb	r2, [r3, #0]
                    break;
 8001b3a:	e026      	b.n	8001b8a <parse_string+0x206>
                    *output_pointer++ = '\n';
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	1c5a      	adds	r2, r3, #1
 8001b40:	60fa      	str	r2, [r7, #12]
 8001b42:	220a      	movs	r2, #10
 8001b44:	701a      	strb	r2, [r3, #0]
                    break;
 8001b46:	e020      	b.n	8001b8a <parse_string+0x206>
                    *output_pointer++ = '\r';
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	1c5a      	adds	r2, r3, #1
 8001b4c:	60fa      	str	r2, [r7, #12]
 8001b4e:	220d      	movs	r2, #13
 8001b50:	701a      	strb	r2, [r3, #0]
                    break;
 8001b52:	e01a      	b.n	8001b8a <parse_string+0x206>
                    *output_pointer++ = '\t';
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	1c5a      	adds	r2, r3, #1
 8001b58:	60fa      	str	r2, [r7, #12]
 8001b5a:	2209      	movs	r2, #9
 8001b5c:	701a      	strb	r2, [r3, #0]
                    break;
 8001b5e:	e014      	b.n	8001b8a <parse_string+0x206>
                    *output_pointer++ = input_pointer[1];
 8001b60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b62:	1c5a      	adds	r2, r3, #1
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	1c59      	adds	r1, r3, #1
 8001b68:	60f9      	str	r1, [r7, #12]
 8001b6a:	7812      	ldrb	r2, [r2, #0]
 8001b6c:	701a      	strb	r2, [r3, #0]
                    break;
 8001b6e:	e00c      	b.n	8001b8a <parse_string+0x206>
                    sequence_length = utf16_literal_to_utf8(input_pointer, input_end, &output_pointer);
 8001b70:	f107 030c 	add.w	r3, r7, #12
 8001b74:	461a      	mov	r2, r3
 8001b76:	6a39      	ldr	r1, [r7, #32]
 8001b78:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001b7a:	f7ff fe1b 	bl	80017b4 <utf16_literal_to_utf8>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	75fb      	strb	r3, [r7, #23]
                    if (sequence_length == 0)
 8001b82:	7dfb      	ldrb	r3, [r7, #23]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d02c      	beq.n	8001be2 <parse_string+0x25e>
                    break;
 8001b88:	bf00      	nop
            }
            input_pointer += sequence_length;
 8001b8a:	7dfb      	ldrb	r3, [r7, #23]
 8001b8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b8e:	4413      	add	r3, r2
 8001b90:	627b      	str	r3, [r7, #36]	@ 0x24
    while (input_pointer < input_end)
 8001b92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b94:	6a3b      	ldr	r3, [r7, #32]
 8001b96:	429a      	cmp	r2, r3
 8001b98:	f4ff af66 	bcc.w	8001a68 <parse_string+0xe4>
        }
    }

    /* zero terminate the output */
    *output_pointer = '\0';
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	701a      	strb	r2, [r3, #0]

    item->type = cJSON_String;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2210      	movs	r2, #16
 8001ba6:	60da      	str	r2, [r3, #12]
    item->valuestring = (char*)output;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	69fa      	ldr	r2, [r7, #28]
 8001bac:	611a      	str	r2, [r3, #16]

    input_buffer->offset = (size_t) (input_end - input_buffer->content);
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	6a3a      	ldr	r2, [r7, #32]
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	461a      	mov	r2, r3
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	609a      	str	r2, [r3, #8]
    input_buffer->offset++;
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	1c5a      	adds	r2, r3, #1
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	609a      	str	r2, [r3, #8]

    return true;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e020      	b.n	8001c0c <parse_string+0x288>
        goto fail;
 8001bca:	bf00      	nop
 8001bcc:	e00a      	b.n	8001be4 <parse_string+0x260>
                    goto fail;
 8001bce:	bf00      	nop
 8001bd0:	e008      	b.n	8001be4 <parse_string+0x260>
            goto fail; /* string ended unexpectedly */
 8001bd2:	bf00      	nop
 8001bd4:	e006      	b.n	8001be4 <parse_string+0x260>
            goto fail; /* allocation failure */
 8001bd6:	bf00      	nop
 8001bd8:	e004      	b.n	8001be4 <parse_string+0x260>
                goto fail;
 8001bda:	bf00      	nop
 8001bdc:	e002      	b.n	8001be4 <parse_string+0x260>
                    goto fail;
 8001bde:	bf00      	nop
 8001be0:	e000      	b.n	8001be4 <parse_string+0x260>
                        goto fail;
 8001be2:	bf00      	nop

fail:
    if (output != NULL)
 8001be4:	69fb      	ldr	r3, [r7, #28]
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d005      	beq.n	8001bf6 <parse_string+0x272>
    {
        input_buffer->hooks.deallocate(output);
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	695b      	ldr	r3, [r3, #20]
 8001bee:	69f8      	ldr	r0, [r7, #28]
 8001bf0:	4798      	blx	r3
        output = NULL;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	61fb      	str	r3, [r7, #28]
    }

    if (input_pointer != NULL)
 8001bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d006      	beq.n	8001c0a <parse_string+0x286>
    {
        input_buffer->offset = (size_t)(input_pointer - input_buffer->content);
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c02:	1ad3      	subs	r3, r2, r3
 8001c04:	461a      	mov	r2, r3
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	609a      	str	r2, [r3, #8]
    }

    return false;
 8001c0a:	2300      	movs	r3, #0
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3728      	adds	r7, #40	@ 0x28
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}

08001c14 <print_string_ptr>:

/* Render the cstring provided to an escaped version that can be printed. */
static cJSON_bool print_string_ptr(const unsigned char * const input, printbuffer * const output_buffer)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b088      	sub	sp, #32
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = NULL;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	61fb      	str	r3, [r7, #28]
    unsigned char *output = NULL;
 8001c22:	2300      	movs	r3, #0
 8001c24:	613b      	str	r3, [r7, #16]
    unsigned char *output_pointer = NULL;
 8001c26:	2300      	movs	r3, #0
 8001c28:	61bb      	str	r3, [r7, #24]
    size_t output_length = 0;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	60fb      	str	r3, [r7, #12]
    /* numbers of additional characters needed for escaping */
    size_t escape_characters = 0;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	617b      	str	r3, [r7, #20]

    if (output_buffer == NULL)
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d101      	bne.n	8001c3c <print_string_ptr+0x28>
    {
        return false;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	e110      	b.n	8001e5e <print_string_ptr+0x24a>
    }

    /* empty string */
    if (input == NULL)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d111      	bne.n	8001c66 <print_string_ptr+0x52>
    {
        output = ensure(output_buffer, sizeof("\"\""));
 8001c42:	2103      	movs	r1, #3
 8001c44:	6838      	ldr	r0, [r7, #0]
 8001c46:	f7ff fb5b 	bl	8001300 <ensure>
 8001c4a:	6138      	str	r0, [r7, #16]
        if (output == NULL)
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d101      	bne.n	8001c56 <print_string_ptr+0x42>
        {
            return false;
 8001c52:	2300      	movs	r3, #0
 8001c54:	e103      	b.n	8001e5e <print_string_ptr+0x24a>
        }
        strcpy((char*)output, "\"\"");
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	4a83      	ldr	r2, [pc, #524]	@ (8001e68 <print_string_ptr+0x254>)
 8001c5a:	8811      	ldrh	r1, [r2, #0]
 8001c5c:	7892      	ldrb	r2, [r2, #2]
 8001c5e:	8019      	strh	r1, [r3, #0]
 8001c60:	709a      	strb	r2, [r3, #2]

        return true;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e0fb      	b.n	8001e5e <print_string_ptr+0x24a>
    }

    /* set "flag" to 1 if something needs to be escaped */
    for (input_pointer = input; *input_pointer; input_pointer++)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	61fb      	str	r3, [r7, #28]
 8001c6a:	e024      	b.n	8001cb6 <print_string_ptr+0xa2>
    {
        switch (*input_pointer)
 8001c6c:	69fb      	ldr	r3, [r7, #28]
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	2b22      	cmp	r3, #34	@ 0x22
 8001c72:	dc0f      	bgt.n	8001c94 <print_string_ptr+0x80>
 8001c74:	2b08      	cmp	r3, #8
 8001c76:	db13      	blt.n	8001ca0 <print_string_ptr+0x8c>
 8001c78:	3b08      	subs	r3, #8
 8001c7a:	4a7c      	ldr	r2, [pc, #496]	@ (8001e6c <print_string_ptr+0x258>)
 8001c7c:	fa22 f303 	lsr.w	r3, r2, r3
 8001c80:	f003 0301 	and.w	r3, r3, #1
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	bf14      	ite	ne
 8001c88:	2301      	movne	r3, #1
 8001c8a:	2300      	moveq	r3, #0
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d102      	bne.n	8001c98 <print_string_ptr+0x84>
 8001c92:	e005      	b.n	8001ca0 <print_string_ptr+0x8c>
 8001c94:	2b5c      	cmp	r3, #92	@ 0x5c
 8001c96:	d103      	bne.n	8001ca0 <print_string_ptr+0x8c>
            case '\f':
            case '\n':
            case '\r':
            case '\t':
                /* one character escape sequence */
                escape_characters++;
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	3301      	adds	r3, #1
 8001c9c:	617b      	str	r3, [r7, #20]
                break;
 8001c9e:	e007      	b.n	8001cb0 <print_string_ptr+0x9c>
            default:
                if (*input_pointer < 32)
 8001ca0:	69fb      	ldr	r3, [r7, #28]
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	2b1f      	cmp	r3, #31
 8001ca6:	d802      	bhi.n	8001cae <print_string_ptr+0x9a>
                {
                    /* UTF-16 escape sequence uXXXX */
                    escape_characters += 5;
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	3305      	adds	r3, #5
 8001cac:	617b      	str	r3, [r7, #20]
                }
                break;
 8001cae:	bf00      	nop
    for (input_pointer = input; *input_pointer; input_pointer++)
 8001cb0:	69fb      	ldr	r3, [r7, #28]
 8001cb2:	3301      	adds	r3, #1
 8001cb4:	61fb      	str	r3, [r7, #28]
 8001cb6:	69fb      	ldr	r3, [r7, #28]
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d1d6      	bne.n	8001c6c <print_string_ptr+0x58>
        }
    }
    output_length = (size_t)(input_pointer - input) + escape_characters;
 8001cbe:	69fa      	ldr	r2, [r7, #28]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	1ad3      	subs	r3, r2, r3
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	4413      	add	r3, r2
 8001cca:	60fb      	str	r3, [r7, #12]

    output = ensure(output_buffer, output_length + sizeof("\"\""));
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	3303      	adds	r3, #3
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	6838      	ldr	r0, [r7, #0]
 8001cd4:	f7ff fb14 	bl	8001300 <ensure>
 8001cd8:	6138      	str	r0, [r7, #16]
    if (output == NULL)
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d101      	bne.n	8001ce4 <print_string_ptr+0xd0>
    {
        return false;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	e0bc      	b.n	8001e5e <print_string_ptr+0x24a>
    }

    /* no characters have to be escaped */
    if (escape_characters == 0)
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d117      	bne.n	8001d1a <print_string_ptr+0x106>
    {
        output[0] = '\"';
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	2222      	movs	r2, #34	@ 0x22
 8001cee:	701a      	strb	r2, [r3, #0]
        memcpy(output + 1, input, output_length);
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	3301      	adds	r3, #1
 8001cf4:	68fa      	ldr	r2, [r7, #12]
 8001cf6:	6879      	ldr	r1, [r7, #4]
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f003 fcac 	bl	8005656 <memcpy>
        output[output_length + 1] = '\"';
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	3301      	adds	r3, #1
 8001d02:	693a      	ldr	r2, [r7, #16]
 8001d04:	4413      	add	r3, r2
 8001d06:	2222      	movs	r2, #34	@ 0x22
 8001d08:	701a      	strb	r2, [r3, #0]
        output[output_length + 2] = '\0';
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	3302      	adds	r3, #2
 8001d0e:	693a      	ldr	r2, [r7, #16]
 8001d10:	4413      	add	r3, r2
 8001d12:	2200      	movs	r2, #0
 8001d14:	701a      	strb	r2, [r3, #0]

        return true;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e0a1      	b.n	8001e5e <print_string_ptr+0x24a>
    }

    output[0] = '\"';
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	2222      	movs	r2, #34	@ 0x22
 8001d1e:	701a      	strb	r2, [r3, #0]
    output_pointer = output + 1;
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	3301      	adds	r3, #1
 8001d24:	61bb      	str	r3, [r7, #24]
    /* copy the string */
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	61fb      	str	r3, [r7, #28]
 8001d2a:	e086      	b.n	8001e3a <print_string_ptr+0x226>
    {
        if ((*input_pointer > 31) && (*input_pointer != '\"') && (*input_pointer != '\\'))
 8001d2c:	69fb      	ldr	r3, [r7, #28]
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	2b1f      	cmp	r3, #31
 8001d32:	d90c      	bls.n	8001d4e <print_string_ptr+0x13a>
 8001d34:	69fb      	ldr	r3, [r7, #28]
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	2b22      	cmp	r3, #34	@ 0x22
 8001d3a:	d008      	beq.n	8001d4e <print_string_ptr+0x13a>
 8001d3c:	69fb      	ldr	r3, [r7, #28]
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	2b5c      	cmp	r3, #92	@ 0x5c
 8001d42:	d004      	beq.n	8001d4e <print_string_ptr+0x13a>
        {
            /* normal character, copy */
            *output_pointer = *input_pointer;
 8001d44:	69fb      	ldr	r3, [r7, #28]
 8001d46:	781a      	ldrb	r2, [r3, #0]
 8001d48:	69bb      	ldr	r3, [r7, #24]
 8001d4a:	701a      	strb	r2, [r3, #0]
 8001d4c:	e06f      	b.n	8001e2e <print_string_ptr+0x21a>
        }
        else
        {
            /* character needs to be escaped */
            *output_pointer++ = '\\';
 8001d4e:	69bb      	ldr	r3, [r7, #24]
 8001d50:	1c5a      	adds	r2, r3, #1
 8001d52:	61ba      	str	r2, [r7, #24]
 8001d54:	225c      	movs	r2, #92	@ 0x5c
 8001d56:	701a      	strb	r2, [r3, #0]
            switch (*input_pointer)
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	2b22      	cmp	r3, #34	@ 0x22
 8001d5e:	dc3d      	bgt.n	8001ddc <print_string_ptr+0x1c8>
 8001d60:	2b08      	cmp	r3, #8
 8001d62:	db59      	blt.n	8001e18 <print_string_ptr+0x204>
 8001d64:	3b08      	subs	r3, #8
 8001d66:	2b1a      	cmp	r3, #26
 8001d68:	d856      	bhi.n	8001e18 <print_string_ptr+0x204>
 8001d6a:	a201      	add	r2, pc, #4	@ (adr r2, 8001d70 <print_string_ptr+0x15c>)
 8001d6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d70:	08001df1 	.word	0x08001df1
 8001d74:	08001e11 	.word	0x08001e11
 8001d78:	08001e01 	.word	0x08001e01
 8001d7c:	08001e19 	.word	0x08001e19
 8001d80:	08001df9 	.word	0x08001df9
 8001d84:	08001e09 	.word	0x08001e09
 8001d88:	08001e19 	.word	0x08001e19
 8001d8c:	08001e19 	.word	0x08001e19
 8001d90:	08001e19 	.word	0x08001e19
 8001d94:	08001e19 	.word	0x08001e19
 8001d98:	08001e19 	.word	0x08001e19
 8001d9c:	08001e19 	.word	0x08001e19
 8001da0:	08001e19 	.word	0x08001e19
 8001da4:	08001e19 	.word	0x08001e19
 8001da8:	08001e19 	.word	0x08001e19
 8001dac:	08001e19 	.word	0x08001e19
 8001db0:	08001e19 	.word	0x08001e19
 8001db4:	08001e19 	.word	0x08001e19
 8001db8:	08001e19 	.word	0x08001e19
 8001dbc:	08001e19 	.word	0x08001e19
 8001dc0:	08001e19 	.word	0x08001e19
 8001dc4:	08001e19 	.word	0x08001e19
 8001dc8:	08001e19 	.word	0x08001e19
 8001dcc:	08001e19 	.word	0x08001e19
 8001dd0:	08001e19 	.word	0x08001e19
 8001dd4:	08001e19 	.word	0x08001e19
 8001dd8:	08001de9 	.word	0x08001de9
 8001ddc:	2b5c      	cmp	r3, #92	@ 0x5c
 8001dde:	d11b      	bne.n	8001e18 <print_string_ptr+0x204>
            {
                case '\\':
                    *output_pointer = '\\';
 8001de0:	69bb      	ldr	r3, [r7, #24]
 8001de2:	225c      	movs	r2, #92	@ 0x5c
 8001de4:	701a      	strb	r2, [r3, #0]
                    break;
 8001de6:	e022      	b.n	8001e2e <print_string_ptr+0x21a>
                case '\"':
                    *output_pointer = '\"';
 8001de8:	69bb      	ldr	r3, [r7, #24]
 8001dea:	2222      	movs	r2, #34	@ 0x22
 8001dec:	701a      	strb	r2, [r3, #0]
                    break;
 8001dee:	e01e      	b.n	8001e2e <print_string_ptr+0x21a>
                case '\b':
                    *output_pointer = 'b';
 8001df0:	69bb      	ldr	r3, [r7, #24]
 8001df2:	2262      	movs	r2, #98	@ 0x62
 8001df4:	701a      	strb	r2, [r3, #0]
                    break;
 8001df6:	e01a      	b.n	8001e2e <print_string_ptr+0x21a>
                case '\f':
                    *output_pointer = 'f';
 8001df8:	69bb      	ldr	r3, [r7, #24]
 8001dfa:	2266      	movs	r2, #102	@ 0x66
 8001dfc:	701a      	strb	r2, [r3, #0]
                    break;
 8001dfe:	e016      	b.n	8001e2e <print_string_ptr+0x21a>
                case '\n':
                    *output_pointer = 'n';
 8001e00:	69bb      	ldr	r3, [r7, #24]
 8001e02:	226e      	movs	r2, #110	@ 0x6e
 8001e04:	701a      	strb	r2, [r3, #0]
                    break;
 8001e06:	e012      	b.n	8001e2e <print_string_ptr+0x21a>
                case '\r':
                    *output_pointer = 'r';
 8001e08:	69bb      	ldr	r3, [r7, #24]
 8001e0a:	2272      	movs	r2, #114	@ 0x72
 8001e0c:	701a      	strb	r2, [r3, #0]
                    break;
 8001e0e:	e00e      	b.n	8001e2e <print_string_ptr+0x21a>
                case '\t':
                    *output_pointer = 't';
 8001e10:	69bb      	ldr	r3, [r7, #24]
 8001e12:	2274      	movs	r2, #116	@ 0x74
 8001e14:	701a      	strb	r2, [r3, #0]
                    break;
 8001e16:	e00a      	b.n	8001e2e <print_string_ptr+0x21a>
                default:
                    /* escape and print as unicode codepoint */
                    sprintf((char*)output_pointer, "u%04x", *input_pointer);
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	461a      	mov	r2, r3
 8001e1e:	4914      	ldr	r1, [pc, #80]	@ (8001e70 <print_string_ptr+0x25c>)
 8001e20:	69b8      	ldr	r0, [r7, #24]
 8001e22:	f003 fad9 	bl	80053d8 <siprintf>
                    output_pointer += 4;
 8001e26:	69bb      	ldr	r3, [r7, #24]
 8001e28:	3304      	adds	r3, #4
 8001e2a:	61bb      	str	r3, [r7, #24]
                    break;
 8001e2c:	bf00      	nop
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
 8001e2e:	69fb      	ldr	r3, [r7, #28]
 8001e30:	3301      	adds	r3, #1
 8001e32:	61fb      	str	r3, [r7, #28]
 8001e34:	69bb      	ldr	r3, [r7, #24]
 8001e36:	3301      	adds	r3, #1
 8001e38:	61bb      	str	r3, [r7, #24]
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	781b      	ldrb	r3, [r3, #0]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	f47f af74 	bne.w	8001d2c <print_string_ptr+0x118>
            }
        }
    }
    output[output_length + 1] = '\"';
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	3301      	adds	r3, #1
 8001e48:	693a      	ldr	r2, [r7, #16]
 8001e4a:	4413      	add	r3, r2
 8001e4c:	2222      	movs	r2, #34	@ 0x22
 8001e4e:	701a      	strb	r2, [r3, #0]
    output[output_length + 2] = '\0';
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	3302      	adds	r3, #2
 8001e54:	693a      	ldr	r2, [r7, #16]
 8001e56:	4413      	add	r3, r2
 8001e58:	2200      	movs	r2, #0
 8001e5a:	701a      	strb	r2, [r3, #0]

    return true;
 8001e5c:	2301      	movs	r3, #1
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3720      	adds	r7, #32
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	08007cc4 	.word	0x08007cc4
 8001e6c:	04000037 	.word	0x04000037
 8001e70:	08007cc8 	.word	0x08007cc8

08001e74 <print_string>:

/* Invoke print_string_ptr (which is useful) on an item. */
static cJSON_bool print_string(const cJSON * const item, printbuffer * const p)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b082      	sub	sp, #8
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
 8001e7c:	6039      	str	r1, [r7, #0]
    return print_string_ptr((unsigned char*)item->valuestring, p);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	691b      	ldr	r3, [r3, #16]
 8001e82:	6839      	ldr	r1, [r7, #0]
 8001e84:	4618      	mov	r0, r3
 8001e86:	f7ff fec5 	bl	8001c14 <print_string_ptr>
 8001e8a:	4603      	mov	r3, r0
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	3708      	adds	r7, #8
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}

08001e94 <buffer_skip_whitespace>:
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer);
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer);

/* Utility to jump whitespace and cr/lf */
static parse_buffer *buffer_skip_whitespace(parse_buffer * const buffer)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL))
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d003      	beq.n	8001eaa <buffer_skip_whitespace+0x16>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d101      	bne.n	8001eae <buffer_skip_whitespace+0x1a>
    {
        return NULL;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	e02c      	b.n	8001f08 <buffer_skip_whitespace+0x74>
    }

    if (cannot_access_at_index(buffer, 0))
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d005      	beq.n	8001ec0 <buffer_skip_whitespace+0x2c>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	689a      	ldr	r2, [r3, #8]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	d306      	bcc.n	8001ece <buffer_skip_whitespace+0x3a>
    {
        return buffer;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	e021      	b.n	8001f08 <buffer_skip_whitespace+0x74>
    }

    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
    {
       buffer->offset++;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	1c5a      	adds	r2, r3, #1
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	609a      	str	r2, [r3, #8]
    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d00d      	beq.n	8001ef0 <buffer_skip_whitespace+0x5c>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	689a      	ldr	r2, [r3, #8]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d207      	bcs.n	8001ef0 <buffer_skip_whitespace+0x5c>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	4413      	add	r3, r2
 8001eea:	781b      	ldrb	r3, [r3, #0]
 8001eec:	2b20      	cmp	r3, #32
 8001eee:	d9e9      	bls.n	8001ec4 <buffer_skip_whitespace+0x30>
    }

    if (buffer->offset == buffer->length)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	689a      	ldr	r2, [r3, #8]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	d104      	bne.n	8001f06 <buffer_skip_whitespace+0x72>
    {
        buffer->offset--;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	1e5a      	subs	r2, r3, #1
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 8001f06:	687b      	ldr	r3, [r7, #4]
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	370c      	adds	r7, #12
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bc80      	pop	{r7}
 8001f10:	4770      	bx	lr
	...

08001f14 <skip_utf8_bom>:

/* skip the UTF-8 BOM (byte order mark) if it is at the beginning of a buffer */
static parse_buffer *skip_utf8_bom(parse_buffer * const buffer)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b082      	sub	sp, #8
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL) || (buffer->offset != 0))
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d007      	beq.n	8001f32 <skip_utf8_bom+0x1e>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d003      	beq.n	8001f32 <skip_utf8_bom+0x1e>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d001      	beq.n	8001f36 <skip_utf8_bom+0x22>
    {
        return NULL;
 8001f32:	2300      	movs	r3, #0
 8001f34:	e01c      	b.n	8001f70 <skip_utf8_bom+0x5c>
    }

    if (can_access_at_index(buffer, 4) && (strncmp((const char*)buffer_at_offset(buffer), "\xEF\xBB\xBF", 3) == 0))
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d018      	beq.n	8001f6e <skip_utf8_bom+0x5a>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	1d1a      	adds	r2, r3, #4
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	429a      	cmp	r2, r3
 8001f48:	d211      	bcs.n	8001f6e <skip_utf8_bom+0x5a>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	4413      	add	r3, r2
 8001f54:	2203      	movs	r2, #3
 8001f56:	4908      	ldr	r1, [pc, #32]	@ (8001f78 <skip_utf8_bom+0x64>)
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f003 fad4 	bl	8005506 <strncmp>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d104      	bne.n	8001f6e <skip_utf8_bom+0x5a>
    {
        buffer->offset += 3;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	1cda      	adds	r2, r3, #3
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 8001f6e:	687b      	ldr	r3, [r7, #4]
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3708      	adds	r7, #8
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	08007cd0 	.word	0x08007cd0

08001f7c <cJSON_ParseWithOpts>:

CJSON_PUBLIC(cJSON *) cJSON_ParseWithOpts(const char *value, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b086      	sub	sp, #24
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	60f8      	str	r0, [r7, #12]
 8001f84:	60b9      	str	r1, [r7, #8]
 8001f86:	607a      	str	r2, [r7, #4]
    size_t buffer_length;

    if (NULL == value)
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d101      	bne.n	8001f92 <cJSON_ParseWithOpts+0x16>
    {
        return NULL;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	e00c      	b.n	8001fac <cJSON_ParseWithOpts+0x30>
    }

    /* Adding null character size due to require_null_terminated. */
    buffer_length = strlen(value) + sizeof("");
 8001f92:	68f8      	ldr	r0, [r7, #12]
 8001f94:	f7fe f8f6 	bl	8000184 <strlen>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	3301      	adds	r3, #1
 8001f9c:	617b      	str	r3, [r7, #20]

    return cJSON_ParseWithLengthOpts(value, buffer_length, return_parse_end, require_null_terminated);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	68ba      	ldr	r2, [r7, #8]
 8001fa2:	6979      	ldr	r1, [r7, #20]
 8001fa4:	68f8      	ldr	r0, [r7, #12]
 8001fa6:	f000 f805 	bl	8001fb4 <cJSON_ParseWithLengthOpts>
 8001faa:	4603      	mov	r3, r0
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	3718      	adds	r7, #24
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bd80      	pop	{r7, pc}

08001fb4 <cJSON_ParseWithLengthOpts>:

/* Parse an object - create a new root, and populate. */
CJSON_PUBLIC(cJSON *) cJSON_ParseWithLengthOpts(const char *value, size_t buffer_length, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b08e      	sub	sp, #56	@ 0x38
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	60f8      	str	r0, [r7, #12]
 8001fbc:	60b9      	str	r1, [r7, #8]
 8001fbe:	607a      	str	r2, [r7, #4]
 8001fc0:	603b      	str	r3, [r7, #0]
    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
 8001fc2:	f107 0318 	add.w	r3, r7, #24
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	601a      	str	r2, [r3, #0]
 8001fca:	605a      	str	r2, [r3, #4]
 8001fcc:	609a      	str	r2, [r3, #8]
 8001fce:	60da      	str	r2, [r3, #12]
 8001fd0:	611a      	str	r2, [r3, #16]
 8001fd2:	615a      	str	r2, [r3, #20]
 8001fd4:	619a      	str	r2, [r3, #24]
    cJSON *item = NULL;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	637b      	str	r3, [r7, #52]	@ 0x34

    /* reset error position */
    global_error.json = NULL;
 8001fda:	4b41      	ldr	r3, [pc, #260]	@ (80020e0 <cJSON_ParseWithLengthOpts+0x12c>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	601a      	str	r2, [r3, #0]
    global_error.position = 0;
 8001fe0:	4b3f      	ldr	r3, [pc, #252]	@ (80020e0 <cJSON_ParseWithLengthOpts+0x12c>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	605a      	str	r2, [r3, #4]

    if (value == NULL || 0 == buffer_length)
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d042      	beq.n	8002072 <cJSON_ParseWithLengthOpts+0xbe>
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d03f      	beq.n	8002072 <cJSON_ParseWithLengthOpts+0xbe>
    {
        goto fail;
    }

    buffer.content = (const unsigned char*)value;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	61bb      	str	r3, [r7, #24]
    buffer.length = buffer_length;
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	61fb      	str	r3, [r7, #28]
    buffer.offset = 0;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	623b      	str	r3, [r7, #32]
    buffer.hooks = global_hooks;
 8001ffe:	4a39      	ldr	r2, [pc, #228]	@ (80020e4 <cJSON_ParseWithLengthOpts+0x130>)
 8002000:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002004:	ca07      	ldmia	r2, {r0, r1, r2}
 8002006:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    item = cJSON_New_Item(&global_hooks);
 800200a:	4836      	ldr	r0, [pc, #216]	@ (80020e4 <cJSON_ParseWithLengthOpts+0x130>)
 800200c:	f7ff f83e 	bl	800108c <cJSON_New_Item>
 8002010:	6378      	str	r0, [r7, #52]	@ 0x34
    if (item == NULL) /* memory fail */
 8002012:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002014:	2b00      	cmp	r3, #0
 8002016:	d02e      	beq.n	8002076 <cJSON_ParseWithLengthOpts+0xc2>
    {
        goto fail;
    }

    if (!parse_value(item, buffer_skip_whitespace(skip_utf8_bom(&buffer))))
 8002018:	f107 0318 	add.w	r3, r7, #24
 800201c:	4618      	mov	r0, r3
 800201e:	f7ff ff79 	bl	8001f14 <skip_utf8_bom>
 8002022:	4603      	mov	r3, r0
 8002024:	4618      	mov	r0, r3
 8002026:	f7ff ff35 	bl	8001e94 <buffer_skip_whitespace>
 800202a:	4603      	mov	r3, r0
 800202c:	4619      	mov	r1, r3
 800202e:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002030:	f000 f902 	bl	8002238 <parse_value>
 8002034:	4603      	mov	r3, r0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d01f      	beq.n	800207a <cJSON_ParseWithLengthOpts+0xc6>
        /* parse failure. ep is set. */
        goto fail;
    }

    /* if we require null-terminated JSON without appended garbage, skip and then check for a null terminator */
    if (require_null_terminated)
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d00e      	beq.n	800205e <cJSON_ParseWithLengthOpts+0xaa>
    {
        buffer_skip_whitespace(&buffer);
 8002040:	f107 0318 	add.w	r3, r7, #24
 8002044:	4618      	mov	r0, r3
 8002046:	f7ff ff25 	bl	8001e94 <buffer_skip_whitespace>
        if ((buffer.offset >= buffer.length) || buffer_at_offset(&buffer)[0] != '\0')
 800204a:	6a3a      	ldr	r2, [r7, #32]
 800204c:	69fb      	ldr	r3, [r7, #28]
 800204e:	429a      	cmp	r2, r3
 8002050:	d215      	bcs.n	800207e <cJSON_ParseWithLengthOpts+0xca>
 8002052:	69ba      	ldr	r2, [r7, #24]
 8002054:	6a3b      	ldr	r3, [r7, #32]
 8002056:	4413      	add	r3, r2
 8002058:	781b      	ldrb	r3, [r3, #0]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d10f      	bne.n	800207e <cJSON_ParseWithLengthOpts+0xca>
        {
            goto fail;
        }
    }
    if (return_parse_end)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d004      	beq.n	800206e <cJSON_ParseWithLengthOpts+0xba>
    {
        *return_parse_end = (const char*)buffer_at_offset(&buffer);
 8002064:	69ba      	ldr	r2, [r7, #24]
 8002066:	6a3b      	ldr	r3, [r7, #32]
 8002068:	441a      	add	r2, r3
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	601a      	str	r2, [r3, #0]
    }

    return item;
 800206e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002070:	e031      	b.n	80020d6 <cJSON_ParseWithLengthOpts+0x122>
        goto fail;
 8002072:	bf00      	nop
 8002074:	e004      	b.n	8002080 <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 8002076:	bf00      	nop
 8002078:	e002      	b.n	8002080 <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 800207a:	bf00      	nop
 800207c:	e000      	b.n	8002080 <cJSON_ParseWithLengthOpts+0xcc>
            goto fail;
 800207e:	bf00      	nop

fail:
    if (item != NULL)
 8002080:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002082:	2b00      	cmp	r3, #0
 8002084:	d002      	beq.n	800208c <cJSON_ParseWithLengthOpts+0xd8>
    {
        cJSON_Delete(item);
 8002086:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002088:	f7ff f816 	bl	80010b8 <cJSON_Delete>
    }

    if (value != NULL)
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d020      	beq.n	80020d4 <cJSON_ParseWithLengthOpts+0x120>
    {
        error local_error;
        local_error.json = (const unsigned char*)value;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	613b      	str	r3, [r7, #16]
        local_error.position = 0;
 8002096:	2300      	movs	r3, #0
 8002098:	617b      	str	r3, [r7, #20]

        if (buffer.offset < buffer.length)
 800209a:	6a3a      	ldr	r2, [r7, #32]
 800209c:	69fb      	ldr	r3, [r7, #28]
 800209e:	429a      	cmp	r2, r3
 80020a0:	d202      	bcs.n	80020a8 <cJSON_ParseWithLengthOpts+0xf4>
        {
            local_error.position = buffer.offset;
 80020a2:	6a3b      	ldr	r3, [r7, #32]
 80020a4:	617b      	str	r3, [r7, #20]
 80020a6:	e005      	b.n	80020b4 <cJSON_ParseWithLengthOpts+0x100>
        }
        else if (buffer.length > 0)
 80020a8:	69fb      	ldr	r3, [r7, #28]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d002      	beq.n	80020b4 <cJSON_ParseWithLengthOpts+0x100>
        {
            local_error.position = buffer.length - 1;
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	3b01      	subs	r3, #1
 80020b2:	617b      	str	r3, [r7, #20]
        }

        if (return_parse_end != NULL)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d004      	beq.n	80020c4 <cJSON_ParseWithLengthOpts+0x110>
        {
            *return_parse_end = (const char*)local_error.json + local_error.position;
 80020ba:	693a      	ldr	r2, [r7, #16]
 80020bc:	697b      	ldr	r3, [r7, #20]
 80020be:	441a      	add	r2, r3
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	601a      	str	r2, [r3, #0]
        }

        global_error = local_error;
 80020c4:	4b06      	ldr	r3, [pc, #24]	@ (80020e0 <cJSON_ParseWithLengthOpts+0x12c>)
 80020c6:	461a      	mov	r2, r3
 80020c8:	f107 0310 	add.w	r3, r7, #16
 80020cc:	e893 0003 	ldmia.w	r3, {r0, r1}
 80020d0:	e882 0003 	stmia.w	r2, {r0, r1}
    }

    return NULL;
 80020d4:	2300      	movs	r3, #0
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3738      	adds	r7, #56	@ 0x38
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	20000214 	.word	0x20000214
 80020e4:	20000000 	.word	0x20000000

080020e8 <cJSON_Parse>:

/* Default options for cJSON_Parse */
CJSON_PUBLIC(cJSON *) cJSON_Parse(const char *value)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b082      	sub	sp, #8
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
    return cJSON_ParseWithOpts(value, 0, 0);
 80020f0:	2200      	movs	r2, #0
 80020f2:	2100      	movs	r1, #0
 80020f4:	6878      	ldr	r0, [r7, #4]
 80020f6:	f7ff ff41 	bl	8001f7c <cJSON_ParseWithOpts>
 80020fa:	4603      	mov	r3, r0
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	3708      	adds	r7, #8
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}

08002104 <print>:
}

#define cjson_min(a, b) (((a) < (b)) ? (a) : (b))

static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b08e      	sub	sp, #56	@ 0x38
 8002108:	af00      	add	r7, sp, #0
 800210a:	60f8      	str	r0, [r7, #12]
 800210c:	60b9      	str	r1, [r7, #8]
 800210e:	607a      	str	r2, [r7, #4]
    static const size_t default_buffer_size = 256;
    printbuffer buffer[1];
    unsigned char *printed = NULL;
 8002110:	2300      	movs	r3, #0
 8002112:	637b      	str	r3, [r7, #52]	@ 0x34

    memset(buffer, 0, sizeof(buffer));
 8002114:	f107 0310 	add.w	r3, r7, #16
 8002118:	2224      	movs	r2, #36	@ 0x24
 800211a:	2100      	movs	r1, #0
 800211c:	4618      	mov	r0, r3
 800211e:	f003 f9ea 	bl	80054f6 <memset>

    /* create buffer */
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a3b      	ldr	r2, [pc, #236]	@ (8002214 <print+0x110>)
 8002128:	6812      	ldr	r2, [r2, #0]
 800212a:	4610      	mov	r0, r2
 800212c:	4798      	blx	r3
 800212e:	4603      	mov	r3, r0
 8002130:	613b      	str	r3, [r7, #16]
    buffer->length = default_buffer_size;
 8002132:	4b38      	ldr	r3, [pc, #224]	@ (8002214 <print+0x110>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	617b      	str	r3, [r7, #20]
    buffer->format = format;
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	627b      	str	r3, [r7, #36]	@ 0x24
    buffer->hooks = *hooks;
 800213c:	687a      	ldr	r2, [r7, #4]
 800213e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002142:	ca07      	ldmia	r2, {r0, r1, r2}
 8002144:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    if (buffer->buffer == NULL)
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d042      	beq.n	80021d4 <print+0xd0>
    {
        goto fail;
    }

    /* print the value */
    if (!print_value(item, buffer))
 800214e:	f107 0310 	add.w	r3, r7, #16
 8002152:	4619      	mov	r1, r3
 8002154:	68f8      	ldr	r0, [r7, #12]
 8002156:	f000 f95b 	bl	8002410 <print_value>
 800215a:	4603      	mov	r3, r0
 800215c:	2b00      	cmp	r3, #0
 800215e:	d03b      	beq.n	80021d8 <print+0xd4>
    {
        goto fail;
    }
    update_offset(buffer);
 8002160:	f107 0310 	add.w	r3, r7, #16
 8002164:	4618      	mov	r0, r3
 8002166:	f7ff f965 	bl	8001434 <update_offset>

    /* check if reallocate is available */
    if (hooks->reallocate != NULL)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d00d      	beq.n	800218e <print+0x8a>
    {
        printed = (unsigned char*) hooks->reallocate(buffer->buffer, buffer->offset + 1);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	6938      	ldr	r0, [r7, #16]
 8002178:	69ba      	ldr	r2, [r7, #24]
 800217a:	3201      	adds	r2, #1
 800217c:	4611      	mov	r1, r2
 800217e:	4798      	blx	r3
 8002180:	6378      	str	r0, [r7, #52]	@ 0x34
        if (printed == NULL) {
 8002182:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002184:	2b00      	cmp	r3, #0
 8002186:	d029      	beq.n	80021dc <print+0xd8>
            goto fail;
        }
        buffer->buffer = NULL;
 8002188:	2300      	movs	r3, #0
 800218a:	613b      	str	r3, [r7, #16]
 800218c:	e020      	b.n	80021d0 <print+0xcc>
    }
    else /* otherwise copy the JSON over to a new buffer */
    {
        printed = (unsigned char*) hooks->allocate(buffer->offset + 1);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	69ba      	ldr	r2, [r7, #24]
 8002194:	3201      	adds	r2, #1
 8002196:	4610      	mov	r0, r2
 8002198:	4798      	blx	r3
 800219a:	6378      	str	r0, [r7, #52]	@ 0x34
        if (printed == NULL)
 800219c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d01e      	beq.n	80021e0 <print+0xdc>
        {
            goto fail;
        }
        memcpy(printed, buffer->buffer, cjson_min(buffer->length, buffer->offset + 1));
 80021a2:	6939      	ldr	r1, [r7, #16]
 80021a4:	69bb      	ldr	r3, [r7, #24]
 80021a6:	1c5a      	adds	r2, r3, #1
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	4293      	cmp	r3, r2
 80021ac:	bf28      	it	cs
 80021ae:	4613      	movcs	r3, r2
 80021b0:	461a      	mov	r2, r3
 80021b2:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80021b4:	f003 fa4f 	bl	8005656 <memcpy>
        printed[buffer->offset] = '\0'; /* just to be sure */
 80021b8:	69bb      	ldr	r3, [r7, #24]
 80021ba:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80021bc:	4413      	add	r3, r2
 80021be:	2200      	movs	r2, #0
 80021c0:	701a      	strb	r2, [r3, #0]

        /* free the buffer */
        hooks->deallocate(buffer->buffer);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	693a      	ldr	r2, [r7, #16]
 80021c8:	4610      	mov	r0, r2
 80021ca:	4798      	blx	r3
        buffer->buffer = NULL;
 80021cc:	2300      	movs	r3, #0
 80021ce:	613b      	str	r3, [r7, #16]
    }

    return printed;
 80021d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80021d2:	e01a      	b.n	800220a <print+0x106>
        goto fail;
 80021d4:	bf00      	nop
 80021d6:	e004      	b.n	80021e2 <print+0xde>
        goto fail;
 80021d8:	bf00      	nop
 80021da:	e002      	b.n	80021e2 <print+0xde>
            goto fail;
 80021dc:	bf00      	nop
 80021de:	e000      	b.n	80021e2 <print+0xde>
            goto fail;
 80021e0:	bf00      	nop

fail:
    if (buffer->buffer != NULL)
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d006      	beq.n	80021f6 <print+0xf2>
    {
        hooks->deallocate(buffer->buffer);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	693a      	ldr	r2, [r7, #16]
 80021ee:	4610      	mov	r0, r2
 80021f0:	4798      	blx	r3
        buffer->buffer = NULL;
 80021f2:	2300      	movs	r3, #0
 80021f4:	613b      	str	r3, [r7, #16]
    }

    if (printed != NULL)
 80021f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d005      	beq.n	8002208 <print+0x104>
    {
        hooks->deallocate(printed);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002202:	4798      	blx	r3
        printed = NULL;
 8002204:	2300      	movs	r3, #0
 8002206:	637b      	str	r3, [r7, #52]	@ 0x34
    }

    return NULL;
 8002208:	2300      	movs	r3, #0
}
 800220a:	4618      	mov	r0, r3
 800220c:	3738      	adds	r7, #56	@ 0x38
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	08007d08 	.word	0x08007d08

08002218 <cJSON_PrintUnformatted>:
{
    return (char*)print(item, true, &global_hooks);
}

CJSON_PUBLIC(char *) cJSON_PrintUnformatted(const cJSON *item)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b082      	sub	sp, #8
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
    return (char*)print(item, false, &global_hooks);
 8002220:	4a04      	ldr	r2, [pc, #16]	@ (8002234 <cJSON_PrintUnformatted+0x1c>)
 8002222:	2100      	movs	r1, #0
 8002224:	6878      	ldr	r0, [r7, #4]
 8002226:	f7ff ff6d 	bl	8002104 <print>
 800222a:	4603      	mov	r3, r0
}
 800222c:	4618      	mov	r0, r3
 800222e:	3708      	adds	r7, #8
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}
 8002234:	20000000 	.word	0x20000000

08002238 <parse_value>:
    return print_value(item, &p);
}

/* Parser core - when encountering text, process appropriately. */
static cJSON_bool parse_value(cJSON * const item, parse_buffer * const input_buffer)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b082      	sub	sp, #8
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
 8002240:	6039      	str	r1, [r7, #0]
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d003      	beq.n	8002250 <parse_value+0x18>
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d101      	bne.n	8002254 <parse_value+0x1c>
    {
        return false; /* no input */
 8002250:	2300      	movs	r3, #0
 8002252:	e0d2      	b.n	80023fa <parse_value+0x1c2>
    }

    /* parse the different types of values */
    /* null */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "null", 4) == 0))
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d01d      	beq.n	8002296 <parse_value+0x5e>
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	1d1a      	adds	r2, r3, #4
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	429a      	cmp	r2, r3
 8002266:	d816      	bhi.n	8002296 <parse_value+0x5e>
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	4413      	add	r3, r2
 8002272:	2204      	movs	r2, #4
 8002274:	4963      	ldr	r1, [pc, #396]	@ (8002404 <parse_value+0x1cc>)
 8002276:	4618      	mov	r0, r3
 8002278:	f003 f945 	bl	8005506 <strncmp>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d109      	bne.n	8002296 <parse_value+0x5e>
    {
        item->type = cJSON_NULL;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2204      	movs	r2, #4
 8002286:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 4;
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	1d1a      	adds	r2, r3, #4
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	609a      	str	r2, [r3, #8]
        return true;
 8002292:	2301      	movs	r3, #1
 8002294:	e0b1      	b.n	80023fa <parse_value+0x1c2>
    }
    /* false */
    if (can_read(input_buffer, 5) && (strncmp((const char*)buffer_at_offset(input_buffer), "false", 5) == 0))
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d01d      	beq.n	80022d8 <parse_value+0xa0>
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	1d5a      	adds	r2, r3, #5
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	429a      	cmp	r2, r3
 80022a8:	d816      	bhi.n	80022d8 <parse_value+0xa0>
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	4413      	add	r3, r2
 80022b4:	2205      	movs	r2, #5
 80022b6:	4954      	ldr	r1, [pc, #336]	@ (8002408 <parse_value+0x1d0>)
 80022b8:	4618      	mov	r0, r3
 80022ba:	f003 f924 	bl	8005506 <strncmp>
 80022be:	4603      	mov	r3, r0
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d109      	bne.n	80022d8 <parse_value+0xa0>
    {
        item->type = cJSON_False;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2201      	movs	r2, #1
 80022c8:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 5;
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	1d5a      	adds	r2, r3, #5
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	609a      	str	r2, [r3, #8]
        return true;
 80022d4:	2301      	movs	r3, #1
 80022d6:	e090      	b.n	80023fa <parse_value+0x1c2>
    }
    /* true */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "true", 4) == 0))
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d020      	beq.n	8002320 <parse_value+0xe8>
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	1d1a      	adds	r2, r3, #4
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d819      	bhi.n	8002320 <parse_value+0xe8>
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	4413      	add	r3, r2
 80022f6:	2204      	movs	r2, #4
 80022f8:	4944      	ldr	r1, [pc, #272]	@ (800240c <parse_value+0x1d4>)
 80022fa:	4618      	mov	r0, r3
 80022fc:	f003 f903 	bl	8005506 <strncmp>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d10c      	bne.n	8002320 <parse_value+0xe8>
    {
        item->type = cJSON_True;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2202      	movs	r2, #2
 800230a:	60da      	str	r2, [r3, #12]
        item->valueint = 1;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2201      	movs	r2, #1
 8002310:	615a      	str	r2, [r3, #20]
        input_buffer->offset += 4;
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	1d1a      	adds	r2, r3, #4
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	609a      	str	r2, [r3, #8]
        return true;
 800231c:	2301      	movs	r3, #1
 800231e:	e06c      	b.n	80023fa <parse_value+0x1c2>
    }
    /* string */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '\"'))
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d013      	beq.n	800234e <parse_value+0x116>
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	689a      	ldr	r2, [r3, #8]
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	429a      	cmp	r2, r3
 8002330:	d20d      	bcs.n	800234e <parse_value+0x116>
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	4413      	add	r3, r2
 800233c:	781b      	ldrb	r3, [r3, #0]
 800233e:	2b22      	cmp	r3, #34	@ 0x22
 8002340:	d105      	bne.n	800234e <parse_value+0x116>
    {
        return parse_string(item, input_buffer);
 8002342:	6839      	ldr	r1, [r7, #0]
 8002344:	6878      	ldr	r0, [r7, #4]
 8002346:	f7ff fb1d 	bl	8001984 <parse_string>
 800234a:	4603      	mov	r3, r0
 800234c:	e055      	b.n	80023fa <parse_value+0x1c2>
    }
    /* number */
    if (can_access_at_index(input_buffer, 0) && ((buffer_at_offset(input_buffer)[0] == '-') || ((buffer_at_offset(input_buffer)[0] >= '0') && (buffer_at_offset(input_buffer)[0] <= '9'))))
 800234e:	683b      	ldr	r3, [r7, #0]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d023      	beq.n	800239c <parse_value+0x164>
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	689a      	ldr	r2, [r3, #8]
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	429a      	cmp	r2, r3
 800235e:	d21d      	bcs.n	800239c <parse_value+0x164>
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	4413      	add	r3, r2
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	2b2d      	cmp	r3, #45	@ 0x2d
 800236e:	d00f      	beq.n	8002390 <parse_value+0x158>
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	4413      	add	r3, r2
 800237a:	781b      	ldrb	r3, [r3, #0]
 800237c:	2b2f      	cmp	r3, #47	@ 0x2f
 800237e:	d90d      	bls.n	800239c <parse_value+0x164>
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	4413      	add	r3, r2
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	2b39      	cmp	r3, #57	@ 0x39
 800238e:	d805      	bhi.n	800239c <parse_value+0x164>
    {
        return parse_number(item, input_buffer);
 8002390:	6839      	ldr	r1, [r7, #0]
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	f7fe fee8 	bl	8001168 <parse_number>
 8002398:	4603      	mov	r3, r0
 800239a:	e02e      	b.n	80023fa <parse_value+0x1c2>
    }
    /* array */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '['))
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d013      	beq.n	80023ca <parse_value+0x192>
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	689a      	ldr	r2, [r3, #8]
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	429a      	cmp	r2, r3
 80023ac:	d20d      	bcs.n	80023ca <parse_value+0x192>
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	4413      	add	r3, r2
 80023b8:	781b      	ldrb	r3, [r3, #0]
 80023ba:	2b5b      	cmp	r3, #91	@ 0x5b
 80023bc:	d105      	bne.n	80023ca <parse_value+0x192>
    {
        return parse_array(item, input_buffer);
 80023be:	6839      	ldr	r1, [r7, #0]
 80023c0:	6878      	ldr	r0, [r7, #4]
 80023c2:	f000 f909 	bl	80025d8 <parse_array>
 80023c6:	4603      	mov	r3, r0
 80023c8:	e017      	b.n	80023fa <parse_value+0x1c2>
    }
    /* object */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '{'))
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d013      	beq.n	80023f8 <parse_value+0x1c0>
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	689a      	ldr	r2, [r3, #8]
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	429a      	cmp	r2, r3
 80023da:	d20d      	bcs.n	80023f8 <parse_value+0x1c0>
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	4413      	add	r3, r2
 80023e6:	781b      	ldrb	r3, [r3, #0]
 80023e8:	2b7b      	cmp	r3, #123	@ 0x7b
 80023ea:	d105      	bne.n	80023f8 <parse_value+0x1c0>
    {
        return parse_object(item, input_buffer);
 80023ec:	6839      	ldr	r1, [r7, #0]
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f000 fa3c 	bl	800286c <parse_object>
 80023f4:	4603      	mov	r3, r0
 80023f6:	e000      	b.n	80023fa <parse_value+0x1c2>
    }

    return false;
 80023f8:	2300      	movs	r3, #0
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3708      	adds	r7, #8
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	08007ca4 	.word	0x08007ca4
 8002408:	08007cd4 	.word	0x08007cd4
 800240c:	08007cdc 	.word	0x08007cdc

08002410 <print_value>:

/* Render a value to text. */
static cJSON_bool print_value(const cJSON * const item, printbuffer * const output_buffer)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b084      	sub	sp, #16
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
 8002418:	6039      	str	r1, [r7, #0]
    unsigned char *output = NULL;
 800241a:	2300      	movs	r3, #0
 800241c:	60fb      	str	r3, [r7, #12]

    if ((item == NULL) || (output_buffer == NULL))
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d002      	beq.n	800242a <print_value+0x1a>
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d101      	bne.n	800242e <print_value+0x1e>
    {
        return false;
 800242a:	2300      	movs	r3, #0
 800242c:	e0c9      	b.n	80025c2 <print_value+0x1b2>
    }

    switch ((item->type) & 0xFF)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	68db      	ldr	r3, [r3, #12]
 8002432:	b2db      	uxtb	r3, r3
 8002434:	2b80      	cmp	r3, #128	@ 0x80
 8002436:	f000 808e 	beq.w	8002556 <print_value+0x146>
 800243a:	2b80      	cmp	r3, #128	@ 0x80
 800243c:	f300 80c0 	bgt.w	80025c0 <print_value+0x1b0>
 8002440:	2b20      	cmp	r3, #32
 8002442:	dc49      	bgt.n	80024d8 <print_value+0xc8>
 8002444:	2b00      	cmp	r3, #0
 8002446:	f340 80bb 	ble.w	80025c0 <print_value+0x1b0>
 800244a:	3b01      	subs	r3, #1
 800244c:	2b1f      	cmp	r3, #31
 800244e:	f200 80b7 	bhi.w	80025c0 <print_value+0x1b0>
 8002452:	a201      	add	r2, pc, #4	@ (adr r2, 8002458 <print_value+0x48>)
 8002454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002458:	08002503 	.word	0x08002503
 800245c:	08002527 	.word	0x08002527
 8002460:	080025c1 	.word	0x080025c1
 8002464:	080024df 	.word	0x080024df
 8002468:	080025c1 	.word	0x080025c1
 800246c:	080025c1 	.word	0x080025c1
 8002470:	080025c1 	.word	0x080025c1
 8002474:	0800254b 	.word	0x0800254b
 8002478:	080025c1 	.word	0x080025c1
 800247c:	080025c1 	.word	0x080025c1
 8002480:	080025c1 	.word	0x080025c1
 8002484:	080025c1 	.word	0x080025c1
 8002488:	080025c1 	.word	0x080025c1
 800248c:	080025c1 	.word	0x080025c1
 8002490:	080025c1 	.word	0x080025c1
 8002494:	0800259d 	.word	0x0800259d
 8002498:	080025c1 	.word	0x080025c1
 800249c:	080025c1 	.word	0x080025c1
 80024a0:	080025c1 	.word	0x080025c1
 80024a4:	080025c1 	.word	0x080025c1
 80024a8:	080025c1 	.word	0x080025c1
 80024ac:	080025c1 	.word	0x080025c1
 80024b0:	080025c1 	.word	0x080025c1
 80024b4:	080025c1 	.word	0x080025c1
 80024b8:	080025c1 	.word	0x080025c1
 80024bc:	080025c1 	.word	0x080025c1
 80024c0:	080025c1 	.word	0x080025c1
 80024c4:	080025c1 	.word	0x080025c1
 80024c8:	080025c1 	.word	0x080025c1
 80024cc:	080025c1 	.word	0x080025c1
 80024d0:	080025c1 	.word	0x080025c1
 80024d4:	080025a9 	.word	0x080025a9
 80024d8:	2b40      	cmp	r3, #64	@ 0x40
 80024da:	d06b      	beq.n	80025b4 <print_value+0x1a4>
 80024dc:	e070      	b.n	80025c0 <print_value+0x1b0>
    {
        case cJSON_NULL:
            output = ensure(output_buffer, 5);
 80024de:	2105      	movs	r1, #5
 80024e0:	6838      	ldr	r0, [r7, #0]
 80024e2:	f7fe ff0d 	bl	8001300 <ensure>
 80024e6:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d101      	bne.n	80024f2 <print_value+0xe2>
            {
                return false;
 80024ee:	2300      	movs	r3, #0
 80024f0:	e067      	b.n	80025c2 <print_value+0x1b2>
            }
            strcpy((char*)output, "null");
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	4a35      	ldr	r2, [pc, #212]	@ (80025cc <print_value+0x1bc>)
 80024f6:	6810      	ldr	r0, [r2, #0]
 80024f8:	6018      	str	r0, [r3, #0]
 80024fa:	7912      	ldrb	r2, [r2, #4]
 80024fc:	711a      	strb	r2, [r3, #4]
            return true;
 80024fe:	2301      	movs	r3, #1
 8002500:	e05f      	b.n	80025c2 <print_value+0x1b2>

        case cJSON_False:
            output = ensure(output_buffer, 6);
 8002502:	2106      	movs	r1, #6
 8002504:	6838      	ldr	r0, [r7, #0]
 8002506:	f7fe fefb 	bl	8001300 <ensure>
 800250a:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d101      	bne.n	8002516 <print_value+0x106>
            {
                return false;
 8002512:	2300      	movs	r3, #0
 8002514:	e055      	b.n	80025c2 <print_value+0x1b2>
            }
            strcpy((char*)output, "false");
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	4a2d      	ldr	r2, [pc, #180]	@ (80025d0 <print_value+0x1c0>)
 800251a:	6810      	ldr	r0, [r2, #0]
 800251c:	6018      	str	r0, [r3, #0]
 800251e:	8892      	ldrh	r2, [r2, #4]
 8002520:	809a      	strh	r2, [r3, #4]
            return true;
 8002522:	2301      	movs	r3, #1
 8002524:	e04d      	b.n	80025c2 <print_value+0x1b2>

        case cJSON_True:
            output = ensure(output_buffer, 5);
 8002526:	2105      	movs	r1, #5
 8002528:	6838      	ldr	r0, [r7, #0]
 800252a:	f7fe fee9 	bl	8001300 <ensure>
 800252e:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d101      	bne.n	800253a <print_value+0x12a>
            {
                return false;
 8002536:	2300      	movs	r3, #0
 8002538:	e043      	b.n	80025c2 <print_value+0x1b2>
            }
            strcpy((char*)output, "true");
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	4a25      	ldr	r2, [pc, #148]	@ (80025d4 <print_value+0x1c4>)
 800253e:	6810      	ldr	r0, [r2, #0]
 8002540:	6018      	str	r0, [r3, #0]
 8002542:	7912      	ldrb	r2, [r2, #4]
 8002544:	711a      	strb	r2, [r3, #4]
            return true;
 8002546:	2301      	movs	r3, #1
 8002548:	e03b      	b.n	80025c2 <print_value+0x1b2>

        case cJSON_Number:
            return print_number(item, output_buffer);
 800254a:	6839      	ldr	r1, [r7, #0]
 800254c:	6878      	ldr	r0, [r7, #4]
 800254e:	f7fe ffe3 	bl	8001518 <print_number>
 8002552:	4603      	mov	r3, r0
 8002554:	e035      	b.n	80025c2 <print_value+0x1b2>

        case cJSON_Raw:
        {
            size_t raw_length = 0;
 8002556:	2300      	movs	r3, #0
 8002558:	60bb      	str	r3, [r7, #8]
            if (item->valuestring == NULL)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	691b      	ldr	r3, [r3, #16]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d101      	bne.n	8002566 <print_value+0x156>
            {
                return false;
 8002562:	2300      	movs	r3, #0
 8002564:	e02d      	b.n	80025c2 <print_value+0x1b2>
            }

            raw_length = strlen(item->valuestring) + sizeof("");
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	691b      	ldr	r3, [r3, #16]
 800256a:	4618      	mov	r0, r3
 800256c:	f7fd fe0a 	bl	8000184 <strlen>
 8002570:	4603      	mov	r3, r0
 8002572:	3301      	adds	r3, #1
 8002574:	60bb      	str	r3, [r7, #8]
            output = ensure(output_buffer, raw_length);
 8002576:	68b9      	ldr	r1, [r7, #8]
 8002578:	6838      	ldr	r0, [r7, #0]
 800257a:	f7fe fec1 	bl	8001300 <ensure>
 800257e:	60f8      	str	r0, [r7, #12]
            if (output == NULL)
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d101      	bne.n	800258a <print_value+0x17a>
            {
                return false;
 8002586:	2300      	movs	r3, #0
 8002588:	e01b      	b.n	80025c2 <print_value+0x1b2>
            }
            memcpy(output, item->valuestring, raw_length);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	691b      	ldr	r3, [r3, #16]
 800258e:	68ba      	ldr	r2, [r7, #8]
 8002590:	4619      	mov	r1, r3
 8002592:	68f8      	ldr	r0, [r7, #12]
 8002594:	f003 f85f 	bl	8005656 <memcpy>
            return true;
 8002598:	2301      	movs	r3, #1
 800259a:	e012      	b.n	80025c2 <print_value+0x1b2>
        }

        case cJSON_String:
            return print_string(item, output_buffer);
 800259c:	6839      	ldr	r1, [r7, #0]
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f7ff fc68 	bl	8001e74 <print_string>
 80025a4:	4603      	mov	r3, r0
 80025a6:	e00c      	b.n	80025c2 <print_value+0x1b2>

        case cJSON_Array:
            return print_array(item, output_buffer);
 80025a8:	6839      	ldr	r1, [r7, #0]
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	f000 f8d8 	bl	8002760 <print_array>
 80025b0:	4603      	mov	r3, r0
 80025b2:	e006      	b.n	80025c2 <print_value+0x1b2>

        case cJSON_Object:
            return print_object(item, output_buffer);
 80025b4:	6839      	ldr	r1, [r7, #0]
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	f000 fa64 	bl	8002a84 <print_object>
 80025bc:	4603      	mov	r3, r0
 80025be:	e000      	b.n	80025c2 <print_value+0x1b2>

        default:
            return false;
 80025c0:	2300      	movs	r3, #0
    }
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3710      	adds	r7, #16
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	08007ca4 	.word	0x08007ca4
 80025d0:	08007cd4 	.word	0x08007cd4
 80025d4:	08007cdc 	.word	0x08007cdc

080025d8 <parse_array>:

/* Build an array from input text. */
static cJSON_bool parse_array(cJSON * const item, parse_buffer * const input_buffer)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b086      	sub	sp, #24
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
 80025e0:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* head of the linked list */
 80025e2:	2300      	movs	r3, #0
 80025e4:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 80025e6:	2300      	movs	r3, #0
 80025e8:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	68db      	ldr	r3, [r3, #12]
 80025ee:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80025f2:	d301      	bcc.n	80025f8 <parse_array+0x20>
    {
        return false; /* to deeply nested */
 80025f4:	2300      	movs	r3, #0
 80025f6:	e0af      	b.n	8002758 <parse_array+0x180>
    }
    input_buffer->depth++;
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	1c5a      	adds	r2, r3, #1
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	60da      	str	r2, [r3, #12]

    if (buffer_at_offset(input_buffer)[0] != '[')
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	4413      	add	r3, r2
 800260c:	781b      	ldrb	r3, [r3, #0]
 800260e:	2b5b      	cmp	r3, #91	@ 0x5b
 8002610:	f040 8094 	bne.w	800273c <parse_array+0x164>
    {
        /* not an array */
        goto fail;
    }

    input_buffer->offset++;
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	1c5a      	adds	r2, r3, #1
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 800261e:	6838      	ldr	r0, [r7, #0]
 8002620:	f7ff fc38 	bl	8001e94 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ']'))
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d00d      	beq.n	8002646 <parse_array+0x6e>
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	689a      	ldr	r2, [r3, #8]
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	429a      	cmp	r2, r3
 8002634:	d207      	bcs.n	8002646 <parse_array+0x6e>
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	4413      	add	r3, r2
 8002640:	781b      	ldrb	r3, [r3, #0]
 8002642:	2b5d      	cmp	r3, #93	@ 0x5d
 8002644:	d061      	beq.n	800270a <parse_array+0x132>
        /* empty array */
        goto success;
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d005      	beq.n	8002658 <parse_array+0x80>
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	689a      	ldr	r2, [r3, #8]
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	429a      	cmp	r2, r3
 8002656:	d305      	bcc.n	8002664 <parse_array+0x8c>
    {
        input_buffer->offset--;
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	1e5a      	subs	r2, r3, #1
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	609a      	str	r2, [r3, #8]
        goto fail;
 8002662:	e072      	b.n	800274a <parse_array+0x172>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	1e5a      	subs	r2, r3, #1
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	3310      	adds	r3, #16
 8002672:	4618      	mov	r0, r3
 8002674:	f7fe fd0a 	bl	800108c <cJSON_New_Item>
 8002678:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d05f      	beq.n	8002740 <parse_array+0x168>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 8002680:	697b      	ldr	r3, [r7, #20]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d104      	bne.n	8002690 <parse_array+0xb8>
        {
            /* start the linked list */
            current_item = head = new_item;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	617b      	str	r3, [r7, #20]
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	613b      	str	r3, [r7, #16]
 800268e:	e007      	b.n	80026a0 <parse_array+0xc8>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	68fa      	ldr	r2, [r7, #12]
 8002694:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	693a      	ldr	r2, [r7, #16]
 800269a:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	613b      	str	r3, [r7, #16]
        }

        /* parse next value */
        input_buffer->offset++;
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	1c5a      	adds	r2, r3, #1
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 80026aa:	6838      	ldr	r0, [r7, #0]
 80026ac:	f7ff fbf2 	bl	8001e94 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 80026b0:	6839      	ldr	r1, [r7, #0]
 80026b2:	6938      	ldr	r0, [r7, #16]
 80026b4:	f7ff fdc0 	bl	8002238 <parse_value>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d042      	beq.n	8002744 <parse_array+0x16c>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 80026be:	6838      	ldr	r0, [r7, #0]
 80026c0:	f7ff fbe8 	bl	8001e94 <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d00d      	beq.n	80026e6 <parse_array+0x10e>
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	689a      	ldr	r2, [r3, #8]
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	429a      	cmp	r2, r3
 80026d4:	d207      	bcs.n	80026e6 <parse_array+0x10e>
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	4413      	add	r3, r2
 80026e0:	781b      	ldrb	r3, [r3, #0]
 80026e2:	2b2c      	cmp	r3, #44	@ 0x2c
 80026e4:	d0c3      	beq.n	800266e <parse_array+0x96>

    if (cannot_access_at_index(input_buffer, 0) || buffer_at_offset(input_buffer)[0] != ']')
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d02d      	beq.n	8002748 <parse_array+0x170>
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	689a      	ldr	r2, [r3, #8]
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	429a      	cmp	r2, r3
 80026f6:	d227      	bcs.n	8002748 <parse_array+0x170>
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	4413      	add	r3, r2
 8002702:	781b      	ldrb	r3, [r3, #0]
 8002704:	2b5d      	cmp	r3, #93	@ 0x5d
 8002706:	d11f      	bne.n	8002748 <parse_array+0x170>
    {
        goto fail; /* expected end of array */
    }

success:
 8002708:	e000      	b.n	800270c <parse_array+0x134>
        goto success;
 800270a:	bf00      	nop
    input_buffer->depth--;
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	68db      	ldr	r3, [r3, #12]
 8002710:	1e5a      	subs	r2, r3, #1
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d002      	beq.n	8002722 <parse_array+0x14a>
        head->prev = current_item;
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	693a      	ldr	r2, [r7, #16]
 8002720:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Array;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2220      	movs	r2, #32
 8002726:	60da      	str	r2, [r3, #12]
    item->child = head;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	697a      	ldr	r2, [r7, #20]
 800272c:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	1c5a      	adds	r2, r3, #1
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	609a      	str	r2, [r3, #8]

    return true;
 8002738:	2301      	movs	r3, #1
 800273a:	e00d      	b.n	8002758 <parse_array+0x180>
        goto fail;
 800273c:	bf00      	nop
 800273e:	e004      	b.n	800274a <parse_array+0x172>
            goto fail; /* allocation failure */
 8002740:	bf00      	nop
 8002742:	e002      	b.n	800274a <parse_array+0x172>
            goto fail; /* failed to parse value */
 8002744:	bf00      	nop
 8002746:	e000      	b.n	800274a <parse_array+0x172>
        goto fail; /* expected end of array */
 8002748:	bf00      	nop

fail:
    if (head != NULL)
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d002      	beq.n	8002756 <parse_array+0x17e>
    {
        cJSON_Delete(head);
 8002750:	6978      	ldr	r0, [r7, #20]
 8002752:	f7fe fcb1 	bl	80010b8 <cJSON_Delete>
    }

    return false;
 8002756:	2300      	movs	r3, #0
}
 8002758:	4618      	mov	r0, r3
 800275a:	3718      	adds	r7, #24
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}

08002760 <print_array>:

/* Render an array to text */
static cJSON_bool print_array(const cJSON * const item, printbuffer * const output_buffer)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b086      	sub	sp, #24
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
 8002768:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 800276a:	2300      	movs	r3, #0
 800276c:	617b      	str	r3, [r7, #20]
    size_t length = 0;
 800276e:	2300      	movs	r3, #0
 8002770:	60fb      	str	r3, [r7, #12]
    cJSON *current_element = item->child;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	613b      	str	r3, [r7, #16]

    if (output_buffer == NULL)
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d101      	bne.n	8002782 <print_array+0x22>
    {
        return false;
 800277e:	2300      	movs	r3, #0
 8002780:	e070      	b.n	8002864 <print_array+0x104>
    }

    /* Compose the output array. */
    /* opening square bracket */
    output_pointer = ensure(output_buffer, 1);
 8002782:	2101      	movs	r1, #1
 8002784:	6838      	ldr	r0, [r7, #0]
 8002786:	f7fe fdbb 	bl	8001300 <ensure>
 800278a:	6178      	str	r0, [r7, #20]
    if (output_pointer == NULL)
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d101      	bne.n	8002796 <print_array+0x36>
    {
        return false;
 8002792:	2300      	movs	r3, #0
 8002794:	e066      	b.n	8002864 <print_array+0x104>
    }

    *output_pointer = '[';
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	225b      	movs	r2, #91	@ 0x5b
 800279a:	701a      	strb	r2, [r3, #0]
    output_buffer->offset++;
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	1c5a      	adds	r2, r3, #1
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	609a      	str	r2, [r3, #8]
    output_buffer->depth++;
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	68db      	ldr	r3, [r3, #12]
 80027aa:	1c5a      	adds	r2, r3, #1
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	60da      	str	r2, [r3, #12]

    while (current_element != NULL)
 80027b0:	e03d      	b.n	800282e <print_array+0xce>
    {
        if (!print_value(current_element, output_buffer))
 80027b2:	6839      	ldr	r1, [r7, #0]
 80027b4:	6938      	ldr	r0, [r7, #16]
 80027b6:	f7ff fe2b 	bl	8002410 <print_value>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d101      	bne.n	80027c4 <print_array+0x64>
        {
            return false;
 80027c0:	2300      	movs	r3, #0
 80027c2:	e04f      	b.n	8002864 <print_array+0x104>
        }
        update_offset(output_buffer);
 80027c4:	6838      	ldr	r0, [r7, #0]
 80027c6:	f7fe fe35 	bl	8001434 <update_offset>
        if (current_element->next)
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d02a      	beq.n	8002828 <print_array+0xc8>
        {
            length = (size_t) (output_buffer->format ? 2 : 1);
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	695b      	ldr	r3, [r3, #20]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d001      	beq.n	80027de <print_array+0x7e>
 80027da:	2302      	movs	r3, #2
 80027dc:	e000      	b.n	80027e0 <print_array+0x80>
 80027de:	2301      	movs	r3, #1
 80027e0:	60fb      	str	r3, [r7, #12]
            output_pointer = ensure(output_buffer, length + 1);
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	3301      	adds	r3, #1
 80027e6:	4619      	mov	r1, r3
 80027e8:	6838      	ldr	r0, [r7, #0]
 80027ea:	f7fe fd89 	bl	8001300 <ensure>
 80027ee:	6178      	str	r0, [r7, #20]
            if (output_pointer == NULL)
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d101      	bne.n	80027fa <print_array+0x9a>
            {
                return false;
 80027f6:	2300      	movs	r3, #0
 80027f8:	e034      	b.n	8002864 <print_array+0x104>
            }
            *output_pointer++ = ',';
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	1c5a      	adds	r2, r3, #1
 80027fe:	617a      	str	r2, [r7, #20]
 8002800:	222c      	movs	r2, #44	@ 0x2c
 8002802:	701a      	strb	r2, [r3, #0]
            if(output_buffer->format)
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	695b      	ldr	r3, [r3, #20]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d004      	beq.n	8002816 <print_array+0xb6>
            {
                *output_pointer++ = ' ';
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	1c5a      	adds	r2, r3, #1
 8002810:	617a      	str	r2, [r7, #20]
 8002812:	2220      	movs	r2, #32
 8002814:	701a      	strb	r2, [r3, #0]
            }
            *output_pointer = '\0';
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	2200      	movs	r2, #0
 800281a:	701a      	strb	r2, [r3, #0]
            output_buffer->offset += length;
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	689a      	ldr	r2, [r3, #8]
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	441a      	add	r2, r3
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	609a      	str	r2, [r3, #8]
        }
        current_element = current_element->next;
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	613b      	str	r3, [r7, #16]
    while (current_element != NULL)
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d1be      	bne.n	80027b2 <print_array+0x52>
    }

    output_pointer = ensure(output_buffer, 2);
 8002834:	2102      	movs	r1, #2
 8002836:	6838      	ldr	r0, [r7, #0]
 8002838:	f7fe fd62 	bl	8001300 <ensure>
 800283c:	6178      	str	r0, [r7, #20]
    if (output_pointer == NULL)
 800283e:	697b      	ldr	r3, [r7, #20]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d101      	bne.n	8002848 <print_array+0xe8>
    {
        return false;
 8002844:	2300      	movs	r3, #0
 8002846:	e00d      	b.n	8002864 <print_array+0x104>
    }
    *output_pointer++ = ']';
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	1c5a      	adds	r2, r3, #1
 800284c:	617a      	str	r2, [r7, #20]
 800284e:	225d      	movs	r2, #93	@ 0x5d
 8002850:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	2200      	movs	r2, #0
 8002856:	701a      	strb	r2, [r3, #0]
    output_buffer->depth--;
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	1e5a      	subs	r2, r3, #1
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	60da      	str	r2, [r3, #12]

    return true;
 8002862:	2301      	movs	r3, #1
}
 8002864:	4618      	mov	r0, r3
 8002866:	3718      	adds	r7, #24
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}

0800286c <parse_object>:

/* Build an object from the text. */
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b086      	sub	sp, #24
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
 8002874:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* linked list head */
 8002876:	2300      	movs	r3, #0
 8002878:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 800287a:	2300      	movs	r3, #0
 800287c:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	68db      	ldr	r3, [r3, #12]
 8002882:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002886:	d301      	bcc.n	800288c <parse_object+0x20>
    {
        return false; /* to deeply nested */
 8002888:	2300      	movs	r3, #0
 800288a:	e0f7      	b.n	8002a7c <parse_object+0x210>
    }
    input_buffer->depth++;
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	68db      	ldr	r3, [r3, #12]
 8002890:	1c5a      	adds	r2, r3, #1
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	60da      	str	r2, [r3, #12]

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '{'))
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	2b00      	cmp	r3, #0
 800289a:	f000 80db 	beq.w	8002a54 <parse_object+0x1e8>
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	689a      	ldr	r2, [r3, #8]
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	429a      	cmp	r2, r3
 80028a8:	f080 80d4 	bcs.w	8002a54 <parse_object+0x1e8>
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	4413      	add	r3, r2
 80028b6:	781b      	ldrb	r3, [r3, #0]
 80028b8:	2b7b      	cmp	r3, #123	@ 0x7b
 80028ba:	f040 80cb 	bne.w	8002a54 <parse_object+0x1e8>
    {
        goto fail; /* not an object */
    }

    input_buffer->offset++;
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	1c5a      	adds	r2, r3, #1
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 80028c8:	6838      	ldr	r0, [r7, #0]
 80028ca:	f7ff fae3 	bl	8001e94 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '}'))
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d00e      	beq.n	80028f2 <parse_object+0x86>
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	689a      	ldr	r2, [r3, #8]
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	429a      	cmp	r2, r3
 80028de:	d208      	bcs.n	80028f2 <parse_object+0x86>
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	4413      	add	r3, r2
 80028ea:	781b      	ldrb	r3, [r3, #0]
 80028ec:	2b7d      	cmp	r3, #125	@ 0x7d
 80028ee:	f000 8098 	beq.w	8002a22 <parse_object+0x1b6>
    {
        goto success; /* empty object */
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d005      	beq.n	8002904 <parse_object+0x98>
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	689a      	ldr	r2, [r3, #8]
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	429a      	cmp	r2, r3
 8002902:	d305      	bcc.n	8002910 <parse_object+0xa4>
    {
        input_buffer->offset--;
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	689b      	ldr	r3, [r3, #8]
 8002908:	1e5a      	subs	r2, r3, #1
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	609a      	str	r2, [r3, #8]
        goto fail;
 800290e:	e0ae      	b.n	8002a6e <parse_object+0x202>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	689b      	ldr	r3, [r3, #8]
 8002914:	1e5a      	subs	r2, r3, #1
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	3310      	adds	r3, #16
 800291e:	4618      	mov	r0, r3
 8002920:	f7fe fbb4 	bl	800108c <cJSON_New_Item>
 8002924:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2b00      	cmp	r3, #0
 800292a:	f000 8095 	beq.w	8002a58 <parse_object+0x1ec>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d104      	bne.n	800293e <parse_object+0xd2>
        {
            /* start the linked list */
            current_item = head = new_item;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	617b      	str	r3, [r7, #20]
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	613b      	str	r3, [r7, #16]
 800293c:	e007      	b.n	800294e <parse_object+0xe2>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	68fa      	ldr	r2, [r7, #12]
 8002942:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	693a      	ldr	r2, [r7, #16]
 8002948:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	613b      	str	r3, [r7, #16]
        }

        if (cannot_access_at_index(input_buffer, 1))
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	2b00      	cmp	r3, #0
 8002952:	f000 8083 	beq.w	8002a5c <parse_object+0x1f0>
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	689b      	ldr	r3, [r3, #8]
 800295a:	1c5a      	adds	r2, r3, #1
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	429a      	cmp	r2, r3
 8002962:	d27b      	bcs.n	8002a5c <parse_object+0x1f0>
        {
            goto fail; /* nothing comes after the comma */
        }

        /* parse the name of the child */
        input_buffer->offset++;
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	1c5a      	adds	r2, r3, #1
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 800296e:	6838      	ldr	r0, [r7, #0]
 8002970:	f7ff fa90 	bl	8001e94 <buffer_skip_whitespace>
        if (!parse_string(current_item, input_buffer))
 8002974:	6839      	ldr	r1, [r7, #0]
 8002976:	6938      	ldr	r0, [r7, #16]
 8002978:	f7ff f804 	bl	8001984 <parse_string>
 800297c:	4603      	mov	r3, r0
 800297e:	2b00      	cmp	r3, #0
 8002980:	d06e      	beq.n	8002a60 <parse_object+0x1f4>
        {
            goto fail; /* failed to parse name */
        }
        buffer_skip_whitespace(input_buffer);
 8002982:	6838      	ldr	r0, [r7, #0]
 8002984:	f7ff fa86 	bl	8001e94 <buffer_skip_whitespace>

        /* swap valuestring and string, because we parsed the name */
        current_item->string = current_item->valuestring;
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	691a      	ldr	r2, [r3, #16]
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	621a      	str	r2, [r3, #32]
        current_item->valuestring = NULL;
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	2200      	movs	r2, #0
 8002994:	611a      	str	r2, [r3, #16]

        if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != ':'))
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d063      	beq.n	8002a64 <parse_object+0x1f8>
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	689a      	ldr	r2, [r3, #8]
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	429a      	cmp	r2, r3
 80029a6:	d25d      	bcs.n	8002a64 <parse_object+0x1f8>
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	4413      	add	r3, r2
 80029b2:	781b      	ldrb	r3, [r3, #0]
 80029b4:	2b3a      	cmp	r3, #58	@ 0x3a
 80029b6:	d155      	bne.n	8002a64 <parse_object+0x1f8>
        {
            goto fail; /* invalid object */
        }

        /* parse the value */
        input_buffer->offset++;
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	1c5a      	adds	r2, r3, #1
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 80029c2:	6838      	ldr	r0, [r7, #0]
 80029c4:	f7ff fa66 	bl	8001e94 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 80029c8:	6839      	ldr	r1, [r7, #0]
 80029ca:	6938      	ldr	r0, [r7, #16]
 80029cc:	f7ff fc34 	bl	8002238 <parse_value>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d048      	beq.n	8002a68 <parse_object+0x1fc>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 80029d6:	6838      	ldr	r0, [r7, #0]
 80029d8:	f7ff fa5c 	bl	8001e94 <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d00d      	beq.n	80029fe <parse_object+0x192>
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	689a      	ldr	r2, [r3, #8]
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	429a      	cmp	r2, r3
 80029ec:	d207      	bcs.n	80029fe <parse_object+0x192>
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	4413      	add	r3, r2
 80029f8:	781b      	ldrb	r3, [r3, #0]
 80029fa:	2b2c      	cmp	r3, #44	@ 0x2c
 80029fc:	d08d      	beq.n	800291a <parse_object+0xae>

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '}'))
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d033      	beq.n	8002a6c <parse_object+0x200>
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	689a      	ldr	r2, [r3, #8]
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d22d      	bcs.n	8002a6c <parse_object+0x200>
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	4413      	add	r3, r2
 8002a1a:	781b      	ldrb	r3, [r3, #0]
 8002a1c:	2b7d      	cmp	r3, #125	@ 0x7d
 8002a1e:	d125      	bne.n	8002a6c <parse_object+0x200>
    {
        goto fail; /* expected end of object */
    }

success:
 8002a20:	e000      	b.n	8002a24 <parse_object+0x1b8>
        goto success; /* empty object */
 8002a22:	bf00      	nop
    input_buffer->depth--;
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	68db      	ldr	r3, [r3, #12]
 8002a28:	1e5a      	subs	r2, r3, #1
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d002      	beq.n	8002a3a <parse_object+0x1ce>
        head->prev = current_item;
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	693a      	ldr	r2, [r7, #16]
 8002a38:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Object;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2240      	movs	r2, #64	@ 0x40
 8002a3e:	60da      	str	r2, [r3, #12]
    item->child = head;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	697a      	ldr	r2, [r7, #20]
 8002a44:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	1c5a      	adds	r2, r3, #1
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	609a      	str	r2, [r3, #8]
    return true;
 8002a50:	2301      	movs	r3, #1
 8002a52:	e013      	b.n	8002a7c <parse_object+0x210>
        goto fail; /* not an object */
 8002a54:	bf00      	nop
 8002a56:	e00a      	b.n	8002a6e <parse_object+0x202>
            goto fail; /* allocation failure */
 8002a58:	bf00      	nop
 8002a5a:	e008      	b.n	8002a6e <parse_object+0x202>
            goto fail; /* nothing comes after the comma */
 8002a5c:	bf00      	nop
 8002a5e:	e006      	b.n	8002a6e <parse_object+0x202>
            goto fail; /* failed to parse name */
 8002a60:	bf00      	nop
 8002a62:	e004      	b.n	8002a6e <parse_object+0x202>
            goto fail; /* invalid object */
 8002a64:	bf00      	nop
 8002a66:	e002      	b.n	8002a6e <parse_object+0x202>
            goto fail; /* failed to parse value */
 8002a68:	bf00      	nop
 8002a6a:	e000      	b.n	8002a6e <parse_object+0x202>
        goto fail; /* expected end of object */
 8002a6c:	bf00      	nop

fail:
    if (head != NULL)
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d002      	beq.n	8002a7a <parse_object+0x20e>
    {
        cJSON_Delete(head);
 8002a74:	6978      	ldr	r0, [r7, #20]
 8002a76:	f7fe fb1f 	bl	80010b8 <cJSON_Delete>
    }

    return false;
 8002a7a:	2300      	movs	r3, #0
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	3718      	adds	r7, #24
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}

08002a84 <print_object>:

/* Render an object to text. */
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b088      	sub	sp, #32
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
 8002a8c:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	61fb      	str	r3, [r7, #28]
    size_t length = 0;
 8002a92:	2300      	movs	r3, #0
 8002a94:	60fb      	str	r3, [r7, #12]
    cJSON *current_item = item->child;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	61bb      	str	r3, [r7, #24]

    if (output_buffer == NULL)
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d101      	bne.n	8002aa6 <print_object+0x22>
    {
        return false;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	e108      	b.n	8002cb8 <print_object+0x234>
    }

    /* Compose the output: */
    length = (size_t) (output_buffer->format ? 2 : 1); /* fmt: {\n */
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	695b      	ldr	r3, [r3, #20]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d001      	beq.n	8002ab2 <print_object+0x2e>
 8002aae:	2302      	movs	r3, #2
 8002ab0:	e000      	b.n	8002ab4 <print_object+0x30>
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	60fb      	str	r3, [r7, #12]
    output_pointer = ensure(output_buffer, length + 1);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	3301      	adds	r3, #1
 8002aba:	4619      	mov	r1, r3
 8002abc:	6838      	ldr	r0, [r7, #0]
 8002abe:	f7fe fc1f 	bl	8001300 <ensure>
 8002ac2:	61f8      	str	r0, [r7, #28]
    if (output_pointer == NULL)
 8002ac4:	69fb      	ldr	r3, [r7, #28]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d101      	bne.n	8002ace <print_object+0x4a>
    {
        return false;
 8002aca:	2300      	movs	r3, #0
 8002acc:	e0f4      	b.n	8002cb8 <print_object+0x234>
    }

    *output_pointer++ = '{';
 8002ace:	69fb      	ldr	r3, [r7, #28]
 8002ad0:	1c5a      	adds	r2, r3, #1
 8002ad2:	61fa      	str	r2, [r7, #28]
 8002ad4:	227b      	movs	r2, #123	@ 0x7b
 8002ad6:	701a      	strb	r2, [r3, #0]
    output_buffer->depth++;
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	68db      	ldr	r3, [r3, #12]
 8002adc:	1c5a      	adds	r2, r3, #1
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	60da      	str	r2, [r3, #12]
    if (output_buffer->format)
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	695b      	ldr	r3, [r3, #20]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d004      	beq.n	8002af4 <print_object+0x70>
    {
        *output_pointer++ = '\n';
 8002aea:	69fb      	ldr	r3, [r7, #28]
 8002aec:	1c5a      	adds	r2, r3, #1
 8002aee:	61fa      	str	r2, [r7, #28]
 8002af0:	220a      	movs	r2, #10
 8002af2:	701a      	strb	r2, [r3, #0]
    }
    output_buffer->offset += length;
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	689a      	ldr	r2, [r3, #8]
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	441a      	add	r2, r3
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	609a      	str	r2, [r3, #8]

    while (current_item)
 8002b00:	e0a0      	b.n	8002c44 <print_object+0x1c0>
    {
        if (output_buffer->format)
 8002b02:	683b      	ldr	r3, [r7, #0]
 8002b04:	695b      	ldr	r3, [r3, #20]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d022      	beq.n	8002b50 <print_object+0xcc>
        {
            size_t i;
            output_pointer = ensure(output_buffer, output_buffer->depth);
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	68db      	ldr	r3, [r3, #12]
 8002b0e:	4619      	mov	r1, r3
 8002b10:	6838      	ldr	r0, [r7, #0]
 8002b12:	f7fe fbf5 	bl	8001300 <ensure>
 8002b16:	61f8      	str	r0, [r7, #28]
            if (output_pointer == NULL)
 8002b18:	69fb      	ldr	r3, [r7, #28]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d101      	bne.n	8002b22 <print_object+0x9e>
            {
                return false;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	e0ca      	b.n	8002cb8 <print_object+0x234>
            }
            for (i = 0; i < output_buffer->depth; i++)
 8002b22:	2300      	movs	r3, #0
 8002b24:	617b      	str	r3, [r7, #20]
 8002b26:	e007      	b.n	8002b38 <print_object+0xb4>
            {
                *output_pointer++ = '\t';
 8002b28:	69fb      	ldr	r3, [r7, #28]
 8002b2a:	1c5a      	adds	r2, r3, #1
 8002b2c:	61fa      	str	r2, [r7, #28]
 8002b2e:	2209      	movs	r2, #9
 8002b30:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < output_buffer->depth; i++)
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	3301      	adds	r3, #1
 8002b36:	617b      	str	r3, [r7, #20]
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	68db      	ldr	r3, [r3, #12]
 8002b3c:	697a      	ldr	r2, [r7, #20]
 8002b3e:	429a      	cmp	r2, r3
 8002b40:	d3f2      	bcc.n	8002b28 <print_object+0xa4>
            }
            output_buffer->offset += output_buffer->depth;
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	689a      	ldr	r2, [r3, #8]
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	68db      	ldr	r3, [r3, #12]
 8002b4a:	441a      	add	r2, r3
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	609a      	str	r2, [r3, #8]
        }

        /* print key */
        if (!print_string_ptr((unsigned char*)current_item->string, output_buffer))
 8002b50:	69bb      	ldr	r3, [r7, #24]
 8002b52:	6a1b      	ldr	r3, [r3, #32]
 8002b54:	6839      	ldr	r1, [r7, #0]
 8002b56:	4618      	mov	r0, r3
 8002b58:	f7ff f85c 	bl	8001c14 <print_string_ptr>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d101      	bne.n	8002b66 <print_object+0xe2>
        {
            return false;
 8002b62:	2300      	movs	r3, #0
 8002b64:	e0a8      	b.n	8002cb8 <print_object+0x234>
        }
        update_offset(output_buffer);
 8002b66:	6838      	ldr	r0, [r7, #0]
 8002b68:	f7fe fc64 	bl	8001434 <update_offset>

        length = (size_t) (output_buffer->format ? 2 : 1);
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	695b      	ldr	r3, [r3, #20]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d001      	beq.n	8002b78 <print_object+0xf4>
 8002b74:	2302      	movs	r3, #2
 8002b76:	e000      	b.n	8002b7a <print_object+0xf6>
 8002b78:	2301      	movs	r3, #1
 8002b7a:	60fb      	str	r3, [r7, #12]
        output_pointer = ensure(output_buffer, length);
 8002b7c:	68f9      	ldr	r1, [r7, #12]
 8002b7e:	6838      	ldr	r0, [r7, #0]
 8002b80:	f7fe fbbe 	bl	8001300 <ensure>
 8002b84:	61f8      	str	r0, [r7, #28]
        if (output_pointer == NULL)
 8002b86:	69fb      	ldr	r3, [r7, #28]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d101      	bne.n	8002b90 <print_object+0x10c>
        {
            return false;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	e093      	b.n	8002cb8 <print_object+0x234>
        }
        *output_pointer++ = ':';
 8002b90:	69fb      	ldr	r3, [r7, #28]
 8002b92:	1c5a      	adds	r2, r3, #1
 8002b94:	61fa      	str	r2, [r7, #28]
 8002b96:	223a      	movs	r2, #58	@ 0x3a
 8002b98:	701a      	strb	r2, [r3, #0]
        if (output_buffer->format)
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	695b      	ldr	r3, [r3, #20]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d004      	beq.n	8002bac <print_object+0x128>
        {
            *output_pointer++ = '\t';
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	1c5a      	adds	r2, r3, #1
 8002ba6:	61fa      	str	r2, [r7, #28]
 8002ba8:	2209      	movs	r2, #9
 8002baa:	701a      	strb	r2, [r3, #0]
        }
        output_buffer->offset += length;
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	689a      	ldr	r2, [r3, #8]
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	441a      	add	r2, r3
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	609a      	str	r2, [r3, #8]

        /* print value */
        if (!print_value(current_item, output_buffer))
 8002bb8:	6839      	ldr	r1, [r7, #0]
 8002bba:	69b8      	ldr	r0, [r7, #24]
 8002bbc:	f7ff fc28 	bl	8002410 <print_value>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d101      	bne.n	8002bca <print_object+0x146>
        {
            return false;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	e076      	b.n	8002cb8 <print_object+0x234>
        }
        update_offset(output_buffer);
 8002bca:	6838      	ldr	r0, [r7, #0]
 8002bcc:	f7fe fc32 	bl	8001434 <update_offset>

        /* print comma if not last */
        length = ((size_t)(output_buffer->format ? 1 : 0) + (size_t)(current_item->next ? 1 : 0));
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	695b      	ldr	r3, [r3, #20]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d001      	beq.n	8002bdc <print_object+0x158>
 8002bd8:	2201      	movs	r2, #1
 8002bda:	e000      	b.n	8002bde <print_object+0x15a>
 8002bdc:	2200      	movs	r2, #0
 8002bde:	69bb      	ldr	r3, [r7, #24]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d001      	beq.n	8002bea <print_object+0x166>
 8002be6:	2301      	movs	r3, #1
 8002be8:	e000      	b.n	8002bec <print_object+0x168>
 8002bea:	2300      	movs	r3, #0
 8002bec:	4413      	add	r3, r2
 8002bee:	60fb      	str	r3, [r7, #12]
        output_pointer = ensure(output_buffer, length + 1);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	3301      	adds	r3, #1
 8002bf4:	4619      	mov	r1, r3
 8002bf6:	6838      	ldr	r0, [r7, #0]
 8002bf8:	f7fe fb82 	bl	8001300 <ensure>
 8002bfc:	61f8      	str	r0, [r7, #28]
        if (output_pointer == NULL)
 8002bfe:	69fb      	ldr	r3, [r7, #28]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d101      	bne.n	8002c08 <print_object+0x184>
        {
            return false;
 8002c04:	2300      	movs	r3, #0
 8002c06:	e057      	b.n	8002cb8 <print_object+0x234>
        }
        if (current_item->next)
 8002c08:	69bb      	ldr	r3, [r7, #24]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d004      	beq.n	8002c1a <print_object+0x196>
        {
            *output_pointer++ = ',';
 8002c10:	69fb      	ldr	r3, [r7, #28]
 8002c12:	1c5a      	adds	r2, r3, #1
 8002c14:	61fa      	str	r2, [r7, #28]
 8002c16:	222c      	movs	r2, #44	@ 0x2c
 8002c18:	701a      	strb	r2, [r3, #0]
        }

        if (output_buffer->format)
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	695b      	ldr	r3, [r3, #20]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d004      	beq.n	8002c2c <print_object+0x1a8>
        {
            *output_pointer++ = '\n';
 8002c22:	69fb      	ldr	r3, [r7, #28]
 8002c24:	1c5a      	adds	r2, r3, #1
 8002c26:	61fa      	str	r2, [r7, #28]
 8002c28:	220a      	movs	r2, #10
 8002c2a:	701a      	strb	r2, [r3, #0]
        }
        *output_pointer = '\0';
 8002c2c:	69fb      	ldr	r3, [r7, #28]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	701a      	strb	r2, [r3, #0]
        output_buffer->offset += length;
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	689a      	ldr	r2, [r3, #8]
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	441a      	add	r2, r3
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	609a      	str	r2, [r3, #8]

        current_item = current_item->next;
 8002c3e:	69bb      	ldr	r3, [r7, #24]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	61bb      	str	r3, [r7, #24]
    while (current_item)
 8002c44:	69bb      	ldr	r3, [r7, #24]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	f47f af5b 	bne.w	8002b02 <print_object+0x7e>
    }

    output_pointer = ensure(output_buffer, output_buffer->format ? (output_buffer->depth + 1) : 2);
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	695b      	ldr	r3, [r3, #20]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d003      	beq.n	8002c5c <print_object+0x1d8>
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	68db      	ldr	r3, [r3, #12]
 8002c58:	3301      	adds	r3, #1
 8002c5a:	e000      	b.n	8002c5e <print_object+0x1da>
 8002c5c:	2302      	movs	r3, #2
 8002c5e:	4619      	mov	r1, r3
 8002c60:	6838      	ldr	r0, [r7, #0]
 8002c62:	f7fe fb4d 	bl	8001300 <ensure>
 8002c66:	61f8      	str	r0, [r7, #28]
    if (output_pointer == NULL)
 8002c68:	69fb      	ldr	r3, [r7, #28]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d101      	bne.n	8002c72 <print_object+0x1ee>
    {
        return false;
 8002c6e:	2300      	movs	r3, #0
 8002c70:	e022      	b.n	8002cb8 <print_object+0x234>
    }
    if (output_buffer->format)
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	695b      	ldr	r3, [r3, #20]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d010      	beq.n	8002c9c <print_object+0x218>
    {
        size_t i;
        for (i = 0; i < (output_buffer->depth - 1); i++)
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	613b      	str	r3, [r7, #16]
 8002c7e:	e007      	b.n	8002c90 <print_object+0x20c>
        {
            *output_pointer++ = '\t';
 8002c80:	69fb      	ldr	r3, [r7, #28]
 8002c82:	1c5a      	adds	r2, r3, #1
 8002c84:	61fa      	str	r2, [r7, #28]
 8002c86:	2209      	movs	r2, #9
 8002c88:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < (output_buffer->depth - 1); i++)
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	3301      	adds	r3, #1
 8002c8e:	613b      	str	r3, [r7, #16]
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	3b01      	subs	r3, #1
 8002c96:	693a      	ldr	r2, [r7, #16]
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d3f1      	bcc.n	8002c80 <print_object+0x1fc>
        }
    }
    *output_pointer++ = '}';
 8002c9c:	69fb      	ldr	r3, [r7, #28]
 8002c9e:	1c5a      	adds	r2, r3, #1
 8002ca0:	61fa      	str	r2, [r7, #28]
 8002ca2:	227d      	movs	r2, #125	@ 0x7d
 8002ca4:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
 8002ca6:	69fb      	ldr	r3, [r7, #28]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	701a      	strb	r2, [r3, #0]
    output_buffer->depth--;
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	68db      	ldr	r3, [r3, #12]
 8002cb0:	1e5a      	subs	r2, r3, #1
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	60da      	str	r2, [r3, #12]

    return true;
 8002cb6:	2301      	movs	r3, #1
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	3720      	adds	r7, #32
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}

08002cc0 <get_object_item>:

    return get_array_item(array, (size_t)index);
}

static cJSON *get_object_item(const cJSON * const object, const char * const name, const cJSON_bool case_sensitive)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b086      	sub	sp, #24
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	60f8      	str	r0, [r7, #12]
 8002cc8:	60b9      	str	r1, [r7, #8]
 8002cca:	607a      	str	r2, [r7, #4]
    cJSON *current_element = NULL;
 8002ccc:	2300      	movs	r3, #0
 8002cce:	617b      	str	r3, [r7, #20]

    if ((object == NULL) || (name == NULL))
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d002      	beq.n	8002cdc <get_object_item+0x1c>
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d101      	bne.n	8002ce0 <get_object_item+0x20>
    {
        return NULL;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	e033      	b.n	8002d48 <get_object_item+0x88>
    }

    current_element = object->child;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	617b      	str	r3, [r7, #20]
    if (case_sensitive)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d017      	beq.n	8002d1c <get_object_item+0x5c>
    {
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 8002cec:	e002      	b.n	8002cf4 <get_object_item+0x34>
        {
            current_element = current_element->next;
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d01c      	beq.n	8002d34 <get_object_item+0x74>
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	6a1b      	ldr	r3, [r3, #32]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d018      	beq.n	8002d34 <get_object_item+0x74>
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	6a1b      	ldr	r3, [r3, #32]
 8002d06:	4619      	mov	r1, r3
 8002d08:	68b8      	ldr	r0, [r7, #8]
 8002d0a:	f7fd fa31 	bl	8000170 <strcmp>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d1ec      	bne.n	8002cee <get_object_item+0x2e>
 8002d14:	e00e      	b.n	8002d34 <get_object_item+0x74>
    }
    else
    {
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
        {
            current_element = current_element->next;
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d008      	beq.n	8002d34 <get_object_item+0x74>
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	6a1b      	ldr	r3, [r3, #32]
 8002d26:	4619      	mov	r1, r3
 8002d28:	68b8      	ldr	r0, [r7, #8]
 8002d2a:	f7fe f91b 	bl	8000f64 <case_insensitive_strcmp>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d1f0      	bne.n	8002d16 <get_object_item+0x56>
        }
    }

    if ((current_element == NULL) || (current_element->string == NULL)) {
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d003      	beq.n	8002d42 <get_object_item+0x82>
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	6a1b      	ldr	r3, [r3, #32]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d101      	bne.n	8002d46 <get_object_item+0x86>
        return NULL;
 8002d42:	2300      	movs	r3, #0
 8002d44:	e000      	b.n	8002d48 <get_object_item+0x88>
    }

    return current_element;
 8002d46:	697b      	ldr	r3, [r7, #20]
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3718      	adds	r7, #24
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}

08002d50 <cJSON_GetObjectItem>:

CJSON_PUBLIC(cJSON *) cJSON_GetObjectItem(const cJSON * const object, const char * const string)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b082      	sub	sp, #8
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
 8002d58:	6039      	str	r1, [r7, #0]
    return get_object_item(object, string, false);
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	6839      	ldr	r1, [r7, #0]
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f7ff ffae 	bl	8002cc0 <get_object_item>
 8002d64:	4603      	mov	r3, r0
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3708      	adds	r7, #8
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}

08002d6e <suffix_object>:
    return cJSON_GetObjectItem(object, string) ? 1 : 0;
}

/* Utility for array list handling. */
static void suffix_object(cJSON *prev, cJSON *item)
{
 8002d6e:	b480      	push	{r7}
 8002d70:	b083      	sub	sp, #12
 8002d72:	af00      	add	r7, sp, #0
 8002d74:	6078      	str	r0, [r7, #4]
 8002d76:	6039      	str	r1, [r7, #0]
    prev->next = item;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	683a      	ldr	r2, [r7, #0]
 8002d7c:	601a      	str	r2, [r3, #0]
    item->prev = prev;
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	687a      	ldr	r2, [r7, #4]
 8002d82:	605a      	str	r2, [r3, #4]
}
 8002d84:	bf00      	nop
 8002d86:	370c      	adds	r7, #12
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bc80      	pop	{r7}
 8002d8c:	4770      	bx	lr

08002d8e <add_item_to_array>:
    reference->next = reference->prev = NULL;
    return reference;
}

static cJSON_bool add_item_to_array(cJSON *array, cJSON *item)
{
 8002d8e:	b580      	push	{r7, lr}
 8002d90:	b084      	sub	sp, #16
 8002d92:	af00      	add	r7, sp, #0
 8002d94:	6078      	str	r0, [r7, #4]
 8002d96:	6039      	str	r1, [r7, #0]
    cJSON *child = NULL;
 8002d98:	2300      	movs	r3, #0
 8002d9a:	60fb      	str	r3, [r7, #12]

    if ((item == NULL) || (array == NULL) || (array == item))
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d006      	beq.n	8002db0 <add_item_to_array+0x22>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d003      	beq.n	8002db0 <add_item_to_array+0x22>
 8002da8:	687a      	ldr	r2, [r7, #4]
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d101      	bne.n	8002db4 <add_item_to_array+0x26>
    {
        return false;
 8002db0:	2300      	movs	r3, #0
 8002db2:	e01e      	b.n	8002df2 <add_item_to_array+0x64>
    }

    child = array->child;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	60fb      	str	r3, [r7, #12]
    /*
     * To find the last item in array quickly, we use prev in array
     */
    if (child == NULL)
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d109      	bne.n	8002dd4 <add_item_to_array+0x46>
    {
        /* list is empty, start new one */
        array->child = item;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	683a      	ldr	r2, [r7, #0]
 8002dc4:	609a      	str	r2, [r3, #8]
        item->prev = item;
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	683a      	ldr	r2, [r7, #0]
 8002dca:	605a      	str	r2, [r3, #4]
        item->next = NULL;
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	601a      	str	r2, [r3, #0]
 8002dd2:	e00d      	b.n	8002df0 <add_item_to_array+0x62>
    }
    else
    {
        /* append to the end */
        if (child->prev)
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d009      	beq.n	8002df0 <add_item_to_array+0x62>
        {
            suffix_object(child->prev, item);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	6839      	ldr	r1, [r7, #0]
 8002de2:	4618      	mov	r0, r3
 8002de4:	f7ff ffc3 	bl	8002d6e <suffix_object>
            array->child->prev = item;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	683a      	ldr	r2, [r7, #0]
 8002dee:	605a      	str	r2, [r3, #4]
        }
    }

    return true;
 8002df0:	2301      	movs	r3, #1
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3710      	adds	r7, #16
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}

08002dfa <cast_away_const>:
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wcast-qual"
#endif
/* helper function to cast away const */
static void* cast_away_const(const void* string)
{
 8002dfa:	b480      	push	{r7}
 8002dfc:	b083      	sub	sp, #12
 8002dfe:	af00      	add	r7, sp, #0
 8002e00:	6078      	str	r0, [r7, #4]
    return (void*)string;
 8002e02:	687b      	ldr	r3, [r7, #4]
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	370c      	adds	r7, #12
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bc80      	pop	{r7}
 8002e0c:	4770      	bx	lr

08002e0e <add_item_to_object>:
    #pragma GCC diagnostic pop
#endif


static cJSON_bool add_item_to_object(cJSON * const object, const char * const string, cJSON * const item, const internal_hooks * const hooks, const cJSON_bool constant_key)
{
 8002e0e:	b580      	push	{r7, lr}
 8002e10:	b086      	sub	sp, #24
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	60f8      	str	r0, [r7, #12]
 8002e16:	60b9      	str	r1, [r7, #8]
 8002e18:	607a      	str	r2, [r7, #4]
 8002e1a:	603b      	str	r3, [r7, #0]
    char *new_key = NULL;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	617b      	str	r3, [r7, #20]
    int new_type = cJSON_Invalid;
 8002e20:	2300      	movs	r3, #0
 8002e22:	613b      	str	r3, [r7, #16]

    if ((object == NULL) || (string == NULL) || (item == NULL) || (object == item))
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d009      	beq.n	8002e3e <add_item_to_object+0x30>
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d006      	beq.n	8002e3e <add_item_to_object+0x30>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d003      	beq.n	8002e3e <add_item_to_object+0x30>
 8002e36:	68fa      	ldr	r2, [r7, #12]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	429a      	cmp	r2, r3
 8002e3c:	d101      	bne.n	8002e42 <add_item_to_object+0x34>
    {
        return false;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	e036      	b.n	8002eb0 <add_item_to_object+0xa2>
    }

    if (constant_key)
 8002e42:	6a3b      	ldr	r3, [r7, #32]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d009      	beq.n	8002e5c <add_item_to_object+0x4e>
    {
        new_key = (char*)cast_away_const(string);
 8002e48:	68b8      	ldr	r0, [r7, #8]
 8002e4a:	f7ff ffd6 	bl	8002dfa <cast_away_const>
 8002e4e:	6178      	str	r0, [r7, #20]
        new_type = item->type | cJSON_StringIsConst;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	68db      	ldr	r3, [r3, #12]
 8002e54:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002e58:	613b      	str	r3, [r7, #16]
 8002e5a:	e00e      	b.n	8002e7a <add_item_to_object+0x6c>
    }
    else
    {
        new_key = (char*)cJSON_strdup((const unsigned char*)string, hooks);
 8002e5c:	6839      	ldr	r1, [r7, #0]
 8002e5e:	68b8      	ldr	r0, [r7, #8]
 8002e60:	f7fe f8ec 	bl	800103c <cJSON_strdup>
 8002e64:	6178      	str	r0, [r7, #20]
        if (new_key == NULL)
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d101      	bne.n	8002e70 <add_item_to_object+0x62>
        {
            return false;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	e01f      	b.n	8002eb0 <add_item_to_object+0xa2>
        }

        new_type = item->type & ~cJSON_StringIsConst;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	68db      	ldr	r3, [r3, #12]
 8002e74:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002e78:	613b      	str	r3, [r7, #16]
    }

    if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	68db      	ldr	r3, [r3, #12]
 8002e7e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d109      	bne.n	8002e9a <add_item_to_object+0x8c>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6a1b      	ldr	r3, [r3, #32]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d005      	beq.n	8002e9a <add_item_to_object+0x8c>
    {
        hooks->deallocate(item->string);
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	6a12      	ldr	r2, [r2, #32]
 8002e96:	4610      	mov	r0, r2
 8002e98:	4798      	blx	r3
    }

    item->string = new_key;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	697a      	ldr	r2, [r7, #20]
 8002e9e:	621a      	str	r2, [r3, #32]
    item->type = new_type;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	693a      	ldr	r2, [r7, #16]
 8002ea4:	60da      	str	r2, [r3, #12]

    return add_item_to_array(object, item);
 8002ea6:	6879      	ldr	r1, [r7, #4]
 8002ea8:	68f8      	ldr	r0, [r7, #12]
 8002eaa:	f7ff ff70 	bl	8002d8e <add_item_to_array>
 8002eae:	4603      	mov	r3, r0
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	3718      	adds	r7, #24
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}

08002eb8 <cJSON_AddStringToObject>:
    cJSON_Delete(number_item);
    return NULL;
}

CJSON_PUBLIC(cJSON*) cJSON_AddStringToObject(cJSON * const object, const char * const name, const char * const string)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b088      	sub	sp, #32
 8002ebc:	af02      	add	r7, sp, #8
 8002ebe:	60f8      	str	r0, [r7, #12]
 8002ec0:	60b9      	str	r1, [r7, #8]
 8002ec2:	607a      	str	r2, [r7, #4]
    cJSON *string_item = cJSON_CreateString(string);
 8002ec4:	6878      	ldr	r0, [r7, #4]
 8002ec6:	f000 f819 	bl	8002efc <cJSON_CreateString>
 8002eca:	6178      	str	r0, [r7, #20]
    if (add_item_to_object(object, name, string_item, &global_hooks, false))
 8002ecc:	2300      	movs	r3, #0
 8002ece:	9300      	str	r3, [sp, #0]
 8002ed0:	4b09      	ldr	r3, [pc, #36]	@ (8002ef8 <cJSON_AddStringToObject+0x40>)
 8002ed2:	697a      	ldr	r2, [r7, #20]
 8002ed4:	68b9      	ldr	r1, [r7, #8]
 8002ed6:	68f8      	ldr	r0, [r7, #12]
 8002ed8:	f7ff ff99 	bl	8002e0e <add_item_to_object>
 8002edc:	4603      	mov	r3, r0
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d001      	beq.n	8002ee6 <cJSON_AddStringToObject+0x2e>
    {
        return string_item;
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	e003      	b.n	8002eee <cJSON_AddStringToObject+0x36>
    }

    cJSON_Delete(string_item);
 8002ee6:	6978      	ldr	r0, [r7, #20]
 8002ee8:	f7fe f8e6 	bl	80010b8 <cJSON_Delete>
    return NULL;
 8002eec:	2300      	movs	r3, #0
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3718      	adds	r7, #24
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	20000000 	.word	0x20000000

08002efc <cJSON_CreateString>:

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateString(const char *string)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b084      	sub	sp, #16
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
    cJSON *item = cJSON_New_Item(&global_hooks);
 8002f04:	480f      	ldr	r0, [pc, #60]	@ (8002f44 <cJSON_CreateString+0x48>)
 8002f06:	f7fe f8c1 	bl	800108c <cJSON_New_Item>
 8002f0a:	60f8      	str	r0, [r7, #12]
    if(item)
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d012      	beq.n	8002f38 <cJSON_CreateString+0x3c>
    {
        item->type = cJSON_String;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2210      	movs	r2, #16
 8002f16:	60da      	str	r2, [r3, #12]
        item->valuestring = (char*)cJSON_strdup((const unsigned char*)string, &global_hooks);
 8002f18:	490a      	ldr	r1, [pc, #40]	@ (8002f44 <cJSON_CreateString+0x48>)
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f7fe f88e 	bl	800103c <cJSON_strdup>
 8002f20:	4602      	mov	r2, r0
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	611a      	str	r2, [r3, #16]
        if(!item->valuestring)
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	691b      	ldr	r3, [r3, #16]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d104      	bne.n	8002f38 <cJSON_CreateString+0x3c>
        {
            cJSON_Delete(item);
 8002f2e:	68f8      	ldr	r0, [r7, #12]
 8002f30:	f7fe f8c2 	bl	80010b8 <cJSON_Delete>
            return NULL;
 8002f34:	2300      	movs	r3, #0
 8002f36:	e000      	b.n	8002f3a <cJSON_CreateString+0x3e>
        }
    }

    return item;
 8002f38:	68fb      	ldr	r3, [r7, #12]
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3710      	adds	r7, #16
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	bf00      	nop
 8002f44:	20000000 	.word	0x20000000

08002f48 <cJSON_CreateObject>:

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateObject(void)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b082      	sub	sp, #8
 8002f4c:	af00      	add	r7, sp, #0
    cJSON *item = cJSON_New_Item(&global_hooks);
 8002f4e:	4807      	ldr	r0, [pc, #28]	@ (8002f6c <cJSON_CreateObject+0x24>)
 8002f50:	f7fe f89c 	bl	800108c <cJSON_New_Item>
 8002f54:	6078      	str	r0, [r7, #4]
    if (item)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d002      	beq.n	8002f62 <cJSON_CreateObject+0x1a>
    {
        item->type = cJSON_Object;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2240      	movs	r2, #64	@ 0x40
 8002f60:	60da      	str	r2, [r3, #12]
    }

    return item;
 8002f62:	687b      	ldr	r3, [r7, #4]
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	3708      	adds	r7, #8
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}
 8002f6c:	20000000 	.word	0x20000000

08002f70 <cJSON_IsString>:

    return (item->type & 0xFF) == cJSON_Number;
}

CJSON_PUBLIC(cJSON_bool) cJSON_IsString(const cJSON * const item)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b083      	sub	sp, #12
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
    if (item == NULL)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d101      	bne.n	8002f82 <cJSON_IsString+0x12>
    {
        return false;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	e007      	b.n	8002f92 <cJSON_IsString+0x22>
    }

    return (item->type & 0xFF) == cJSON_String;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	68db      	ldr	r3, [r3, #12]
 8002f86:	b2db      	uxtb	r3, r3
 8002f88:	2b10      	cmp	r3, #16
 8002f8a:	bf0c      	ite	eq
 8002f8c:	2301      	moveq	r3, #1
 8002f8e:	2300      	movne	r3, #0
 8002f90:	b2db      	uxtb	r3, r3
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	370c      	adds	r7, #12
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bc80      	pop	{r7}
 8002f9a:	4770      	bx	lr

08002f9c <ADC_init>:
 * 							Generic Functions
 * =======================================================================================
 */

// single conversion mode only
void ADC_init(ADC_Registers_t *ADCx) {
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b082      	sub	sp, #8
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]

	//1. Enable ADC clock
	if (ADCx == ADC1) {
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	4a11      	ldr	r2, [pc, #68]	@ (8002fec <ADC_init+0x50>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d104      	bne.n	8002fb6 <ADC_init+0x1a>
		RCC_CLK_EN(APB2_ID, ADC1_ID);
 8002fac:	2109      	movs	r1, #9
 8002fae:	2001      	movs	r0, #1
 8002fb0:	f000 fd86 	bl	8003ac0 <RCC_CLK_EN>
 8002fb4:	e010      	b.n	8002fd8 <ADC_init+0x3c>
	} else if (ADCx == ADC2) {
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	4a0d      	ldr	r2, [pc, #52]	@ (8002ff0 <ADC_init+0x54>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d104      	bne.n	8002fc8 <ADC_init+0x2c>
		RCC_CLK_EN(APB2_ID, ADC2_ID);
 8002fbe:	210a      	movs	r1, #10
 8002fc0:	2001      	movs	r0, #1
 8002fc2:	f000 fd7d 	bl	8003ac0 <RCC_CLK_EN>
 8002fc6:	e007      	b.n	8002fd8 <ADC_init+0x3c>
	} else if (ADCx == ADC3) {
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	4a0a      	ldr	r2, [pc, #40]	@ (8002ff4 <ADC_init+0x58>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d103      	bne.n	8002fd8 <ADC_init+0x3c>
		RCC_CLK_EN(APB2_ID, ADC3_ID);
 8002fd0:	210f      	movs	r1, #15
 8002fd2:	2001      	movs	r0, #1
 8002fd4:	f000 fd74 	bl	8003ac0 <RCC_CLK_EN>
	}

	    ADCx->CR2 |= (1 << 0); // Enable ADC (ADON bit)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	f043 0201 	orr.w	r2, r3, #1
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	609a      	str	r2, [r3, #8]


}
 8002fe4:	bf00      	nop
 8002fe6:	3708      	adds	r7, #8
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	bd80      	pop	{r7, pc}
 8002fec:	40012400 	.word	0x40012400
 8002ff0:	40012800 	.word	0x40012800
 8002ff4:	40013c00 	.word	0x40013c00

08002ff8 <ADC_read>:

uint16 ADC_read(ADC_Registers_t *ADCx, ADC_CHANNEL_t ADC_CHx) {
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b084      	sub	sp, #16
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
 8003000:	460b      	mov	r3, r1
 8003002:	70fb      	strb	r3, [r7, #3]
	GPIO_PinConfig_t GPIO_pinConfig;
	GPIO_pinConfig.MODE = MODE_Analog;
 8003004:	2300      	movs	r3, #0
 8003006:	73bb      	strb	r3, [r7, #14]
	 /*channels from 10 to 17*/
	    if (ADC_CHx > ADC_CH9)
 8003008:	78fb      	ldrb	r3, [r7, #3]
 800300a:	2b09      	cmp	r3, #9
 800300c:	d91e      	bls.n	800304c <ADC_read+0x54>
	    {
	        /* Clear the old channel sample time */
	    	ADCx->SMPR1 &= 0x7 << (3 * (ADC_CHx - 10));
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	68d9      	ldr	r1, [r3, #12]
 8003012:	78fb      	ldrb	r3, [r7, #3]
 8003014:	f1a3 020a 	sub.w	r2, r3, #10
 8003018:	4613      	mov	r3, r2
 800301a:	005b      	lsls	r3, r3, #1
 800301c:	4413      	add	r3, r2
 800301e:	2207      	movs	r2, #7
 8003020:	fa02 f303 	lsl.w	r3, r2, r3
 8003024:	ea01 0203 	and.w	r2, r1, r3
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	60da      	str	r2, [r3, #12]
	        /* Set the new channel sample time */
	        ADCx->SMPR1 |= (uint32)(0b11) << (3 * (ADC_CHx - 10));
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	68d9      	ldr	r1, [r3, #12]
 8003030:	78fb      	ldrb	r3, [r7, #3]
 8003032:	f1a3 020a 	sub.w	r2, r3, #10
 8003036:	4613      	mov	r3, r2
 8003038:	005b      	lsls	r3, r3, #1
 800303a:	4413      	add	r3, r2
 800303c:	2203      	movs	r2, #3
 800303e:	fa02 f303 	lsl.w	r3, r2, r3
 8003042:	ea41 0203 	orr.w	r2, r1, r3
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	60da      	str	r2, [r3, #12]
 800304a:	e019      	b.n	8003080 <ADC_read+0x88>
	    }
	    else /*channels from 0 to 9 */
	    {
	        /* Clear the old channel  */
	    	ADCx->SMPR2 &= 0x7 << (3 * ADC_CHx);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6919      	ldr	r1, [r3, #16]
 8003050:	78fa      	ldrb	r2, [r7, #3]
 8003052:	4613      	mov	r3, r2
 8003054:	005b      	lsls	r3, r3, #1
 8003056:	4413      	add	r3, r2
 8003058:	2207      	movs	r2, #7
 800305a:	fa02 f303 	lsl.w	r3, r2, r3
 800305e:	ea01 0203 	and.w	r2, r1, r3
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	611a      	str	r2, [r3, #16]
	        /* Set the new channel */
	    	ADCx->SMPR2 |= (uint32)(0b11) << (3 * ADC_CHx);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6919      	ldr	r1, [r3, #16]
 800306a:	78fa      	ldrb	r2, [r7, #3]
 800306c:	4613      	mov	r3, r2
 800306e:	005b      	lsls	r3, r3, #1
 8003070:	4413      	add	r3, r2
 8003072:	2203      	movs	r2, #3
 8003074:	fa02 f303 	lsl.w	r3, r2, r3
 8003078:	ea41 0203 	orr.w	r2, r1, r3
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	611a      	str	r2, [r3, #16]
	    }
	switch (ADC_CHx) {
 8003080:	78fb      	ldrb	r3, [r7, #3]
 8003082:	2b0f      	cmp	r3, #15
 8003084:	f200 80f4 	bhi.w	8003270 <ADC_read+0x278>
 8003088:	a201      	add	r2, pc, #4	@ (adr r2, 8003090 <ADC_read+0x98>)
 800308a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800308e:	bf00      	nop
 8003090:	080030d1 	.word	0x080030d1
 8003094:	080030eb 	.word	0x080030eb
 8003098:	08003105 	.word	0x08003105
 800309c:	0800311f 	.word	0x0800311f
 80030a0:	08003139 	.word	0x08003139
 80030a4:	08003153 	.word	0x08003153
 80030a8:	0800316d 	.word	0x0800316d
 80030ac:	08003187 	.word	0x08003187
 80030b0:	080031a1 	.word	0x080031a1
 80030b4:	080031bb 	.word	0x080031bb
 80030b8:	080031d5 	.word	0x080031d5
 80030bc:	080031ef 	.word	0x080031ef
 80030c0:	08003209 	.word	0x08003209
 80030c4:	08003223 	.word	0x08003223
 80030c8:	0800323d 	.word	0x0800323d
 80030cc:	08003257 	.word	0x08003257
	case ADC_CH0:
		// configure PA0 as analog
		RCC_CLK_EN(APB2_ID, GPIOA_ID);
 80030d0:	2102      	movs	r1, #2
 80030d2:	2001      	movs	r0, #1
 80030d4:	f000 fcf4 	bl	8003ac0 <RCC_CLK_EN>
		GPIO_pinConfig.Pin_Number = PIN_0;
 80030d8:	2301      	movs	r3, #1
 80030da:	81bb      	strh	r3, [r7, #12]
		GPIO_init(GPIOA, &GPIO_pinConfig);
 80030dc:	f107 030c 	add.w	r3, r7, #12
 80030e0:	4619      	mov	r1, r3
 80030e2:	4878      	ldr	r0, [pc, #480]	@ (80032c4 <ADC_read+0x2cc>)
 80030e4:	f000 fadc 	bl	80036a0 <GPIO_init>
		break;
 80030e8:	e0c2      	b.n	8003270 <ADC_read+0x278>
	case ADC_CH1:
			// configure PA1 as analog
			RCC_CLK_EN(APB2_ID, GPIOA_ID);
 80030ea:	2102      	movs	r1, #2
 80030ec:	2001      	movs	r0, #1
 80030ee:	f000 fce7 	bl	8003ac0 <RCC_CLK_EN>
			GPIO_pinConfig.Pin_Number = PIN_1;
 80030f2:	2302      	movs	r3, #2
 80030f4:	81bb      	strh	r3, [r7, #12]
			GPIO_init(GPIOA, &GPIO_pinConfig);
 80030f6:	f107 030c 	add.w	r3, r7, #12
 80030fa:	4619      	mov	r1, r3
 80030fc:	4871      	ldr	r0, [pc, #452]	@ (80032c4 <ADC_read+0x2cc>)
 80030fe:	f000 facf 	bl	80036a0 <GPIO_init>
			break;
 8003102:	e0b5      	b.n	8003270 <ADC_read+0x278>
	case ADC_CH2:
			// configure PA2 as analog
			RCC_CLK_EN(APB2_ID, GPIOA_ID);
 8003104:	2102      	movs	r1, #2
 8003106:	2001      	movs	r0, #1
 8003108:	f000 fcda 	bl	8003ac0 <RCC_CLK_EN>
			GPIO_pinConfig.Pin_Number = PIN_2;
 800310c:	2304      	movs	r3, #4
 800310e:	81bb      	strh	r3, [r7, #12]
			GPIO_init(GPIOA, &GPIO_pinConfig);
 8003110:	f107 030c 	add.w	r3, r7, #12
 8003114:	4619      	mov	r1, r3
 8003116:	486b      	ldr	r0, [pc, #428]	@ (80032c4 <ADC_read+0x2cc>)
 8003118:	f000 fac2 	bl	80036a0 <GPIO_init>
			break;
 800311c:	e0a8      	b.n	8003270 <ADC_read+0x278>
	case ADC_CH3:
			// configure PA3 as analog
			RCC_CLK_EN(APB2_ID, GPIOA_ID);
 800311e:	2102      	movs	r1, #2
 8003120:	2001      	movs	r0, #1
 8003122:	f000 fccd 	bl	8003ac0 <RCC_CLK_EN>
			GPIO_pinConfig.Pin_Number = PIN_3;
 8003126:	2308      	movs	r3, #8
 8003128:	81bb      	strh	r3, [r7, #12]
			GPIO_init(GPIOA, &GPIO_pinConfig);
 800312a:	f107 030c 	add.w	r3, r7, #12
 800312e:	4619      	mov	r1, r3
 8003130:	4864      	ldr	r0, [pc, #400]	@ (80032c4 <ADC_read+0x2cc>)
 8003132:	f000 fab5 	bl	80036a0 <GPIO_init>
			break;
 8003136:	e09b      	b.n	8003270 <ADC_read+0x278>
	case ADC_CH4:
			// configure PA4 as analog
			RCC_CLK_EN(APB2_ID, GPIOA_ID);
 8003138:	2102      	movs	r1, #2
 800313a:	2001      	movs	r0, #1
 800313c:	f000 fcc0 	bl	8003ac0 <RCC_CLK_EN>
			GPIO_pinConfig.Pin_Number = PIN_4;
 8003140:	2310      	movs	r3, #16
 8003142:	81bb      	strh	r3, [r7, #12]
			GPIO_init(GPIOA, &GPIO_pinConfig);
 8003144:	f107 030c 	add.w	r3, r7, #12
 8003148:	4619      	mov	r1, r3
 800314a:	485e      	ldr	r0, [pc, #376]	@ (80032c4 <ADC_read+0x2cc>)
 800314c:	f000 faa8 	bl	80036a0 <GPIO_init>
			break;
 8003150:	e08e      	b.n	8003270 <ADC_read+0x278>
	case ADC_CH5:
			// configure PA5 as analog
			RCC_CLK_EN(APB2_ID, GPIOA_ID);
 8003152:	2102      	movs	r1, #2
 8003154:	2001      	movs	r0, #1
 8003156:	f000 fcb3 	bl	8003ac0 <RCC_CLK_EN>
			GPIO_pinConfig.Pin_Number = PIN_5;
 800315a:	2320      	movs	r3, #32
 800315c:	81bb      	strh	r3, [r7, #12]
			GPIO_init(GPIOA, &GPIO_pinConfig);
 800315e:	f107 030c 	add.w	r3, r7, #12
 8003162:	4619      	mov	r1, r3
 8003164:	4857      	ldr	r0, [pc, #348]	@ (80032c4 <ADC_read+0x2cc>)
 8003166:	f000 fa9b 	bl	80036a0 <GPIO_init>
			break;
 800316a:	e081      	b.n	8003270 <ADC_read+0x278>
	case ADC_CH6:
			// configure PA6 as analog
			RCC_CLK_EN(APB2_ID, GPIOA_ID);
 800316c:	2102      	movs	r1, #2
 800316e:	2001      	movs	r0, #1
 8003170:	f000 fca6 	bl	8003ac0 <RCC_CLK_EN>
			GPIO_pinConfig.Pin_Number = PIN_6;
 8003174:	2340      	movs	r3, #64	@ 0x40
 8003176:	81bb      	strh	r3, [r7, #12]
			GPIO_init(GPIOA, &GPIO_pinConfig);
 8003178:	f107 030c 	add.w	r3, r7, #12
 800317c:	4619      	mov	r1, r3
 800317e:	4851      	ldr	r0, [pc, #324]	@ (80032c4 <ADC_read+0x2cc>)
 8003180:	f000 fa8e 	bl	80036a0 <GPIO_init>
			break;
 8003184:	e074      	b.n	8003270 <ADC_read+0x278>
	case ADC_CH7:
			// configure PA7 as analog
			RCC_CLK_EN(APB2_ID, GPIOA_ID);
 8003186:	2102      	movs	r1, #2
 8003188:	2001      	movs	r0, #1
 800318a:	f000 fc99 	bl	8003ac0 <RCC_CLK_EN>
			GPIO_pinConfig.Pin_Number = PIN_7;
 800318e:	2380      	movs	r3, #128	@ 0x80
 8003190:	81bb      	strh	r3, [r7, #12]
			GPIO_init(GPIOA, &GPIO_pinConfig);
 8003192:	f107 030c 	add.w	r3, r7, #12
 8003196:	4619      	mov	r1, r3
 8003198:	484a      	ldr	r0, [pc, #296]	@ (80032c4 <ADC_read+0x2cc>)
 800319a:	f000 fa81 	bl	80036a0 <GPIO_init>
			break;
 800319e:	e067      	b.n	8003270 <ADC_read+0x278>
	case ADC_CH8:
			// configure PB0 as analog
			RCC_CLK_EN(APB2_ID, GPIOB_ID);
 80031a0:	2103      	movs	r1, #3
 80031a2:	2001      	movs	r0, #1
 80031a4:	f000 fc8c 	bl	8003ac0 <RCC_CLK_EN>
			GPIO_pinConfig.Pin_Number = PIN_0;
 80031a8:	2301      	movs	r3, #1
 80031aa:	81bb      	strh	r3, [r7, #12]
			GPIO_init(GPIOB, &GPIO_pinConfig);
 80031ac:	f107 030c 	add.w	r3, r7, #12
 80031b0:	4619      	mov	r1, r3
 80031b2:	4845      	ldr	r0, [pc, #276]	@ (80032c8 <ADC_read+0x2d0>)
 80031b4:	f000 fa74 	bl	80036a0 <GPIO_init>
			break;
 80031b8:	e05a      	b.n	8003270 <ADC_read+0x278>
	case ADC_CH9:
			// configure PB1 as analog
			RCC_CLK_EN(APB2_ID, GPIOB_ID);
 80031ba:	2103      	movs	r1, #3
 80031bc:	2001      	movs	r0, #1
 80031be:	f000 fc7f 	bl	8003ac0 <RCC_CLK_EN>
			GPIO_pinConfig.Pin_Number = PIN_1;
 80031c2:	2302      	movs	r3, #2
 80031c4:	81bb      	strh	r3, [r7, #12]
			GPIO_init(GPIOB, &GPIO_pinConfig);
 80031c6:	f107 030c 	add.w	r3, r7, #12
 80031ca:	4619      	mov	r1, r3
 80031cc:	483e      	ldr	r0, [pc, #248]	@ (80032c8 <ADC_read+0x2d0>)
 80031ce:	f000 fa67 	bl	80036a0 <GPIO_init>
			break;
 80031d2:	e04d      	b.n	8003270 <ADC_read+0x278>
	case ADC_CH10:
			// configure PC0 as analog
			RCC_CLK_EN(APB2_ID, GPIOC_ID);
 80031d4:	2104      	movs	r1, #4
 80031d6:	2001      	movs	r0, #1
 80031d8:	f000 fc72 	bl	8003ac0 <RCC_CLK_EN>
			GPIO_pinConfig.Pin_Number = PIN_0;
 80031dc:	2301      	movs	r3, #1
 80031de:	81bb      	strh	r3, [r7, #12]
			GPIO_init(GPIOC, &GPIO_pinConfig);
 80031e0:	f107 030c 	add.w	r3, r7, #12
 80031e4:	4619      	mov	r1, r3
 80031e6:	4839      	ldr	r0, [pc, #228]	@ (80032cc <ADC_read+0x2d4>)
 80031e8:	f000 fa5a 	bl	80036a0 <GPIO_init>
			break;
 80031ec:	e040      	b.n	8003270 <ADC_read+0x278>
	case ADC_CH11:
			// configure PC1 as analog
			RCC_CLK_EN(APB2_ID, GPIOC_ID);
 80031ee:	2104      	movs	r1, #4
 80031f0:	2001      	movs	r0, #1
 80031f2:	f000 fc65 	bl	8003ac0 <RCC_CLK_EN>
			GPIO_pinConfig.Pin_Number = PIN_1;
 80031f6:	2302      	movs	r3, #2
 80031f8:	81bb      	strh	r3, [r7, #12]
			GPIO_init(GPIOC, &GPIO_pinConfig);
 80031fa:	f107 030c 	add.w	r3, r7, #12
 80031fe:	4619      	mov	r1, r3
 8003200:	4832      	ldr	r0, [pc, #200]	@ (80032cc <ADC_read+0x2d4>)
 8003202:	f000 fa4d 	bl	80036a0 <GPIO_init>
			break;
 8003206:	e033      	b.n	8003270 <ADC_read+0x278>
	case ADC_CH12:
			// configure PC2 as analog
			RCC_CLK_EN(APB2_ID, GPIOC_ID);
 8003208:	2104      	movs	r1, #4
 800320a:	2001      	movs	r0, #1
 800320c:	f000 fc58 	bl	8003ac0 <RCC_CLK_EN>
			GPIO_pinConfig.Pin_Number = PIN_2;
 8003210:	2304      	movs	r3, #4
 8003212:	81bb      	strh	r3, [r7, #12]
			GPIO_init(GPIOC, &GPIO_pinConfig);
 8003214:	f107 030c 	add.w	r3, r7, #12
 8003218:	4619      	mov	r1, r3
 800321a:	482c      	ldr	r0, [pc, #176]	@ (80032cc <ADC_read+0x2d4>)
 800321c:	f000 fa40 	bl	80036a0 <GPIO_init>
			break;
 8003220:	e026      	b.n	8003270 <ADC_read+0x278>
	case ADC_CH13:
			// configure PC3 as analog
			RCC_CLK_EN(APB2_ID, GPIOC_ID);
 8003222:	2104      	movs	r1, #4
 8003224:	2001      	movs	r0, #1
 8003226:	f000 fc4b 	bl	8003ac0 <RCC_CLK_EN>
			GPIO_pinConfig.Pin_Number = PIN_3;
 800322a:	2308      	movs	r3, #8
 800322c:	81bb      	strh	r3, [r7, #12]
			GPIO_init(GPIOC, &GPIO_pinConfig);
 800322e:	f107 030c 	add.w	r3, r7, #12
 8003232:	4619      	mov	r1, r3
 8003234:	4825      	ldr	r0, [pc, #148]	@ (80032cc <ADC_read+0x2d4>)
 8003236:	f000 fa33 	bl	80036a0 <GPIO_init>
			break;
 800323a:	e019      	b.n	8003270 <ADC_read+0x278>
	case ADC_CH14:
			// configure PC4 as analog
			RCC_CLK_EN(APB2_ID, GPIOC_ID);
 800323c:	2104      	movs	r1, #4
 800323e:	2001      	movs	r0, #1
 8003240:	f000 fc3e 	bl	8003ac0 <RCC_CLK_EN>
			GPIO_pinConfig.Pin_Number = PIN_4;
 8003244:	2310      	movs	r3, #16
 8003246:	81bb      	strh	r3, [r7, #12]
			GPIO_init(GPIOC, &GPIO_pinConfig);
 8003248:	f107 030c 	add.w	r3, r7, #12
 800324c:	4619      	mov	r1, r3
 800324e:	481f      	ldr	r0, [pc, #124]	@ (80032cc <ADC_read+0x2d4>)
 8003250:	f000 fa26 	bl	80036a0 <GPIO_init>
			break;
 8003254:	e00c      	b.n	8003270 <ADC_read+0x278>
	case ADC_CH15:
			// configure PC5 as analog
			RCC_CLK_EN(APB2_ID, GPIOC_ID);
 8003256:	2104      	movs	r1, #4
 8003258:	2001      	movs	r0, #1
 800325a:	f000 fc31 	bl	8003ac0 <RCC_CLK_EN>
			GPIO_pinConfig.Pin_Number = PIN_5;
 800325e:	2320      	movs	r3, #32
 8003260:	81bb      	strh	r3, [r7, #12]
			GPIO_init(GPIOC, &GPIO_pinConfig);
 8003262:	f107 030c 	add.w	r3, r7, #12
 8003266:	4619      	mov	r1, r3
 8003268:	4818      	ldr	r0, [pc, #96]	@ (80032cc <ADC_read+0x2d4>)
 800326a:	f000 fa19 	bl	80036a0 <GPIO_init>
			break;
 800326e:	bf00      	nop
	}
	//2. Enable ADC
    ADCx->SQR[0] |= ((ADC_CHx - (uint8) 1) << 20);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003274:	78fa      	ldrb	r2, [r7, #3]
 8003276:	3a01      	subs	r2, #1
 8003278:	0512      	lsls	r2, r2, #20
 800327a:	431a      	orrs	r2, r3
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	62da      	str	r2, [r3, #44]	@ 0x2c
    ADCx->SQR[2] = (ADCx->SQR[2] & ~(0x1F)) | ADC_CHx;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003284:	f023 021f 	bic.w	r2, r3, #31
 8003288:	78fb      	ldrb	r3, [r7, #3]
 800328a:	431a      	orrs	r2, r3
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	635a      	str	r2, [r3, #52]	@ 0x34

	//start conversion
    ADCx->CR2 |= (1 << 0);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	689b      	ldr	r3, [r3, #8]
 8003294:	f043 0201 	orr.w	r2, r3, #1
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	609a      	str	r2, [r3, #8]
    ADCx->CR2 |= (1 << 22);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	609a      	str	r2, [r3, #8]

	//wait for EOC Flag to be set
	while(!(ADCx->SR & (1<<1)));
 80032a8:	bf00      	nop
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 0302 	and.w	r3, r3, #2
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d0f9      	beq.n	80032aa <ADC_read+0x2b2>

	// read data
	return (ADCx->DR);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80032ba:	b29b      	uxth	r3, r3
}
 80032bc:	4618      	mov	r0, r3
 80032be:	3710      	adds	r7, #16
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bd80      	pop	{r7, pc}
 80032c4:	40010800 	.word	0x40010800
 80032c8:	40010c00 	.word	0x40010c00
 80032cc:	40011000 	.word	0x40011000

080032d0 <EXTI0_IRQHandler>:
//=================================
void (*GP_Fun[16])(void);
//=================================
//       IRQ Handlers
//=================================
void EXTI0_IRQHandler() {
 80032d0:	b580      	push	{r7, lr}
 80032d2:	af00      	add	r7, sp, #0
	EXTI->PR |= (1 << 0);
 80032d4:	4b05      	ldr	r3, [pc, #20]	@ (80032ec <EXTI0_IRQHandler+0x1c>)
 80032d6:	695b      	ldr	r3, [r3, #20]
 80032d8:	4a04      	ldr	r2, [pc, #16]	@ (80032ec <EXTI0_IRQHandler+0x1c>)
 80032da:	f043 0301 	orr.w	r3, r3, #1
 80032de:	6153      	str	r3, [r2, #20]
	GP_Fun[0]();
 80032e0:	4b03      	ldr	r3, [pc, #12]	@ (80032f0 <EXTI0_IRQHandler+0x20>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4798      	blx	r3
}
 80032e6:	bf00      	nop
 80032e8:	bd80      	pop	{r7, pc}
 80032ea:	bf00      	nop
 80032ec:	40010400 	.word	0x40010400
 80032f0:	2000021c 	.word	0x2000021c

080032f4 <EXTI1_IRQHandler>:
void EXTI1_IRQHandler() {
 80032f4:	b580      	push	{r7, lr}
 80032f6:	af00      	add	r7, sp, #0
	EXTI->PR |= (1 << 1);
 80032f8:	4b05      	ldr	r3, [pc, #20]	@ (8003310 <EXTI1_IRQHandler+0x1c>)
 80032fa:	695b      	ldr	r3, [r3, #20]
 80032fc:	4a04      	ldr	r2, [pc, #16]	@ (8003310 <EXTI1_IRQHandler+0x1c>)
 80032fe:	f043 0302 	orr.w	r3, r3, #2
 8003302:	6153      	str	r3, [r2, #20]
	GP_Fun[1]();
 8003304:	4b03      	ldr	r3, [pc, #12]	@ (8003314 <EXTI1_IRQHandler+0x20>)
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	4798      	blx	r3
}
 800330a:	bf00      	nop
 800330c:	bd80      	pop	{r7, pc}
 800330e:	bf00      	nop
 8003310:	40010400 	.word	0x40010400
 8003314:	2000021c 	.word	0x2000021c

08003318 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler() {
 8003318:	b580      	push	{r7, lr}
 800331a:	af00      	add	r7, sp, #0
	EXTI->PR |= (1 << 2);
 800331c:	4b05      	ldr	r3, [pc, #20]	@ (8003334 <EXTI2_IRQHandler+0x1c>)
 800331e:	695b      	ldr	r3, [r3, #20]
 8003320:	4a04      	ldr	r2, [pc, #16]	@ (8003334 <EXTI2_IRQHandler+0x1c>)
 8003322:	f043 0304 	orr.w	r3, r3, #4
 8003326:	6153      	str	r3, [r2, #20]
	GP_Fun[2]();
 8003328:	4b03      	ldr	r3, [pc, #12]	@ (8003338 <EXTI2_IRQHandler+0x20>)
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	4798      	blx	r3
}
 800332e:	bf00      	nop
 8003330:	bd80      	pop	{r7, pc}
 8003332:	bf00      	nop
 8003334:	40010400 	.word	0x40010400
 8003338:	2000021c 	.word	0x2000021c

0800333c <EXTI3_IRQHandler>:
void EXTI3_IRQHandler() {
 800333c:	b580      	push	{r7, lr}
 800333e:	af00      	add	r7, sp, #0
	EXTI->PR |= (1 << 3);
 8003340:	4b05      	ldr	r3, [pc, #20]	@ (8003358 <EXTI3_IRQHandler+0x1c>)
 8003342:	695b      	ldr	r3, [r3, #20]
 8003344:	4a04      	ldr	r2, [pc, #16]	@ (8003358 <EXTI3_IRQHandler+0x1c>)
 8003346:	f043 0308 	orr.w	r3, r3, #8
 800334a:	6153      	str	r3, [r2, #20]
	GP_Fun[3]();
 800334c:	4b03      	ldr	r3, [pc, #12]	@ (800335c <EXTI3_IRQHandler+0x20>)
 800334e:	68db      	ldr	r3, [r3, #12]
 8003350:	4798      	blx	r3
}
 8003352:	bf00      	nop
 8003354:	bd80      	pop	{r7, pc}
 8003356:	bf00      	nop
 8003358:	40010400 	.word	0x40010400
 800335c:	2000021c 	.word	0x2000021c

08003360 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler() {
 8003360:	b580      	push	{r7, lr}
 8003362:	af00      	add	r7, sp, #0
	EXTI->PR |= (1 << 4);
 8003364:	4b05      	ldr	r3, [pc, #20]	@ (800337c <EXTI4_IRQHandler+0x1c>)
 8003366:	695b      	ldr	r3, [r3, #20]
 8003368:	4a04      	ldr	r2, [pc, #16]	@ (800337c <EXTI4_IRQHandler+0x1c>)
 800336a:	f043 0310 	orr.w	r3, r3, #16
 800336e:	6153      	str	r3, [r2, #20]
	GP_Fun[4]();
 8003370:	4b03      	ldr	r3, [pc, #12]	@ (8003380 <EXTI4_IRQHandler+0x20>)
 8003372:	691b      	ldr	r3, [r3, #16]
 8003374:	4798      	blx	r3
}
 8003376:	bf00      	nop
 8003378:	bd80      	pop	{r7, pc}
 800337a:	bf00      	nop
 800337c:	40010400 	.word	0x40010400
 8003380:	2000021c 	.word	0x2000021c

08003384 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler() {
 8003384:	b580      	push	{r7, lr}
 8003386:	af00      	add	r7, sp, #0
	if (EXTI->PR & (1 << 5)) {
 8003388:	4b28      	ldr	r3, [pc, #160]	@ (800342c <EXTI9_5_IRQHandler+0xa8>)
 800338a:	695b      	ldr	r3, [r3, #20]
 800338c:	f003 0320 	and.w	r3, r3, #32
 8003390:	2b00      	cmp	r3, #0
 8003392:	d009      	beq.n	80033a8 <EXTI9_5_IRQHandler+0x24>
		EXTI->PR |= (1 << 5);
 8003394:	4b25      	ldr	r3, [pc, #148]	@ (800342c <EXTI9_5_IRQHandler+0xa8>)
 8003396:	695b      	ldr	r3, [r3, #20]
 8003398:	4a24      	ldr	r2, [pc, #144]	@ (800342c <EXTI9_5_IRQHandler+0xa8>)
 800339a:	f043 0320 	orr.w	r3, r3, #32
 800339e:	6153      	str	r3, [r2, #20]
		GP_Fun[5]();
 80033a0:	4b23      	ldr	r3, [pc, #140]	@ (8003430 <EXTI9_5_IRQHandler+0xac>)
 80033a2:	695b      	ldr	r3, [r3, #20]
 80033a4:	4798      	blx	r3
		GP_Fun[8]();
	} else if (EXTI->PR & (1 << 9)) {
		EXTI->PR |= (1 << 9);
		GP_Fun[9]();
	}
}
 80033a6:	e03e      	b.n	8003426 <EXTI9_5_IRQHandler+0xa2>
	} else if (EXTI->PR & (1 << 6)) {
 80033a8:	4b20      	ldr	r3, [pc, #128]	@ (800342c <EXTI9_5_IRQHandler+0xa8>)
 80033aa:	695b      	ldr	r3, [r3, #20]
 80033ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d009      	beq.n	80033c8 <EXTI9_5_IRQHandler+0x44>
		EXTI->PR |= (1 << 6);
 80033b4:	4b1d      	ldr	r3, [pc, #116]	@ (800342c <EXTI9_5_IRQHandler+0xa8>)
 80033b6:	695b      	ldr	r3, [r3, #20]
 80033b8:	4a1c      	ldr	r2, [pc, #112]	@ (800342c <EXTI9_5_IRQHandler+0xa8>)
 80033ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80033be:	6153      	str	r3, [r2, #20]
		GP_Fun[6]();
 80033c0:	4b1b      	ldr	r3, [pc, #108]	@ (8003430 <EXTI9_5_IRQHandler+0xac>)
 80033c2:	699b      	ldr	r3, [r3, #24]
 80033c4:	4798      	blx	r3
}
 80033c6:	e02e      	b.n	8003426 <EXTI9_5_IRQHandler+0xa2>
	} else if (EXTI->PR & (1 << 7)) {
 80033c8:	4b18      	ldr	r3, [pc, #96]	@ (800342c <EXTI9_5_IRQHandler+0xa8>)
 80033ca:	695b      	ldr	r3, [r3, #20]
 80033cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d009      	beq.n	80033e8 <EXTI9_5_IRQHandler+0x64>
		EXTI->PR |= (1 << 7);
 80033d4:	4b15      	ldr	r3, [pc, #84]	@ (800342c <EXTI9_5_IRQHandler+0xa8>)
 80033d6:	695b      	ldr	r3, [r3, #20]
 80033d8:	4a14      	ldr	r2, [pc, #80]	@ (800342c <EXTI9_5_IRQHandler+0xa8>)
 80033da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80033de:	6153      	str	r3, [r2, #20]
		GP_Fun[7]();
 80033e0:	4b13      	ldr	r3, [pc, #76]	@ (8003430 <EXTI9_5_IRQHandler+0xac>)
 80033e2:	69db      	ldr	r3, [r3, #28]
 80033e4:	4798      	blx	r3
}
 80033e6:	e01e      	b.n	8003426 <EXTI9_5_IRQHandler+0xa2>
	} else if (EXTI->PR & (1 << 8)) {
 80033e8:	4b10      	ldr	r3, [pc, #64]	@ (800342c <EXTI9_5_IRQHandler+0xa8>)
 80033ea:	695b      	ldr	r3, [r3, #20]
 80033ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d009      	beq.n	8003408 <EXTI9_5_IRQHandler+0x84>
		EXTI->PR |= (1 << 8);
 80033f4:	4b0d      	ldr	r3, [pc, #52]	@ (800342c <EXTI9_5_IRQHandler+0xa8>)
 80033f6:	695b      	ldr	r3, [r3, #20]
 80033f8:	4a0c      	ldr	r2, [pc, #48]	@ (800342c <EXTI9_5_IRQHandler+0xa8>)
 80033fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033fe:	6153      	str	r3, [r2, #20]
		GP_Fun[8]();
 8003400:	4b0b      	ldr	r3, [pc, #44]	@ (8003430 <EXTI9_5_IRQHandler+0xac>)
 8003402:	6a1b      	ldr	r3, [r3, #32]
 8003404:	4798      	blx	r3
}
 8003406:	e00e      	b.n	8003426 <EXTI9_5_IRQHandler+0xa2>
	} else if (EXTI->PR & (1 << 9)) {
 8003408:	4b08      	ldr	r3, [pc, #32]	@ (800342c <EXTI9_5_IRQHandler+0xa8>)
 800340a:	695b      	ldr	r3, [r3, #20]
 800340c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003410:	2b00      	cmp	r3, #0
 8003412:	d008      	beq.n	8003426 <EXTI9_5_IRQHandler+0xa2>
		EXTI->PR |= (1 << 9);
 8003414:	4b05      	ldr	r3, [pc, #20]	@ (800342c <EXTI9_5_IRQHandler+0xa8>)
 8003416:	695b      	ldr	r3, [r3, #20]
 8003418:	4a04      	ldr	r2, [pc, #16]	@ (800342c <EXTI9_5_IRQHandler+0xa8>)
 800341a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800341e:	6153      	str	r3, [r2, #20]
		GP_Fun[9]();
 8003420:	4b03      	ldr	r3, [pc, #12]	@ (8003430 <EXTI9_5_IRQHandler+0xac>)
 8003422:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003424:	4798      	blx	r3
}
 8003426:	bf00      	nop
 8003428:	bd80      	pop	{r7, pc}
 800342a:	bf00      	nop
 800342c:	40010400 	.word	0x40010400
 8003430:	2000021c 	.word	0x2000021c

08003434 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler() {
 8003434:	b580      	push	{r7, lr}
 8003436:	af00      	add	r7, sp, #0
	if (EXTI->PR & (1 << 10)) {
 8003438:	4b30      	ldr	r3, [pc, #192]	@ (80034fc <EXTI15_10_IRQHandler+0xc8>)
 800343a:	695b      	ldr	r3, [r3, #20]
 800343c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003440:	2b00      	cmp	r3, #0
 8003442:	d009      	beq.n	8003458 <EXTI15_10_IRQHandler+0x24>
		EXTI->PR |= (1 << 10);
 8003444:	4b2d      	ldr	r3, [pc, #180]	@ (80034fc <EXTI15_10_IRQHandler+0xc8>)
 8003446:	695b      	ldr	r3, [r3, #20]
 8003448:	4a2c      	ldr	r2, [pc, #176]	@ (80034fc <EXTI15_10_IRQHandler+0xc8>)
 800344a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800344e:	6153      	str	r3, [r2, #20]
		GP_Fun[10]();
 8003450:	4b2b      	ldr	r3, [pc, #172]	@ (8003500 <EXTI15_10_IRQHandler+0xcc>)
 8003452:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003454:	4798      	blx	r3
	} else if (EXTI->PR & (1 << 15)) {
		EXTI->PR |= (1 << 15);
		GP_Fun[15]();
	}

}
 8003456:	e04e      	b.n	80034f6 <EXTI15_10_IRQHandler+0xc2>
	} else if (EXTI->PR & (1 << 11)) {
 8003458:	4b28      	ldr	r3, [pc, #160]	@ (80034fc <EXTI15_10_IRQHandler+0xc8>)
 800345a:	695b      	ldr	r3, [r3, #20]
 800345c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003460:	2b00      	cmp	r3, #0
 8003462:	d009      	beq.n	8003478 <EXTI15_10_IRQHandler+0x44>
		EXTI->PR |= (1 << 11);
 8003464:	4b25      	ldr	r3, [pc, #148]	@ (80034fc <EXTI15_10_IRQHandler+0xc8>)
 8003466:	695b      	ldr	r3, [r3, #20]
 8003468:	4a24      	ldr	r2, [pc, #144]	@ (80034fc <EXTI15_10_IRQHandler+0xc8>)
 800346a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800346e:	6153      	str	r3, [r2, #20]
		GP_Fun[11]();
 8003470:	4b23      	ldr	r3, [pc, #140]	@ (8003500 <EXTI15_10_IRQHandler+0xcc>)
 8003472:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003474:	4798      	blx	r3
}
 8003476:	e03e      	b.n	80034f6 <EXTI15_10_IRQHandler+0xc2>
	} else if (EXTI->PR & (1 << 12)) {
 8003478:	4b20      	ldr	r3, [pc, #128]	@ (80034fc <EXTI15_10_IRQHandler+0xc8>)
 800347a:	695b      	ldr	r3, [r3, #20]
 800347c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003480:	2b00      	cmp	r3, #0
 8003482:	d009      	beq.n	8003498 <EXTI15_10_IRQHandler+0x64>
		EXTI->PR |= (1 << 12);
 8003484:	4b1d      	ldr	r3, [pc, #116]	@ (80034fc <EXTI15_10_IRQHandler+0xc8>)
 8003486:	695b      	ldr	r3, [r3, #20]
 8003488:	4a1c      	ldr	r2, [pc, #112]	@ (80034fc <EXTI15_10_IRQHandler+0xc8>)
 800348a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800348e:	6153      	str	r3, [r2, #20]
		GP_Fun[12]();
 8003490:	4b1b      	ldr	r3, [pc, #108]	@ (8003500 <EXTI15_10_IRQHandler+0xcc>)
 8003492:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003494:	4798      	blx	r3
}
 8003496:	e02e      	b.n	80034f6 <EXTI15_10_IRQHandler+0xc2>
	} else if (EXTI->PR & (1 << 13)) {
 8003498:	4b18      	ldr	r3, [pc, #96]	@ (80034fc <EXTI15_10_IRQHandler+0xc8>)
 800349a:	695b      	ldr	r3, [r3, #20]
 800349c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d009      	beq.n	80034b8 <EXTI15_10_IRQHandler+0x84>
		EXTI->PR |= (1 << 13);
 80034a4:	4b15      	ldr	r3, [pc, #84]	@ (80034fc <EXTI15_10_IRQHandler+0xc8>)
 80034a6:	695b      	ldr	r3, [r3, #20]
 80034a8:	4a14      	ldr	r2, [pc, #80]	@ (80034fc <EXTI15_10_IRQHandler+0xc8>)
 80034aa:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80034ae:	6153      	str	r3, [r2, #20]
		GP_Fun[13]();
 80034b0:	4b13      	ldr	r3, [pc, #76]	@ (8003500 <EXTI15_10_IRQHandler+0xcc>)
 80034b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034b4:	4798      	blx	r3
}
 80034b6:	e01e      	b.n	80034f6 <EXTI15_10_IRQHandler+0xc2>
	} else if (EXTI->PR & (1 << 14)) {
 80034b8:	4b10      	ldr	r3, [pc, #64]	@ (80034fc <EXTI15_10_IRQHandler+0xc8>)
 80034ba:	695b      	ldr	r3, [r3, #20]
 80034bc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d009      	beq.n	80034d8 <EXTI15_10_IRQHandler+0xa4>
		EXTI->PR |= (1 << 14);
 80034c4:	4b0d      	ldr	r3, [pc, #52]	@ (80034fc <EXTI15_10_IRQHandler+0xc8>)
 80034c6:	695b      	ldr	r3, [r3, #20]
 80034c8:	4a0c      	ldr	r2, [pc, #48]	@ (80034fc <EXTI15_10_IRQHandler+0xc8>)
 80034ca:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80034ce:	6153      	str	r3, [r2, #20]
		GP_Fun[14]();
 80034d0:	4b0b      	ldr	r3, [pc, #44]	@ (8003500 <EXTI15_10_IRQHandler+0xcc>)
 80034d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034d4:	4798      	blx	r3
}
 80034d6:	e00e      	b.n	80034f6 <EXTI15_10_IRQHandler+0xc2>
	} else if (EXTI->PR & (1 << 15)) {
 80034d8:	4b08      	ldr	r3, [pc, #32]	@ (80034fc <EXTI15_10_IRQHandler+0xc8>)
 80034da:	695b      	ldr	r3, [r3, #20]
 80034dc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d008      	beq.n	80034f6 <EXTI15_10_IRQHandler+0xc2>
		EXTI->PR |= (1 << 15);
 80034e4:	4b05      	ldr	r3, [pc, #20]	@ (80034fc <EXTI15_10_IRQHandler+0xc8>)
 80034e6:	695b      	ldr	r3, [r3, #20]
 80034e8:	4a04      	ldr	r2, [pc, #16]	@ (80034fc <EXTI15_10_IRQHandler+0xc8>)
 80034ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80034ee:	6153      	str	r3, [r2, #20]
		GP_Fun[15]();
 80034f0:	4b03      	ldr	r3, [pc, #12]	@ (8003500 <EXTI15_10_IRQHandler+0xcc>)
 80034f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034f4:	4798      	blx	r3
}
 80034f6:	bf00      	nop
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	bf00      	nop
 80034fc:	40010400 	.word	0x40010400
 8003500:	2000021c 	.word	0x2000021c

08003504 <Get_CRLH_Position>:
 *      Author: Alaa Wahba
 */

#include "GPIO.h"

uint8 Get_CRLH_Position(uint16 pinNumber) {
 8003504:	b480      	push	{r7}
 8003506:	b085      	sub	sp, #20
 8003508:	af00      	add	r7, sp, #0
 800350a:	4603      	mov	r3, r0
 800350c:	80fb      	strh	r3, [r7, #6]
	uint8 shift = 0;
 800350e:	2300      	movs	r3, #0
 8003510:	73fb      	strb	r3, [r7, #15]
	switch (pinNumber) {
 8003512:	88fb      	ldrh	r3, [r7, #6]
 8003514:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003518:	f000 80b8 	beq.w	800368c <Get_CRLH_Position+0x188>
 800351c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003520:	f300 80b7 	bgt.w	8003692 <Get_CRLH_Position+0x18e>
 8003524:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003528:	f000 80ad 	beq.w	8003686 <Get_CRLH_Position+0x182>
 800352c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003530:	f300 80af 	bgt.w	8003692 <Get_CRLH_Position+0x18e>
 8003534:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003538:	f000 80a2 	beq.w	8003680 <Get_CRLH_Position+0x17c>
 800353c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003540:	f300 80a7 	bgt.w	8003692 <Get_CRLH_Position+0x18e>
 8003544:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003548:	f000 8097 	beq.w	800367a <Get_CRLH_Position+0x176>
 800354c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003550:	f300 809f 	bgt.w	8003692 <Get_CRLH_Position+0x18e>
 8003554:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003558:	f000 808c 	beq.w	8003674 <Get_CRLH_Position+0x170>
 800355c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003560:	f300 8097 	bgt.w	8003692 <Get_CRLH_Position+0x18e>
 8003564:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003568:	f000 8081 	beq.w	800366e <Get_CRLH_Position+0x16a>
 800356c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003570:	f300 808f 	bgt.w	8003692 <Get_CRLH_Position+0x18e>
 8003574:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003578:	d076      	beq.n	8003668 <Get_CRLH_Position+0x164>
 800357a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800357e:	f300 8088 	bgt.w	8003692 <Get_CRLH_Position+0x18e>
 8003582:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003586:	d06c      	beq.n	8003662 <Get_CRLH_Position+0x15e>
 8003588:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800358c:	f300 8081 	bgt.w	8003692 <Get_CRLH_Position+0x18e>
 8003590:	2b80      	cmp	r3, #128	@ 0x80
 8003592:	d063      	beq.n	800365c <Get_CRLH_Position+0x158>
 8003594:	2b80      	cmp	r3, #128	@ 0x80
 8003596:	dc7c      	bgt.n	8003692 <Get_CRLH_Position+0x18e>
 8003598:	2b20      	cmp	r3, #32
 800359a:	dc47      	bgt.n	800362c <Get_CRLH_Position+0x128>
 800359c:	2b00      	cmp	r3, #0
 800359e:	dd78      	ble.n	8003692 <Get_CRLH_Position+0x18e>
 80035a0:	3b01      	subs	r3, #1
 80035a2:	2b1f      	cmp	r3, #31
 80035a4:	d875      	bhi.n	8003692 <Get_CRLH_Position+0x18e>
 80035a6:	a201      	add	r2, pc, #4	@ (adr r2, 80035ac <Get_CRLH_Position+0xa8>)
 80035a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035ac:	08003633 	.word	0x08003633
 80035b0:	08003639 	.word	0x08003639
 80035b4:	08003693 	.word	0x08003693
 80035b8:	0800363f 	.word	0x0800363f
 80035bc:	08003693 	.word	0x08003693
 80035c0:	08003693 	.word	0x08003693
 80035c4:	08003693 	.word	0x08003693
 80035c8:	08003645 	.word	0x08003645
 80035cc:	08003693 	.word	0x08003693
 80035d0:	08003693 	.word	0x08003693
 80035d4:	08003693 	.word	0x08003693
 80035d8:	08003693 	.word	0x08003693
 80035dc:	08003693 	.word	0x08003693
 80035e0:	08003693 	.word	0x08003693
 80035e4:	08003693 	.word	0x08003693
 80035e8:	0800364b 	.word	0x0800364b
 80035ec:	08003693 	.word	0x08003693
 80035f0:	08003693 	.word	0x08003693
 80035f4:	08003693 	.word	0x08003693
 80035f8:	08003693 	.word	0x08003693
 80035fc:	08003693 	.word	0x08003693
 8003600:	08003693 	.word	0x08003693
 8003604:	08003693 	.word	0x08003693
 8003608:	08003693 	.word	0x08003693
 800360c:	08003693 	.word	0x08003693
 8003610:	08003693 	.word	0x08003693
 8003614:	08003693 	.word	0x08003693
 8003618:	08003693 	.word	0x08003693
 800361c:	08003693 	.word	0x08003693
 8003620:	08003693 	.word	0x08003693
 8003624:	08003693 	.word	0x08003693
 8003628:	08003651 	.word	0x08003651
 800362c:	2b40      	cmp	r3, #64	@ 0x40
 800362e:	d012      	beq.n	8003656 <Get_CRLH_Position+0x152>
 8003630:	e02f      	b.n	8003692 <Get_CRLH_Position+0x18e>
	case PIN_0:
		shift = 0;
 8003632:	2300      	movs	r3, #0
 8003634:	73fb      	strb	r3, [r7, #15]
		break;
 8003636:	e02c      	b.n	8003692 <Get_CRLH_Position+0x18e>
	case PIN_1:
		shift = 4;
 8003638:	2304      	movs	r3, #4
 800363a:	73fb      	strb	r3, [r7, #15]
		break;
 800363c:	e029      	b.n	8003692 <Get_CRLH_Position+0x18e>
	case PIN_2:
		shift = 8;
 800363e:	2308      	movs	r3, #8
 8003640:	73fb      	strb	r3, [r7, #15]
		break;
 8003642:	e026      	b.n	8003692 <Get_CRLH_Position+0x18e>
	case PIN_3:
		shift = 12;
 8003644:	230c      	movs	r3, #12
 8003646:	73fb      	strb	r3, [r7, #15]
		break;
 8003648:	e023      	b.n	8003692 <Get_CRLH_Position+0x18e>
	case PIN_4:
		shift = 16;
 800364a:	2310      	movs	r3, #16
 800364c:	73fb      	strb	r3, [r7, #15]
		break;
 800364e:	e020      	b.n	8003692 <Get_CRLH_Position+0x18e>
	case PIN_5:
		shift = 20;
 8003650:	2314      	movs	r3, #20
 8003652:	73fb      	strb	r3, [r7, #15]
		break;
 8003654:	e01d      	b.n	8003692 <Get_CRLH_Position+0x18e>
	case PIN_6:
		shift = 24;
 8003656:	2318      	movs	r3, #24
 8003658:	73fb      	strb	r3, [r7, #15]
		break;
 800365a:	e01a      	b.n	8003692 <Get_CRLH_Position+0x18e>
	case PIN_7:
		shift = 28;
 800365c:	231c      	movs	r3, #28
 800365e:	73fb      	strb	r3, [r7, #15]
		break;
 8003660:	e017      	b.n	8003692 <Get_CRLH_Position+0x18e>

	case PIN_8:
		shift = 0;
 8003662:	2300      	movs	r3, #0
 8003664:	73fb      	strb	r3, [r7, #15]
		break;
 8003666:	e014      	b.n	8003692 <Get_CRLH_Position+0x18e>
	case PIN_9:
		shift = 4;
 8003668:	2304      	movs	r3, #4
 800366a:	73fb      	strb	r3, [r7, #15]
		break;
 800366c:	e011      	b.n	8003692 <Get_CRLH_Position+0x18e>
	case PIN_10:
		shift = 8;
 800366e:	2308      	movs	r3, #8
 8003670:	73fb      	strb	r3, [r7, #15]
		break;
 8003672:	e00e      	b.n	8003692 <Get_CRLH_Position+0x18e>
	case PIN_11:
		shift = 12;
 8003674:	230c      	movs	r3, #12
 8003676:	73fb      	strb	r3, [r7, #15]
		break;
 8003678:	e00b      	b.n	8003692 <Get_CRLH_Position+0x18e>
	case PIN_12:
		shift = 16;
 800367a:	2310      	movs	r3, #16
 800367c:	73fb      	strb	r3, [r7, #15]
		break;
 800367e:	e008      	b.n	8003692 <Get_CRLH_Position+0x18e>
	case PIN_13:
		shift = 20;
 8003680:	2314      	movs	r3, #20
 8003682:	73fb      	strb	r3, [r7, #15]
		break;
 8003684:	e005      	b.n	8003692 <Get_CRLH_Position+0x18e>
	case PIN_14:
		shift = 24;
 8003686:	2318      	movs	r3, #24
 8003688:	73fb      	strb	r3, [r7, #15]
		break;
 800368a:	e002      	b.n	8003692 <Get_CRLH_Position+0x18e>
	case PIN_15:
		shift = 28;
 800368c:	231c      	movs	r3, #28
 800368e:	73fb      	strb	r3, [r7, #15]
		break;
 8003690:	bf00      	nop

	}
	return shift;
 8003692:	7bfb      	ldrb	r3, [r7, #15]
}
 8003694:	4618      	mov	r0, r3
 8003696:	3714      	adds	r7, #20
 8003698:	46bd      	mov	sp, r7
 800369a:	bc80      	pop	{r7}
 800369c:	4770      	bx	lr
 800369e:	bf00      	nop

080036a0 <GPIO_init>:
 * @retval 			- none
 * Note				- Stm32F103C6 MCU has GPIO A,B,C,D,E Modules
 * 				     But LQFP48 Package has only GPIO A,B,PART of C/D exported as external PINS from the MCU
 */

void GPIO_init(GPIO_Registers_t *GPIOx, GPIO_PinConfig_t *pinConfig) {
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b086      	sub	sp, #24
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
 80036a8:	6039      	str	r1, [r7, #0]
	// CRL configures the pins from pin 0 to 7
	// CRH configures the pins from pin 8 to 15
	volatile uint32 *config_Register = NULL; //this pointer determines which register to use
 80036aa:	2300      	movs	r3, #0
 80036ac:	613b      	str	r3, [r7, #16]
	config_Register = (pinConfig->Pin_Number < PIN_8) ? &GPIOx->CRL : &GPIOx->CRH;
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	881b      	ldrh	r3, [r3, #0]
 80036b2:	2bff      	cmp	r3, #255	@ 0xff
 80036b4:	d801      	bhi.n	80036ba <GPIO_init+0x1a>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	e001      	b.n	80036be <GPIO_init+0x1e>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	3304      	adds	r3, #4
 80036be:	613b      	str	r3, [r7, #16]

	// This returns the starting bit in register CRL/CRH for the specified pin.
	uint8 shift_bit = Get_CRLH_Position(pinConfig->Pin_Number);
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	881b      	ldrh	r3, [r3, #0]
 80036c4:	4618      	mov	r0, r3
 80036c6:	f7ff ff1d 	bl	8003504 <Get_CRLH_Position>
 80036ca:	4603      	mov	r3, r0
 80036cc:	73fb      	strb	r3, [r7, #15]

	// First Clear the CNF[1:0] MODE[1:0]
	(*config_Register) &= ~(0xF << shift_bit);
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	7bfa      	ldrb	r2, [r7, #15]
 80036d4:	210f      	movs	r1, #15
 80036d6:	fa01 f202 	lsl.w	r2, r1, r2
 80036da:	43d2      	mvns	r2, r2
 80036dc:	401a      	ands	r2, r3
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	601a      	str	r2, [r3, #0]

	uint8 register_bits = 0;
 80036e2:	2300      	movs	r3, #0
 80036e4:	75fb      	strb	r3, [r7, #23]
	// if pin is OUTPUT
	if ((pinConfig->MODE == MODE_OUTPUT_AF_OD) || (pinConfig->MODE == MODE_OUTPUT_AF_PP) || (pinConfig->MODE == MODE_OUTPUT_PP)	|| (pinConfig->MODE == MODE_OUTPUT_OD)) {
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	789b      	ldrb	r3, [r3, #2]
 80036ea:	2b07      	cmp	r3, #7
 80036ec:	d00b      	beq.n	8003706 <GPIO_init+0x66>
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	789b      	ldrb	r3, [r3, #2]
 80036f2:	2b06      	cmp	r3, #6
 80036f4:	d007      	beq.n	8003706 <GPIO_init+0x66>
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	789b      	ldrb	r3, [r3, #2]
 80036fa:	2b04      	cmp	r3, #4
 80036fc:	d003      	beq.n	8003706 <GPIO_init+0x66>
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	789b      	ldrb	r3, [r3, #2]
 8003702:	2b05      	cmp	r3, #5
 8003704:	d10e      	bne.n	8003724 <GPIO_init+0x84>
		register_bits = ((((pinConfig->MODE - 4) << 2)	| pinConfig->Output_Speed) & 0x0f);
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	789b      	ldrb	r3, [r3, #2]
 800370a:	3b04      	subs	r3, #4
 800370c:	009b      	lsls	r3, r3, #2
 800370e:	b25a      	sxtb	r2, r3
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	78db      	ldrb	r3, [r3, #3]
 8003714:	b25b      	sxtb	r3, r3
 8003716:	4313      	orrs	r3, r2
 8003718:	b25b      	sxtb	r3, r3
 800371a:	b2db      	uxtb	r3, r3
 800371c:	f003 030f 	and.w	r3, r3, #15
 8003720:	75fb      	strb	r3, [r7, #23]
 8003722:	e02c      	b.n	800377e <GPIO_init+0xde>

	}
	else
	{
		if ((pinConfig->MODE == MODE_INPUT_FLO) || (pinConfig->MODE == MODE_Analog))
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	789b      	ldrb	r3, [r3, #2]
 8003728:	2b01      	cmp	r3, #1
 800372a:	d003      	beq.n	8003734 <GPIO_init+0x94>
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	789b      	ldrb	r3, [r3, #2]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d107      	bne.n	8003744 <GPIO_init+0xa4>
		{
			register_bits = (((pinConfig->MODE << 2) | 0x00) & 0x0f);
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	789b      	ldrb	r3, [r3, #2]
 8003738:	009b      	lsls	r3, r3, #2
 800373a:	b2db      	uxtb	r3, r3
 800373c:	f003 030f 	and.w	r3, r3, #15
 8003740:	75fb      	strb	r3, [r7, #23]
 8003742:	e01c      	b.n	800377e <GPIO_init+0xde>
		}
		else if (pinConfig->MODE == MODE_INPUT_AF)
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	789b      	ldrb	r3, [r3, #2]
 8003748:	2b10      	cmp	r3, #16
 800374a:	d102      	bne.n	8003752 <GPIO_init+0xb2>
		{
			// consider alternative input as input floating
			register_bits = (((MODE_INPUT_FLO << 2) | 0x00) & 0x0f);
 800374c:	2304      	movs	r3, #4
 800374e:	75fb      	strb	r3, [r7, #23]
 8003750:	e015      	b.n	800377e <GPIO_init+0xde>
		}
		else
		{
			register_bits = (((MODE_INPUT_PU << 2) | 0x00) & 0x0f);
 8003752:	2308      	movs	r3, #8
 8003754:	75fb      	strb	r3, [r7, #23]
			if (pinConfig->MODE == MODE_INPUT_PU)
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	789b      	ldrb	r3, [r3, #2]
 800375a:	2b02      	cmp	r3, #2
 800375c:	d107      	bne.n	800376e <GPIO_init+0xce>
			{
				// set ODR register 1 for input pull up
				GPIOx->ODR |= pinConfig->Pin_Number;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	68db      	ldr	r3, [r3, #12]
 8003762:	683a      	ldr	r2, [r7, #0]
 8003764:	8812      	ldrh	r2, [r2, #0]
 8003766:	431a      	orrs	r2, r3
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	60da      	str	r2, [r3, #12]
 800376c:	e007      	b.n	800377e <GPIO_init+0xde>
			}
			else
			{
				// set ODR register 0 for input pull down
				GPIOx->ODR &= ~(pinConfig->Pin_Number);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	68db      	ldr	r3, [r3, #12]
 8003772:	683a      	ldr	r2, [r7, #0]
 8003774:	8812      	ldrh	r2, [r2, #0]
 8003776:	43d2      	mvns	r2, r2
 8003778:	401a      	ands	r2, r3
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	60da      	str	r2, [r3, #12]
			}
		}

	}
	// write to CRL /CRH
	(*config_Register) |= (register_bits << shift_bit);
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	7df9      	ldrb	r1, [r7, #23]
 8003784:	7bfa      	ldrb	r2, [r7, #15]
 8003786:	fa01 f202 	lsl.w	r2, r1, r2
 800378a:	431a      	orrs	r2, r3
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	601a      	str	r2, [r3, #0]
}
 8003790:	bf00      	nop
 8003792:	3718      	adds	r7, #24
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}

08003798 <GPIO_WritePin>:
 * @param [in]	    - GPIOx : Select the port where the x can be (A..E depending on device used)
 * @param [in]	    - pinNumber : Must be a value from @ref GPIO_PINS_define
 * @param [in]	    - value : either HIGH or LOW from @ref GPIO_PIN_VALUE
 * @retval 			- none
 */
void GPIO_WritePin(GPIO_Registers_t *GPIOx, uint16 pinNumber, uint8 value) {
 8003798:	b480      	push	{r7}
 800379a:	b083      	sub	sp, #12
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
 80037a0:	460b      	mov	r3, r1
 80037a2:	807b      	strh	r3, [r7, #2]
 80037a4:	4613      	mov	r3, r2
 80037a6:	707b      	strb	r3, [r7, #1]
	if (value != PIN_LOW) {
 80037a8:	787b      	ldrb	r3, [r7, #1]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d006      	beq.n	80037bc <GPIO_WritePin+0x24>
		GPIOx->ODR |= (uint32)(pinNumber);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	68da      	ldr	r2, [r3, #12]
 80037b2:	887b      	ldrh	r3, [r7, #2]
 80037b4:	431a      	orrs	r2, r3
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	60da      	str	r2, [r3, #12]
	} else {
		GPIOx->ODR &= ~((uint32)(pinNumber));
	}
}
 80037ba:	e006      	b.n	80037ca <GPIO_WritePin+0x32>
		GPIOx->ODR &= ~((uint32)(pinNumber));
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	68da      	ldr	r2, [r3, #12]
 80037c0:	887b      	ldrh	r3, [r7, #2]
 80037c2:	43db      	mvns	r3, r3
 80037c4:	401a      	ands	r2, r3
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	60da      	str	r2, [r3, #12]
}
 80037ca:	bf00      	nop
 80037cc:	370c      	adds	r7, #12
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bc80      	pop	{r7}
 80037d2:	4770      	bx	lr

080037d4 <NVIC_Enable>:
 * @brief          - Enables the NVIC interrupt pin
 * @param [in]     - IRQ_Number :  The specified Interrupt Number to be enabled
 * @retval         - none
 */

void NVIC_Enable(uint8 IRQ_Number) {
 80037d4:	b480      	push	{r7}
 80037d6:	b083      	sub	sp, #12
 80037d8:	af00      	add	r7, sp, #0
 80037da:	4603      	mov	r3, r0
 80037dc:	71fb      	strb	r3, [r7, #7]
	if ((IRQ_Number >= 0) && (IRQ_Number <= 31)) {
 80037de:	79fb      	ldrb	r3, [r7, #7]
 80037e0:	2b1f      	cmp	r3, #31
 80037e2:	d809      	bhi.n	80037f8 <NVIC_Enable+0x24>
		ISER0 |= (1U << IRQ_Number);
 80037e4:	4b0f      	ldr	r3, [pc, #60]	@ (8003824 <NVIC_Enable+0x50>)
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	79fb      	ldrb	r3, [r7, #7]
 80037ea:	2101      	movs	r1, #1
 80037ec:	fa01 f303 	lsl.w	r3, r1, r3
 80037f0:	490c      	ldr	r1, [pc, #48]	@ (8003824 <NVIC_Enable+0x50>)
 80037f2:	4313      	orrs	r3, r2
 80037f4:	600b      	str	r3, [r1, #0]
	} else if ((IRQ_Number >= 32) && (IRQ_Number <= 59)) {
		ISER1 |= (1U << (IRQ_Number - 32));
	}
}
 80037f6:	e00f      	b.n	8003818 <NVIC_Enable+0x44>
	} else if ((IRQ_Number >= 32) && (IRQ_Number <= 59)) {
 80037f8:	79fb      	ldrb	r3, [r7, #7]
 80037fa:	2b1f      	cmp	r3, #31
 80037fc:	d90c      	bls.n	8003818 <NVIC_Enable+0x44>
 80037fe:	79fb      	ldrb	r3, [r7, #7]
 8003800:	2b3b      	cmp	r3, #59	@ 0x3b
 8003802:	d809      	bhi.n	8003818 <NVIC_Enable+0x44>
		ISER1 |= (1U << (IRQ_Number - 32));
 8003804:	4b08      	ldr	r3, [pc, #32]	@ (8003828 <NVIC_Enable+0x54>)
 8003806:	681a      	ldr	r2, [r3, #0]
 8003808:	79fb      	ldrb	r3, [r7, #7]
 800380a:	3b20      	subs	r3, #32
 800380c:	2101      	movs	r1, #1
 800380e:	fa01 f303 	lsl.w	r3, r1, r3
 8003812:	4905      	ldr	r1, [pc, #20]	@ (8003828 <NVIC_Enable+0x54>)
 8003814:	4313      	orrs	r3, r2
 8003816:	600b      	str	r3, [r1, #0]
}
 8003818:	bf00      	nop
 800381a:	370c      	adds	r7, #12
 800381c:	46bd      	mov	sp, r7
 800381e:	bc80      	pop	{r7}
 8003820:	4770      	bx	lr
 8003822:	bf00      	nop
 8003824:	e000e100 	.word	0xe000e100
 8003828:	e000e104 	.word	0xe000e104

0800382c <RCC_getSYSCLK_Freq>:
 1101: SYSCLK divided by 128
 1110: SYSCLK divided by 256
 1111: SYSCLK divided by 512
 */
uint8 AHB_PrescTable[16U] = { 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 6, 7, 8, 9 };
uint32 RCC_getSYSCLK_Freq(void) {
 800382c:	b480      	push	{r7}
 800382e:	b083      	sub	sp, #12
 8003830:	af00      	add	r7, sp, #0
	/*
	 * 	00: HSI selected as system clock
	 01: HSE selected as system clock
	 10: PLL selected as system clock
	 */
	uint8 SW = (RCC->CFGR >> 2) & 0b11;
 8003832:	4b22      	ldr	r3, [pc, #136]	@ (80038bc <RCC_getSYSCLK_Freq+0x90>)
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	089b      	lsrs	r3, r3, #2
 8003838:	b2db      	uxtb	r3, r3
 800383a:	f003 0303 	and.w	r3, r3, #3
 800383e:	70fb      	strb	r3, [r7, #3]
	uint32 sysClk = HSI;
 8003840:	4b1f      	ldr	r3, [pc, #124]	@ (80038c0 <RCC_getSYSCLK_Freq+0x94>)
 8003842:	607b      	str	r3, [r7, #4]
	uint8 pll_src;
	switch (SW) {
 8003844:	78fb      	ldrb	r3, [r7, #3]
 8003846:	2b02      	cmp	r3, #2
 8003848:	d00c      	beq.n	8003864 <RCC_getSYSCLK_Freq+0x38>
 800384a:	2b02      	cmp	r3, #2
 800384c:	dc30      	bgt.n	80038b0 <RCC_getSYSCLK_Freq+0x84>
 800384e:	2b00      	cmp	r3, #0
 8003850:	d002      	beq.n	8003858 <RCC_getSYSCLK_Freq+0x2c>
 8003852:	2b01      	cmp	r3, #1
 8003854:	d003      	beq.n	800385e <RCC_getSYSCLK_Freq+0x32>
 8003856:	e02b      	b.n	80038b0 <RCC_getSYSCLK_Freq+0x84>
	case 0:
		sysClk = HSI;
 8003858:	4b19      	ldr	r3, [pc, #100]	@ (80038c0 <RCC_getSYSCLK_Freq+0x94>)
 800385a:	607b      	str	r3, [r7, #4]
		break;
 800385c:	e028      	b.n	80038b0 <RCC_getSYSCLK_Freq+0x84>
	case 1:
		//todo need to calculate  it //HSE User Should Specify it
		sysClk = HSE;
 800385e:	4b18      	ldr	r3, [pc, #96]	@ (80038c0 <RCC_getSYSCLK_Freq+0x94>)
 8003860:	607b      	str	r3, [r7, #4]
		break;
 8003862:	e025      	b.n	80038b0 <RCC_getSYSCLK_Freq+0x84>
	case 2:
		 pll_src = (RCC->CFGR >> 16) & 1 ;
 8003864:	4b15      	ldr	r3, [pc, #84]	@ (80038bc <RCC_getSYSCLK_Freq+0x90>)
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	0c1b      	lsrs	r3, r3, #16
 800386a:	b2db      	uxtb	r3, r3
 800386c:	f003 0301 	and.w	r3, r3, #1
 8003870:	70bb      	strb	r3, [r7, #2]
		if(pll_src){ // HSE
 8003872:	78bb      	ldrb	r3, [r7, #2]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d00a      	beq.n	800388e <RCC_getSYSCLK_Freq+0x62>
			 sysClk = GET(RCC->CFGR,17) == 1 ?( HSE /2) : HSE ; //check if HSE is divided by 2
 8003878:	4b10      	ldr	r3, [pc, #64]	@ (80038bc <RCC_getSYSCLK_Freq+0x90>)
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003880:	2b01      	cmp	r3, #1
 8003882:	d101      	bne.n	8003888 <RCC_getSYSCLK_Freq+0x5c>
 8003884:	4b0f      	ldr	r3, [pc, #60]	@ (80038c4 <RCC_getSYSCLK_Freq+0x98>)
 8003886:	e000      	b.n	800388a <RCC_getSYSCLK_Freq+0x5e>
 8003888:	4b0d      	ldr	r3, [pc, #52]	@ (80038c0 <RCC_getSYSCLK_Freq+0x94>)
 800388a:	607b      	str	r3, [r7, #4]
 800388c:	e001      	b.n	8003892 <RCC_getSYSCLK_Freq+0x66>
		}else{ //HSI / 2 = 4MHZ
			sysClk = HSI/2 ;
 800388e:	4b0d      	ldr	r3, [pc, #52]	@ (80038c4 <RCC_getSYSCLK_Freq+0x98>)
 8003890:	607b      	str	r3, [r7, #4]
		}
		uint16 pll_mul = (RCC->CFGR >> 18) & 0b1111;
 8003892:	4b0a      	ldr	r3, [pc, #40]	@ (80038bc <RCC_getSYSCLK_Freq+0x90>)
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	0c9b      	lsrs	r3, r3, #18
 8003898:	b29b      	uxth	r3, r3
 800389a:	f003 030f 	and.w	r3, r3, #15
 800389e:	803b      	strh	r3, [r7, #0]
		sysClk = sysClk * (pll_mul+2);
 80038a0:	883b      	ldrh	r3, [r7, #0]
 80038a2:	3302      	adds	r3, #2
 80038a4:	461a      	mov	r2, r3
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	fb02 f303 	mul.w	r3, r2, r3
 80038ac:	607b      	str	r3, [r7, #4]
		break;
 80038ae:	bf00      	nop

	}
	return sysClk;
 80038b0:	687b      	ldr	r3, [r7, #4]
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	370c      	adds	r7, #12
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bc80      	pop	{r7}
 80038ba:	4770      	bx	lr
 80038bc:	40021000 	.word	0x40021000
 80038c0:	007a1200 	.word	0x007a1200
 80038c4:	003d0900 	.word	0x003d0900

080038c8 <RCC_getPCKL1_Freq>:

uint32 RCC_getPCKL1_Freq(void) {
 80038c8:	b580      	push	{r7, lr}
 80038ca:	af00      	add	r7, sp, #0
	/* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
	return (RCC_getHCKL_Freq() >> APB_PrescTable[((RCC->CFGR >> 8) & 0b111)]); // First right shift is multiplication
 80038cc:	f000 f824 	bl	8003918 <RCC_getHCKL_Freq>
 80038d0:	4602      	mov	r2, r0
 80038d2:	4b05      	ldr	r3, [pc, #20]	@ (80038e8 <RCC_getPCKL1_Freq+0x20>)
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	0a1b      	lsrs	r3, r3, #8
 80038d8:	f003 0307 	and.w	r3, r3, #7
 80038dc:	4903      	ldr	r1, [pc, #12]	@ (80038ec <RCC_getPCKL1_Freq+0x24>)
 80038de:	5ccb      	ldrb	r3, [r1, r3]
 80038e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	bd80      	pop	{r7, pc}
 80038e8:	40021000 	.word	0x40021000
 80038ec:	2000000c 	.word	0x2000000c

080038f0 <RCC_getPCKL2_Freq>:
uint32 RCC_getPCKL2_Freq(void) {
 80038f0:	b580      	push	{r7, lr}
 80038f2:	af00      	add	r7, sp, #0
	/* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
	return (RCC_getHCKL_Freq() >> APB_PrescTable[((RCC->CFGR >> 11) & 0b111)]);
 80038f4:	f000 f810 	bl	8003918 <RCC_getHCKL_Freq>
 80038f8:	4602      	mov	r2, r0
 80038fa:	4b05      	ldr	r3, [pc, #20]	@ (8003910 <RCC_getPCKL2_Freq+0x20>)
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	0adb      	lsrs	r3, r3, #11
 8003900:	f003 0307 	and.w	r3, r3, #7
 8003904:	4903      	ldr	r1, [pc, #12]	@ (8003914 <RCC_getPCKL2_Freq+0x24>)
 8003906:	5ccb      	ldrb	r3, [r1, r3]
 8003908:	fa22 f303 	lsr.w	r3, r2, r3
}
 800390c:	4618      	mov	r0, r3
 800390e:	bd80      	pop	{r7, pc}
 8003910:	40021000 	.word	0x40021000
 8003914:	2000000c 	.word	0x2000000c

08003918 <RCC_getHCKL_Freq>:
uint32 RCC_getHCKL_Freq(void) {
 8003918:	b580      	push	{r7, lr}
 800391a:	af00      	add	r7, sp, #0
	/* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
	return (RCC_getSYSCLK_Freq() >> AHB_PrescTable[((RCC->CFGR >> 4) & 0b1111)]);
 800391c:	f7ff ff86 	bl	800382c <RCC_getSYSCLK_Freq>
 8003920:	4602      	mov	r2, r0
 8003922:	4b05      	ldr	r3, [pc, #20]	@ (8003938 <RCC_getHCKL_Freq+0x20>)
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	091b      	lsrs	r3, r3, #4
 8003928:	f003 030f 	and.w	r3, r3, #15
 800392c:	4903      	ldr	r1, [pc, #12]	@ (800393c <RCC_getHCKL_Freq+0x24>)
 800392e:	5ccb      	ldrb	r3, [r1, r3]
 8003930:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003934:	4618      	mov	r0, r3
 8003936:	bd80      	pop	{r7, pc}
 8003938:	40021000 	.word	0x40021000
 800393c:	20000014 	.word	0x20000014

08003940 <RCC_init>:

void RCC_init(RCC_CLKSrc_t clkSrc, RCC_HSESrc_t HSESrc, RCC_PLLSrc_t PLLSrc,
		uint8 PLLMUL) {
 8003940:	b490      	push	{r4, r7}
 8003942:	b082      	sub	sp, #8
 8003944:	af00      	add	r7, sp, #0
 8003946:	4604      	mov	r4, r0
 8003948:	4608      	mov	r0, r1
 800394a:	4611      	mov	r1, r2
 800394c:	461a      	mov	r2, r3
 800394e:	4623      	mov	r3, r4
 8003950:	71fb      	strb	r3, [r7, #7]
 8003952:	4603      	mov	r3, r0
 8003954:	71bb      	strb	r3, [r7, #6]
 8003956:	460b      	mov	r3, r1
 8003958:	717b      	strb	r3, [r7, #5]
 800395a:	4613      	mov	r3, r2
 800395c:	713b      	strb	r3, [r7, #4]
	switch (clkSrc) {
 800395e:	79fb      	ldrb	r3, [r7, #7]
 8003960:	2b10      	cmp	r3, #16
 8003962:	d04d      	beq.n	8003a00 <RCC_init+0xc0>
 8003964:	2b10      	cmp	r3, #16
 8003966:	f300 80a4 	bgt.w	8003ab2 <RCC_init+0x172>
 800396a:	2b00      	cmp	r3, #0
 800396c:	d002      	beq.n	8003974 <RCC_init+0x34>
 800396e:	2b01      	cmp	r3, #1
 8003970:	d013      	beq.n	800399a <RCC_init+0x5a>
			break;
		}
		break;

	}
}
 8003972:	e09e      	b.n	8003ab2 <RCC_init+0x172>
		RCC->CR |= (1 << 0);
 8003974:	4b51      	ldr	r3, [pc, #324]	@ (8003abc <RCC_init+0x17c>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a50      	ldr	r2, [pc, #320]	@ (8003abc <RCC_init+0x17c>)
 800397a:	f043 0301 	orr.w	r3, r3, #1
 800397e:	6013      	str	r3, [r2, #0]
		RCC->CFGR &= ~(1 << 0);
 8003980:	4b4e      	ldr	r3, [pc, #312]	@ (8003abc <RCC_init+0x17c>)
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	4a4d      	ldr	r2, [pc, #308]	@ (8003abc <RCC_init+0x17c>)
 8003986:	f023 0301 	bic.w	r3, r3, #1
 800398a:	6053      	str	r3, [r2, #4]
		RCC->CFGR &= ~(1 << 1);
 800398c:	4b4b      	ldr	r3, [pc, #300]	@ (8003abc <RCC_init+0x17c>)
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	4a4a      	ldr	r2, [pc, #296]	@ (8003abc <RCC_init+0x17c>)
 8003992:	f023 0302 	bic.w	r3, r3, #2
 8003996:	6053      	str	r3, [r2, #4]
		break;
 8003998:	e08b      	b.n	8003ab2 <RCC_init+0x172>
		RCC->CR |= (1 << 16);
 800399a:	4b48      	ldr	r3, [pc, #288]	@ (8003abc <RCC_init+0x17c>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a47      	ldr	r2, [pc, #284]	@ (8003abc <RCC_init+0x17c>)
 80039a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039a4:	6013      	str	r3, [r2, #0]
		switch (HSESrc) {
 80039a6:	79bb      	ldrb	r3, [r7, #6]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d002      	beq.n	80039b2 <RCC_init+0x72>
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	d013      	beq.n	80039d8 <RCC_init+0x98>
		break;
 80039b0:	e07f      	b.n	8003ab2 <RCC_init+0x172>
			RCC->CR &= ~(1 << 18);
 80039b2:	4b42      	ldr	r3, [pc, #264]	@ (8003abc <RCC_init+0x17c>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a41      	ldr	r2, [pc, #260]	@ (8003abc <RCC_init+0x17c>)
 80039b8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80039bc:	6013      	str	r3, [r2, #0]
			RCC->CFGR |= (1 << 0);
 80039be:	4b3f      	ldr	r3, [pc, #252]	@ (8003abc <RCC_init+0x17c>)
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	4a3e      	ldr	r2, [pc, #248]	@ (8003abc <RCC_init+0x17c>)
 80039c4:	f043 0301 	orr.w	r3, r3, #1
 80039c8:	6053      	str	r3, [r2, #4]
			RCC->CFGR &= ~(1 << 1);
 80039ca:	4b3c      	ldr	r3, [pc, #240]	@ (8003abc <RCC_init+0x17c>)
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	4a3b      	ldr	r2, [pc, #236]	@ (8003abc <RCC_init+0x17c>)
 80039d0:	f023 0302 	bic.w	r3, r3, #2
 80039d4:	6053      	str	r3, [r2, #4]
			break;
 80039d6:	e012      	b.n	80039fe <RCC_init+0xbe>
			RCC->CR |= (1 << 18);
 80039d8:	4b38      	ldr	r3, [pc, #224]	@ (8003abc <RCC_init+0x17c>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a37      	ldr	r2, [pc, #220]	@ (8003abc <RCC_init+0x17c>)
 80039de:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80039e2:	6013      	str	r3, [r2, #0]
			RCC->CFGR |= (1 << 0);
 80039e4:	4b35      	ldr	r3, [pc, #212]	@ (8003abc <RCC_init+0x17c>)
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	4a34      	ldr	r2, [pc, #208]	@ (8003abc <RCC_init+0x17c>)
 80039ea:	f043 0301 	orr.w	r3, r3, #1
 80039ee:	6053      	str	r3, [r2, #4]
			RCC->CFGR &= ~(1 << 1);
 80039f0:	4b32      	ldr	r3, [pc, #200]	@ (8003abc <RCC_init+0x17c>)
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	4a31      	ldr	r2, [pc, #196]	@ (8003abc <RCC_init+0x17c>)
 80039f6:	f023 0302 	bic.w	r3, r3, #2
 80039fa:	6053      	str	r3, [r2, #4]
			break;
 80039fc:	bf00      	nop
		break;
 80039fe:	e058      	b.n	8003ab2 <RCC_init+0x172>
		switch (PLLSrc) {
 8003a00:	797b      	ldrb	r3, [r7, #5]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d002      	beq.n	8003a0c <RCC_init+0xcc>
 8003a06:	2b01      	cmp	r3, #1
 8003a08:	d02c      	beq.n	8003a64 <RCC_init+0x124>
		break;
 8003a0a:	e051      	b.n	8003ab0 <RCC_init+0x170>
			RCC->CFGR |= (1 << 16);
 8003a0c:	4b2b      	ldr	r3, [pc, #172]	@ (8003abc <RCC_init+0x17c>)
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	4a2a      	ldr	r2, [pc, #168]	@ (8003abc <RCC_init+0x17c>)
 8003a12:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a16:	6053      	str	r3, [r2, #4]
			RCC->CFGR &= ~(1 << 17);
 8003a18:	4b28      	ldr	r3, [pc, #160]	@ (8003abc <RCC_init+0x17c>)
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	4a27      	ldr	r2, [pc, #156]	@ (8003abc <RCC_init+0x17c>)
 8003a1e:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8003a22:	6053      	str	r3, [r2, #4]
			RCC->CFGR |= (PLLMUL << 18);
 8003a24:	4b25      	ldr	r3, [pc, #148]	@ (8003abc <RCC_init+0x17c>)
 8003a26:	685a      	ldr	r2, [r3, #4]
 8003a28:	793b      	ldrb	r3, [r7, #4]
 8003a2a:	049b      	lsls	r3, r3, #18
 8003a2c:	4923      	ldr	r1, [pc, #140]	@ (8003abc <RCC_init+0x17c>)
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	604b      	str	r3, [r1, #4]
			RCC->CR |= (1 << 24);
 8003a32:	4b22      	ldr	r3, [pc, #136]	@ (8003abc <RCC_init+0x17c>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a21      	ldr	r2, [pc, #132]	@ (8003abc <RCC_init+0x17c>)
 8003a38:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003a3c:	6013      	str	r3, [r2, #0]
			RCC->CR |= (1 << 16);
 8003a3e:	4b1f      	ldr	r3, [pc, #124]	@ (8003abc <RCC_init+0x17c>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a1e      	ldr	r2, [pc, #120]	@ (8003abc <RCC_init+0x17c>)
 8003a44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a48:	6013      	str	r3, [r2, #0]
			RCC->CFGR &= ~(1 << 0);
 8003a4a:	4b1c      	ldr	r3, [pc, #112]	@ (8003abc <RCC_init+0x17c>)
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	4a1b      	ldr	r2, [pc, #108]	@ (8003abc <RCC_init+0x17c>)
 8003a50:	f023 0301 	bic.w	r3, r3, #1
 8003a54:	6053      	str	r3, [r2, #4]
			RCC->CFGR |= (1 << 1);
 8003a56:	4b19      	ldr	r3, [pc, #100]	@ (8003abc <RCC_init+0x17c>)
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	4a18      	ldr	r2, [pc, #96]	@ (8003abc <RCC_init+0x17c>)
 8003a5c:	f043 0302 	orr.w	r3, r3, #2
 8003a60:	6053      	str	r3, [r2, #4]
			break;
 8003a62:	e025      	b.n	8003ab0 <RCC_init+0x170>
			RCC->CR |= (1 << 0);
 8003a64:	4b15      	ldr	r3, [pc, #84]	@ (8003abc <RCC_init+0x17c>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a14      	ldr	r2, [pc, #80]	@ (8003abc <RCC_init+0x17c>)
 8003a6a:	f043 0301 	orr.w	r3, r3, #1
 8003a6e:	6013      	str	r3, [r2, #0]
			RCC->CFGR |= (PLLMUL << 18);
 8003a70:	4b12      	ldr	r3, [pc, #72]	@ (8003abc <RCC_init+0x17c>)
 8003a72:	685a      	ldr	r2, [r3, #4]
 8003a74:	793b      	ldrb	r3, [r7, #4]
 8003a76:	049b      	lsls	r3, r3, #18
 8003a78:	4910      	ldr	r1, [pc, #64]	@ (8003abc <RCC_init+0x17c>)
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	604b      	str	r3, [r1, #4]
			RCC->CR |= (1 << 24);
 8003a7e:	4b0f      	ldr	r3, [pc, #60]	@ (8003abc <RCC_init+0x17c>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a0e      	ldr	r2, [pc, #56]	@ (8003abc <RCC_init+0x17c>)
 8003a84:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003a88:	6013      	str	r3, [r2, #0]
			RCC->CFGR &= ~(1 << 0);
 8003a8a:	4b0c      	ldr	r3, [pc, #48]	@ (8003abc <RCC_init+0x17c>)
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	4a0b      	ldr	r2, [pc, #44]	@ (8003abc <RCC_init+0x17c>)
 8003a90:	f023 0301 	bic.w	r3, r3, #1
 8003a94:	6053      	str	r3, [r2, #4]
			RCC->CFGR |= (1 << 1);
 8003a96:	4b09      	ldr	r3, [pc, #36]	@ (8003abc <RCC_init+0x17c>)
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	4a08      	ldr	r2, [pc, #32]	@ (8003abc <RCC_init+0x17c>)
 8003a9c:	f043 0302 	orr.w	r3, r3, #2
 8003aa0:	6053      	str	r3, [r2, #4]
			RCC->CFGR &= ~(1 << 16);
 8003aa2:	4b06      	ldr	r3, [pc, #24]	@ (8003abc <RCC_init+0x17c>)
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	4a05      	ldr	r2, [pc, #20]	@ (8003abc <RCC_init+0x17c>)
 8003aa8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003aac:	6053      	str	r3, [r2, #4]
			break;
 8003aae:	bf00      	nop
		break;
 8003ab0:	bf00      	nop
}
 8003ab2:	bf00      	nop
 8003ab4:	3708      	adds	r7, #8
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bc90      	pop	{r4, r7}
 8003aba:	4770      	bx	lr
 8003abc:	40021000 	.word	0x40021000

08003ac0 <RCC_CLK_EN>:

void RCC_CLK_EN(uint8 busID, uint8 periphralID) {
 8003ac0:	b480      	push	{r7}
 8003ac2:	b083      	sub	sp, #12
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	460a      	mov	r2, r1
 8003aca:	71fb      	strb	r3, [r7, #7]
 8003acc:	4613      	mov	r3, r2
 8003ace:	71bb      	strb	r3, [r7, #6]
	switch (busID) {
 8003ad0:	79fb      	ldrb	r3, [r7, #7]
 8003ad2:	2b02      	cmp	r3, #2
 8003ad4:	d01c      	beq.n	8003b10 <RCC_CLK_EN+0x50>
 8003ad6:	2b02      	cmp	r3, #2
 8003ad8:	dc25      	bgt.n	8003b26 <RCC_CLK_EN+0x66>
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d002      	beq.n	8003ae4 <RCC_CLK_EN+0x24>
 8003ade:	2b01      	cmp	r3, #1
 8003ae0:	d00b      	beq.n	8003afa <RCC_CLK_EN+0x3a>
		break;
	case AHB_ID:
		RCC->AHBENR |= (1 << periphralID);
		break;
	}
}
 8003ae2:	e020      	b.n	8003b26 <RCC_CLK_EN+0x66>
		RCC->ABP1ENR |= (1 << periphralID);
 8003ae4:	4b12      	ldr	r3, [pc, #72]	@ (8003b30 <RCC_CLK_EN+0x70>)
 8003ae6:	69db      	ldr	r3, [r3, #28]
 8003ae8:	79ba      	ldrb	r2, [r7, #6]
 8003aea:	2101      	movs	r1, #1
 8003aec:	fa01 f202 	lsl.w	r2, r1, r2
 8003af0:	4611      	mov	r1, r2
 8003af2:	4a0f      	ldr	r2, [pc, #60]	@ (8003b30 <RCC_CLK_EN+0x70>)
 8003af4:	430b      	orrs	r3, r1
 8003af6:	61d3      	str	r3, [r2, #28]
		break;
 8003af8:	e015      	b.n	8003b26 <RCC_CLK_EN+0x66>
		RCC->ABP2ENR |= (1 << periphralID);
 8003afa:	4b0d      	ldr	r3, [pc, #52]	@ (8003b30 <RCC_CLK_EN+0x70>)
 8003afc:	699b      	ldr	r3, [r3, #24]
 8003afe:	79ba      	ldrb	r2, [r7, #6]
 8003b00:	2101      	movs	r1, #1
 8003b02:	fa01 f202 	lsl.w	r2, r1, r2
 8003b06:	4611      	mov	r1, r2
 8003b08:	4a09      	ldr	r2, [pc, #36]	@ (8003b30 <RCC_CLK_EN+0x70>)
 8003b0a:	430b      	orrs	r3, r1
 8003b0c:	6193      	str	r3, [r2, #24]
		break;
 8003b0e:	e00a      	b.n	8003b26 <RCC_CLK_EN+0x66>
		RCC->AHBENR |= (1 << periphralID);
 8003b10:	4b07      	ldr	r3, [pc, #28]	@ (8003b30 <RCC_CLK_EN+0x70>)
 8003b12:	695b      	ldr	r3, [r3, #20]
 8003b14:	79ba      	ldrb	r2, [r7, #6]
 8003b16:	2101      	movs	r1, #1
 8003b18:	fa01 f202 	lsl.w	r2, r1, r2
 8003b1c:	4611      	mov	r1, r2
 8003b1e:	4a04      	ldr	r2, [pc, #16]	@ (8003b30 <RCC_CLK_EN+0x70>)
 8003b20:	430b      	orrs	r3, r1
 8003b22:	6153      	str	r3, [r2, #20]
		break;
 8003b24:	bf00      	nop
}
 8003b26:	bf00      	nop
 8003b28:	370c      	adds	r7, #12
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bc80      	pop	{r7}
 8003b2e:	4770      	bx	lr
 8003b30:	40021000 	.word	0x40021000

08003b34 <STK_delayMs>:
	SYSTICK->LOAD = 0;
	SYSTICK->VAL = 0;

}

void STK_delayMs(uint32 time) {
 8003b34:	b480      	push	{r7}
 8003b36:	b085      	sub	sp, #20
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
	for (uint32 i = 0; i < time; i++) {
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	60fb      	str	r3, [r7, #12]
 8003b40:	e029      	b.n	8003b96 <STK_delayMs+0x62>

		//Enable Systick
		SET(SYSTICK->CTRL, 0);
 8003b42:	4b1a      	ldr	r3, [pc, #104]	@ (8003bac <STK_delayMs+0x78>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a19      	ldr	r2, [pc, #100]	@ (8003bac <STK_delayMs+0x78>)
 8003b48:	f043 0301 	orr.w	r3, r3, #1
 8003b4c:	6013      	str	r3, [r2, #0]
		//Disable Interrupt
		CLEAR(SYSTICK->CTRL, 1);
 8003b4e:	4b17      	ldr	r3, [pc, #92]	@ (8003bac <STK_delayMs+0x78>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a16      	ldr	r2, [pc, #88]	@ (8003bac <STK_delayMs+0x78>)
 8003b54:	f023 0302 	bic.w	r3, r3, #2
 8003b58:	6013      	str	r3, [r2, #0]
		SYSTICK->LOAD = 1000 * microSecond;
 8003b5a:	4b15      	ldr	r3, [pc, #84]	@ (8003bb0 <STK_delayMs+0x7c>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a13      	ldr	r2, [pc, #76]	@ (8003bac <STK_delayMs+0x78>)
 8003b60:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8003b64:	fb01 f303 	mul.w	r3, r1, r3
 8003b68:	6053      	str	r3, [r2, #4]
		//Wait for flag
		while (!GET(SYSTICK->CTRL, 16))
 8003b6a:	bf00      	nop
 8003b6c:	4b0f      	ldr	r3, [pc, #60]	@ (8003bac <STK_delayMs+0x78>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d0f9      	beq.n	8003b6c <STK_delayMs+0x38>
			;
		//Disable Systick
		SYSTICK->LOAD = 0;
 8003b78:	4b0c      	ldr	r3, [pc, #48]	@ (8003bac <STK_delayMs+0x78>)
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	605a      	str	r2, [r3, #4]
		SYSTICK->VAL = 0;
 8003b7e:	4b0b      	ldr	r3, [pc, #44]	@ (8003bac <STK_delayMs+0x78>)
 8003b80:	2200      	movs	r2, #0
 8003b82:	609a      	str	r2, [r3, #8]
		CLEAR(SYSTICK->CTRL, 0);
 8003b84:	4b09      	ldr	r3, [pc, #36]	@ (8003bac <STK_delayMs+0x78>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	4a08      	ldr	r2, [pc, #32]	@ (8003bac <STK_delayMs+0x78>)
 8003b8a:	f023 0301 	bic.w	r3, r3, #1
 8003b8e:	6013      	str	r3, [r2, #0]
	for (uint32 i = 0; i < time; i++) {
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	3301      	adds	r3, #1
 8003b94:	60fb      	str	r3, [r7, #12]
 8003b96:	68fa      	ldr	r2, [r7, #12]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	d3d1      	bcc.n	8003b42 <STK_delayMs+0xe>
	}
}
 8003b9e:	bf00      	nop
 8003ba0:	bf00      	nop
 8003ba2:	3714      	adds	r7, #20
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bc80      	pop	{r7}
 8003ba8:	4770      	bx	lr
 8003baa:	bf00      	nop
 8003bac:	e000e010 	.word	0xe000e010
 8003bb0:	20000024 	.word	0x20000024

08003bb4 <SysTick_Handler>:
uint32 STK_getRemainingTime() {
	return (SYSTICK->VAL);

}

void SysTick_Handler() {
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b082      	sub	sp, #8
 8003bb8:	af00      	add	r7, sp, #0
	uint8 flag = 0;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	71fb      	strb	r3, [r7, #7]
#if STK_MODE == SINGLE
	SYSTICK->LOAD = 0;
 8003bbe:	4b0e      	ldr	r3, [pc, #56]	@ (8003bf8 <SysTick_Handler+0x44>)
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	605a      	str	r2, [r3, #4]
	SYSTICK->VAL = 0;
 8003bc4:	4b0c      	ldr	r3, [pc, #48]	@ (8003bf8 <SysTick_Handler+0x44>)
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	609a      	str	r2, [r3, #8]
	CLEAR(SYSTICK->CTRL, 0);
 8003bca:	4b0b      	ldr	r3, [pc, #44]	@ (8003bf8 <SysTick_Handler+0x44>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	4a0a      	ldr	r2, [pc, #40]	@ (8003bf8 <SysTick_Handler+0x44>)
 8003bd0:	f023 0301 	bic.w	r3, r3, #1
 8003bd4:	6013      	str	r3, [r2, #0]
	CLEAR(SYSTICK->CTRL, 1);
 8003bd6:	4b08      	ldr	r3, [pc, #32]	@ (8003bf8 <SysTick_Handler+0x44>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a07      	ldr	r2, [pc, #28]	@ (8003bf8 <SysTick_Handler+0x44>)
 8003bdc:	f023 0302 	bic.w	r3, r3, #2
 8003be0:	6013      	str	r3, [r2, #0]
#endif

	P_CallBack_Fun();
 8003be2:	4b06      	ldr	r3, [pc, #24]	@ (8003bfc <SysTick_Handler+0x48>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4798      	blx	r3
	flag = GET(SYSTICK->CTRL, 16);
 8003be8:	4b03      	ldr	r3, [pc, #12]	@ (8003bf8 <SysTick_Handler+0x44>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	2300      	movs	r3, #0
 8003bee:	71fb      	strb	r3, [r7, #7]
}
 8003bf0:	bf00      	nop
 8003bf2:	3708      	adds	r7, #8
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}
 8003bf8:	e000e010 	.word	0xe000e010
 8003bfc:	2000025c 	.word	0x2000025c

08003c00 <USART_init>:
 * @param [in] 		- USARTx: where x can be (1..3 depending on device used)
 * @param [in] 		- pinConfig: All UART Configuration USART_pinConfig_t
 * @retval 			-none
 * Note				-Support for Now Asynch mode & Clock 8 MHZ S
 */
void USART_init(USART_pinConfig_t *pinConfig, USART_Registers_t *USARTx) {
 8003c00:	b5b0      	push	{r4, r5, r7, lr}
 8003c02:	b084      	sub	sp, #16
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
 8003c08:	6039      	str	r1, [r7, #0]
	uint32 BRR, pclk;

	/*            Enable USART clocks      */
	if (USARTx == USART1) {
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	4a59      	ldr	r2, [pc, #356]	@ (8003d74 <USART_init+0x174>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d10b      	bne.n	8003c2a <USART_init+0x2a>
		Global_pinConfig[USART1_Index] = *pinConfig;
 8003c12:	4a59      	ldr	r2, [pc, #356]	@ (8003d78 <USART_init+0x178>)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	4614      	mov	r4, r2
 8003c18:	461d      	mov	r5, r3
 8003c1a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003c1c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003c1e:	682b      	ldr	r3, [r5, #0]
 8003c20:	6023      	str	r3, [r4, #0]
		RCC_CLK_EN(APB2_ID, USART1_ID);
 8003c22:	210e      	movs	r1, #14
 8003c24:	2001      	movs	r0, #1
 8003c26:	f7ff ff4b 	bl	8003ac0 <RCC_CLK_EN>
	}
	if (USARTx == USART2) {
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	4a53      	ldr	r2, [pc, #332]	@ (8003d7c <USART_init+0x17c>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d10d      	bne.n	8003c4e <USART_init+0x4e>
		Global_pinConfig[USART2_Index] = *pinConfig;
 8003c32:	4b51      	ldr	r3, [pc, #324]	@ (8003d78 <USART_init+0x178>)
 8003c34:	687a      	ldr	r2, [r7, #4]
 8003c36:	f103 0414 	add.w	r4, r3, #20
 8003c3a:	4615      	mov	r5, r2
 8003c3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003c3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003c40:	682b      	ldr	r3, [r5, #0]
 8003c42:	6023      	str	r3, [r4, #0]
		RCC_CLK_EN(APB1_ID, USART2_ID);
 8003c44:	2111      	movs	r1, #17
 8003c46:	2000      	movs	r0, #0
 8003c48:	f7ff ff3a 	bl	8003ac0 <RCC_CLK_EN>
 8003c4c:	e010      	b.n	8003c70 <USART_init+0x70>
	} else if (USARTx == USART3) {
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	4a4b      	ldr	r2, [pc, #300]	@ (8003d80 <USART_init+0x180>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d10c      	bne.n	8003c70 <USART_init+0x70>
		Global_pinConfig[USART3_Index] = *pinConfig;
 8003c56:	4b48      	ldr	r3, [pc, #288]	@ (8003d78 <USART_init+0x178>)
 8003c58:	687a      	ldr	r2, [r7, #4]
 8003c5a:	f103 0428 	add.w	r4, r3, #40	@ 0x28
 8003c5e:	4615      	mov	r5, r2
 8003c60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003c62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003c64:	682b      	ldr	r3, [r5, #0]
 8003c66:	6023      	str	r3, [r4, #0]
		RCC_CLK_EN(APB1_ID, USART3_ID);
 8003c68:	2112      	movs	r1, #18
 8003c6a:	2000      	movs	r0, #0
 8003c6c:	f7ff ff28 	bl	8003ac0 <RCC_CLK_EN>
	}

	/*            Enable USART Module    	  */
	//Bit 13 UE: USART enable
	USARTx->CR1 |= (1 << 13);
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	68db      	ldr	r3, [r3, #12]
 8003c74:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	60da      	str	r2, [r3, #12]
	/*            Enable TX/RX  		      */
	USARTx->CR1 |= pinConfig->USART_Mode;
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	68db      	ldr	r3, [r3, #12]
 8003c80:	687a      	ldr	r2, [r7, #4]
 8003c82:	7812      	ldrb	r2, [r2, #0]
 8003c84:	431a      	orrs	r2, r3
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	60da      	str	r2, [r3, #12]
	/*            Define The StopBits         */
	USARTx->CR2 |= pinConfig->StopBits;
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	691b      	ldr	r3, [r3, #16]
 8003c8e:	687a      	ldr	r2, [r7, #4]
 8003c90:	7a12      	ldrb	r2, [r2, #8]
 8003c92:	431a      	orrs	r2, r3
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	611a      	str	r2, [r3, #16]
	/*            Define The DataBits         */
	USARTx->CR1 |= pinConfig->DataLength;
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	68db      	ldr	r3, [r3, #12]
 8003c9c:	687a      	ldr	r2, [r7, #4]
 8003c9e:	7a52      	ldrb	r2, [r2, #9]
 8003ca0:	431a      	orrs	r2, r3
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	60da      	str	r2, [r3, #12]
	/*            Configure The Parity        */
	USARTx->CR1 |= pinConfig->Parity;
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	68db      	ldr	r3, [r3, #12]
 8003caa:	687a      	ldr	r2, [r7, #4]
 8003cac:	7a92      	ldrb	r2, [r2, #10]
 8003cae:	431a      	orrs	r2, r3
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	60da      	str	r2, [r3, #12]
	/*            Hardware Flow Control       */
	USARTx->CR3 |= pinConfig->FlowControl;
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	695b      	ldr	r3, [r3, #20]
 8003cb8:	687a      	ldr	r2, [r7, #4]
 8003cba:	7ad2      	ldrb	r2, [r2, #11]
 8003cbc:	431a      	orrs	r2, r3
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	615a      	str	r2, [r3, #20]
	/*            Define The BaudRate	      */
//FCLK - Input clock to the peripheral (PCLK1 for USART2, 3 or PCLK2 for USART1)
	if (USARTx == USART1) {
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	4a2b      	ldr	r2, [pc, #172]	@ (8003d74 <USART_init+0x174>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d103      	bne.n	8003cd2 <USART_init+0xd2>
		pclk = RCC_getPCKL2_Freq();
 8003cca:	f7ff fe11 	bl	80038f0 <RCC_getPCKL2_Freq>
 8003cce:	60f8      	str	r0, [r7, #12]
 8003cd0:	e002      	b.n	8003cd8 <USART_init+0xd8>
	} else {
		pclk = RCC_getPCKL1_Freq();
 8003cd2:	f7ff fdf9 	bl	80038c8 <RCC_getPCKL1_Freq>
 8003cd6:	60f8      	str	r0, [r7, #12]
	}

	BRR = USART_BRR(pclk, pinConfig->BaudRate);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	011b      	lsls	r3, r3, #4
 8003cde:	68fa      	ldr	r2, [r7, #12]
 8003ce0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ce4:	0119      	lsls	r1, r3, #4
 8003ce6:	68fa      	ldr	r2, [r7, #12]
 8003ce8:	4613      	mov	r3, r2
 8003cea:	009b      	lsls	r3, r3, #2
 8003cec:	4413      	add	r3, r2
 8003cee:	009a      	lsls	r2, r3, #2
 8003cf0:	441a      	add	r2, r3
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	009b      	lsls	r3, r3, #2
 8003cf8:	fbb2 f2f3 	udiv	r2, r2, r3
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	011b      	lsls	r3, r3, #4
 8003d02:	68f8      	ldr	r0, [r7, #12]
 8003d04:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d08:	2064      	movs	r0, #100	@ 0x64
 8003d0a:	fb00 f303 	mul.w	r3, r0, r3
 8003d0e:	1ad3      	subs	r3, r2, r3
 8003d10:	011b      	lsls	r3, r3, #4
 8003d12:	4a1c      	ldr	r2, [pc, #112]	@ (8003d84 <USART_init+0x184>)
 8003d14:	fba2 2303 	umull	r2, r3, r2, r3
 8003d18:	095b      	lsrs	r3, r3, #5
 8003d1a:	f003 030f 	and.w	r3, r3, #15
 8003d1e:	430b      	orrs	r3, r1
 8003d20:	60bb      	str	r3, [r7, #8]
	USARTx->BRR = BRR;
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	68ba      	ldr	r2, [r7, #8]
 8003d26:	609a      	str	r2, [r3, #8]

	/*            Enabling The Interrupt      */
	if (pinConfig->IRQ_Enable != USART_NONE) {
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	7b1b      	ldrb	r3, [r3, #12]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d01d      	beq.n	8003d6c <USART_init+0x16c>
		USARTx->CR1 |= (pinConfig->IRQ_Enable);
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	68db      	ldr	r3, [r3, #12]
 8003d34:	687a      	ldr	r2, [r7, #4]
 8003d36:	7b12      	ldrb	r2, [r2, #12]
 8003d38:	431a      	orrs	r2, r3
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	60da      	str	r2, [r3, #12]
		//		Enable NVIC For USARTx IRQ
		if (USARTx == USART1) {
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	4a0c      	ldr	r2, [pc, #48]	@ (8003d74 <USART_init+0x174>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d103      	bne.n	8003d4e <USART_init+0x14e>
			NVIC_Enable(NVIC_USART1);
 8003d46:	2025      	movs	r0, #37	@ 0x25
 8003d48:	f7ff fd44 	bl	80037d4 <NVIC_Enable>
			NVIC_Enable(NVIC_USART2);
		} else if (USARTx == USART3) {
			NVIC_Enable(NVIC_USART3);
		}
	}
}
 8003d4c:	e00e      	b.n	8003d6c <USART_init+0x16c>
		} else if (USARTx == USART2) {
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	4a0a      	ldr	r2, [pc, #40]	@ (8003d7c <USART_init+0x17c>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d103      	bne.n	8003d5e <USART_init+0x15e>
			NVIC_Enable(NVIC_USART2);
 8003d56:	2026      	movs	r0, #38	@ 0x26
 8003d58:	f7ff fd3c 	bl	80037d4 <NVIC_Enable>
}
 8003d5c:	e006      	b.n	8003d6c <USART_init+0x16c>
		} else if (USARTx == USART3) {
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	4a07      	ldr	r2, [pc, #28]	@ (8003d80 <USART_init+0x180>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d102      	bne.n	8003d6c <USART_init+0x16c>
			NVIC_Enable(NVIC_USART3);
 8003d66:	2027      	movs	r0, #39	@ 0x27
 8003d68:	f7ff fd34 	bl	80037d4 <NVIC_Enable>
}
 8003d6c:	bf00      	nop
 8003d6e:	3710      	adds	r7, #16
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bdb0      	pop	{r4, r5, r7, pc}
 8003d74:	40013800 	.word	0x40013800
 8003d78:	20000260 	.word	0x20000260
 8003d7c:	40004400 	.word	0x40004400
 8003d80:	40004800 	.word	0x40004800
 8003d84:	51eb851f 	.word	0x51eb851f

08003d88 <USART_SetPins>:
 * @brief 			-initialize GPIO Pins
 * @param [in] 		-USARTx: where x can be (1..3 depending on device used)
 * @retval 			-none
 * @Note			-Should enable the corresponding ALT  & GPIO  in RCC clock Also called after USART_Init()
 */
void USART_SetPins(USART_Registers_t *USARTx) {
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b084      	sub	sp, #16
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
	GPIO_PinConfig_t GPIO_pinConfig;
	if (USARTx == USART1) {
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	4a2b      	ldr	r2, [pc, #172]	@ (8003e40 <USART_SetPins+0xb8>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d118      	bne.n	8003dca <USART_SetPins+0x42>
		// configure  TX PORTA PIN9 As Alternate function Push pull
		GPIO_pinConfig.MODE = MODE_OUTPUT_AF_PP;
 8003d98:	2306      	movs	r3, #6
 8003d9a:	73bb      	strb	r3, [r7, #14]
		GPIO_pinConfig.Output_Speed = SPEED_10M;
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	73fb      	strb	r3, [r7, #15]
		GPIO_pinConfig.Pin_Number = PIN_9;
 8003da0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003da4:	81bb      	strh	r3, [r7, #12]
		GPIO_init(GPIOA, &GPIO_pinConfig);
 8003da6:	f107 030c 	add.w	r3, r7, #12
 8003daa:	4619      	mov	r1, r3
 8003dac:	4825      	ldr	r0, [pc, #148]	@ (8003e44 <USART_SetPins+0xbc>)
 8003dae:	f7ff fc77 	bl	80036a0 <GPIO_init>
		// configure  RX PORTA PIN10 As  Alternate function INPUT
		GPIO_pinConfig.MODE = MODE_INPUT_AF;
 8003db2:	2310      	movs	r3, #16
 8003db4:	73bb      	strb	r3, [r7, #14]
		GPIO_pinConfig.Pin_Number = PIN_10;
 8003db6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003dba:	81bb      	strh	r3, [r7, #12]
		GPIO_init(GPIOA, &GPIO_pinConfig);
 8003dbc:	f107 030c 	add.w	r3, r7, #12
 8003dc0:	4619      	mov	r1, r3
 8003dc2:	4820      	ldr	r0, [pc, #128]	@ (8003e44 <USART_SetPins+0xbc>)
 8003dc4:	f7ff fc6c 	bl	80036a0 <GPIO_init>
			GPIO_init(GPIOB, &GPIO_pinConfig);
		}

	}

}
 8003dc8:	e036      	b.n	8003e38 <USART_SetPins+0xb0>
	} else if (USARTx == USART2) {
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	4a1e      	ldr	r2, [pc, #120]	@ (8003e48 <USART_SetPins+0xc0>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d116      	bne.n	8003e00 <USART_SetPins+0x78>
		GPIO_pinConfig.MODE = MODE_OUTPUT_AF_PP;
 8003dd2:	2306      	movs	r3, #6
 8003dd4:	73bb      	strb	r3, [r7, #14]
		GPIO_pinConfig.Output_Speed = SPEED_10M;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	73fb      	strb	r3, [r7, #15]
		GPIO_pinConfig.Pin_Number = PIN_2;
 8003dda:	2304      	movs	r3, #4
 8003ddc:	81bb      	strh	r3, [r7, #12]
		GPIO_init(GPIOA, &GPIO_pinConfig);
 8003dde:	f107 030c 	add.w	r3, r7, #12
 8003de2:	4619      	mov	r1, r3
 8003de4:	4817      	ldr	r0, [pc, #92]	@ (8003e44 <USART_SetPins+0xbc>)
 8003de6:	f7ff fc5b 	bl	80036a0 <GPIO_init>
		GPIO_pinConfig.MODE = MODE_INPUT_AF;
 8003dea:	2310      	movs	r3, #16
 8003dec:	73bb      	strb	r3, [r7, #14]
		GPIO_pinConfig.Pin_Number = PIN_3;
 8003dee:	2308      	movs	r3, #8
 8003df0:	81bb      	strh	r3, [r7, #12]
		GPIO_init(GPIOA, &GPIO_pinConfig);
 8003df2:	f107 030c 	add.w	r3, r7, #12
 8003df6:	4619      	mov	r1, r3
 8003df8:	4812      	ldr	r0, [pc, #72]	@ (8003e44 <USART_SetPins+0xbc>)
 8003dfa:	f7ff fc51 	bl	80036a0 <GPIO_init>
}
 8003dfe:	e01b      	b.n	8003e38 <USART_SetPins+0xb0>
	} else if (USARTx == USART3) {
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	4a12      	ldr	r2, [pc, #72]	@ (8003e4c <USART_SetPins+0xc4>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d117      	bne.n	8003e38 <USART_SetPins+0xb0>
		GPIO_pinConfig.MODE = MODE_OUTPUT_AF_PP;
 8003e08:	2306      	movs	r3, #6
 8003e0a:	73bb      	strb	r3, [r7, #14]
		GPIO_pinConfig.Output_Speed = SPEED_10M;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	73fb      	strb	r3, [r7, #15]
		GPIO_pinConfig.Pin_Number = PIN_10;
 8003e10:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003e14:	81bb      	strh	r3, [r7, #12]
		GPIO_init(GPIOB, &GPIO_pinConfig);
 8003e16:	f107 030c 	add.w	r3, r7, #12
 8003e1a:	4619      	mov	r1, r3
 8003e1c:	480c      	ldr	r0, [pc, #48]	@ (8003e50 <USART_SetPins+0xc8>)
 8003e1e:	f7ff fc3f 	bl	80036a0 <GPIO_init>
		GPIO_pinConfig.MODE = MODE_INPUT_AF;
 8003e22:	2310      	movs	r3, #16
 8003e24:	73bb      	strb	r3, [r7, #14]
		GPIO_pinConfig.Pin_Number = PIN_11;
 8003e26:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003e2a:	81bb      	strh	r3, [r7, #12]
		GPIO_init(GPIOB, &GPIO_pinConfig);
 8003e2c:	f107 030c 	add.w	r3, r7, #12
 8003e30:	4619      	mov	r1, r3
 8003e32:	4807      	ldr	r0, [pc, #28]	@ (8003e50 <USART_SetPins+0xc8>)
 8003e34:	f7ff fc34 	bl	80036a0 <GPIO_init>
}
 8003e38:	bf00      	nop
 8003e3a:	3710      	adds	r7, #16
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}
 8003e40:	40013800 	.word	0x40013800
 8003e44:	40010800 	.word	0x40010800
 8003e48:	40004400 	.word	0x40004400
 8003e4c:	40004800 	.word	0x40004800
 8003e50:	40010c00 	.word	0x40010c00

08003e54 <USART_Send>:
 When receiving with the parity enabled, the value read in the MSB bit is the received parity
 bit
 */

void USART_Send(USART_Registers_t *USARTx, uint16 *pTxBuffer,
		enum Polling_Mechanism PollingEn) {
 8003e54:	b480      	push	{r7}
 8003e56:	b087      	sub	sp, #28
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	60f8      	str	r0, [r7, #12]
 8003e5c:	60b9      	str	r1, [r7, #8]
 8003e5e:	4613      	mov	r3, r2
 8003e60:	71fb      	strb	r3, [r7, #7]
	uint8 index = 0;
 8003e62:	2300      	movs	r3, #0
 8003e64:	75fb      	strb	r3, [r7, #23]
	index = (USARTx == USART1) ?
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	4a10      	ldr	r2, [pc, #64]	@ (8003eac <USART_Send+0x58>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d007      	beq.n	8003e7e <USART_Send+0x2a>
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	4a0f      	ldr	r2, [pc, #60]	@ (8003eb0 <USART_Send+0x5c>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d101      	bne.n	8003e7a <USART_Send+0x26>
 8003e76:	2301      	movs	r3, #1
 8003e78:	e002      	b.n	8003e80 <USART_Send+0x2c>
 8003e7a:	2302      	movs	r3, #2
 8003e7c:	e000      	b.n	8003e80 <USART_Send+0x2c>
 8003e7e:	2300      	movs	r3, #0
 8003e80:	75fb      	strb	r3, [r7, #23]
			USART1_Index : ((USARTx == USART2) ? USART2_Index : USART3_Index);
//Write the data to send in the USART_DR register (this clears the TXE bit).
	if (PollingEn == Enable)
 8003e82:	79fb      	ldrb	r3, [r7, #7]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d106      	bne.n	8003e96 <USART_Send+0x42>
		while (!(USARTx->SR & (1 << 7)))
 8003e88:	bf00      	nop
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d0f9      	beq.n	8003e8a <USART_Send+0x36>
			;	//TXE bit is 1 means Data is completely sent.

	if (Global_pinConfig[index].DataLength == USART_DataLength9) {
		USARTx->DR = (*pTxBuffer & (uint16) 0x01FF);
	} else {
		USARTx->DR = (*pTxBuffer & (uint8) 0xFF);
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	881b      	ldrh	r3, [r3, #0]
 8003e9a:	b2da      	uxtb	r2, r3
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	605a      	str	r2, [r3, #4]
	}
}
 8003ea0:	bf00      	nop
 8003ea2:	371c      	adds	r7, #28
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bc80      	pop	{r7}
 8003ea8:	4770      	bx	lr
 8003eaa:	bf00      	nop
 8003eac:	40013800 	.word	0x40013800
 8003eb0:	40004400 	.word	0x40004400

08003eb4 <USART_Recieve>:
 * @param [in] 		- pTxBuffer:
 * @param [in] 		- PollingEn: Enables or disables the polling mechanism
 * @retval 			- none
 */
uint16 USART_Recieve(USART_Registers_t *USARTx,
		enum Polling_Mechanism PollingEn) {
 8003eb4:	b480      	push	{r7}
 8003eb6:	b085      	sub	sp, #20
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
 8003ebc:	460b      	mov	r3, r1
 8003ebe:	70fb      	strb	r3, [r7, #3]
	uint16 pTxBuffer;
	uint8 index = 0;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	73fb      	strb	r3, [r7, #15]
	index = (USARTx == USART1) ?
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	4a1a      	ldr	r2, [pc, #104]	@ (8003f30 <USART_Recieve+0x7c>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d007      	beq.n	8003edc <USART_Recieve+0x28>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	4a19      	ldr	r2, [pc, #100]	@ (8003f34 <USART_Recieve+0x80>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d101      	bne.n	8003ed8 <USART_Recieve+0x24>
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	e002      	b.n	8003ede <USART_Recieve+0x2a>
 8003ed8:	2302      	movs	r3, #2
 8003eda:	e000      	b.n	8003ede <USART_Recieve+0x2a>
 8003edc:	2300      	movs	r3, #0
 8003ede:	73fb      	strb	r3, [r7, #15]
	/*
	 * Bit 5 RXNE: Read data register not empty
	 * This bit is set by hardware when the content of the RDR shift register has been transferred to
	 * the USART_DR register.
	 */
	if (PollingEn == Enable)
 8003ee0:	78fb      	ldrb	r3, [r7, #3]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d106      	bne.n	8003ef4 <USART_Recieve+0x40>
		while (!(USARTx->SR & (1 << 5)))
 8003ee6:	bf00      	nop
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f003 0320 	and.w	r3, r3, #32
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d0f9      	beq.n	8003ee8 <USART_Recieve+0x34>
			// If parity is enabled  then ignore the MSB
			pTxBuffer = (USARTx->DR & (uint8) 0xFF);
		}

	} else {
		if (Global_pinConfig[index].Parity == USART_Parity_None) {
 8003ef4:	7bfa      	ldrb	r2, [r7, #15]
 8003ef6:	4910      	ldr	r1, [pc, #64]	@ (8003f38 <USART_Recieve+0x84>)
 8003ef8:	4613      	mov	r3, r2
 8003efa:	009b      	lsls	r3, r3, #2
 8003efc:	4413      	add	r3, r2
 8003efe:	009b      	lsls	r3, r3, #2
 8003f00:	440b      	add	r3, r1
 8003f02:	330a      	adds	r3, #10
 8003f04:	781b      	ldrb	r3, [r3, #0]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d105      	bne.n	8003f16 <USART_Recieve+0x62>
			// case No parity
			pTxBuffer = (USARTx->DR & (uint8) 0xFF);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	b29b      	uxth	r3, r3
 8003f10:	b2db      	uxtb	r3, r3
 8003f12:	81bb      	strh	r3, [r7, #12]
 8003f14:	e005      	b.n	8003f22 <USART_Recieve+0x6e>

		} else {

			// If parity is enabled  then ignore the MSB
			pTxBuffer = (USARTx->DR & (uint8) 0x7F);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	b29b      	uxth	r3, r3
 8003f1c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003f20:	81bb      	strh	r3, [r7, #12]
		}
	}
	return pTxBuffer;
 8003f22:	89bb      	ldrh	r3, [r7, #12]
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	3714      	adds	r7, #20
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bc80      	pop	{r7}
 8003f2c:	4770      	bx	lr
 8003f2e:	bf00      	nop
 8003f30:	40013800 	.word	0x40013800
 8003f34:	40004400 	.word	0x40004400
 8003f38:	20000260 	.word	0x20000260

08003f3c <USART_SendString>:
	 */
	while (!(USARTx->SR & (1 << 6)))
		;
}

void USART_SendString(USART_Registers_t *USARTx, const uint8 *str) {
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b084      	sub	sp, #16
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
 8003f44:	6039      	str	r1, [r7, #0]
	// Calculate string length
	size_t len = strlen(str);
 8003f46:	6838      	ldr	r0, [r7, #0]
 8003f48:	f7fc f91c 	bl	8000184 <strlen>
 8003f4c:	60b8      	str	r0, [r7, #8]

	// Loop through each character and send it
	for (size_t i = 0; i < len; i++) {
 8003f4e:	2300      	movs	r3, #0
 8003f50:	60fb      	str	r3, [r7, #12]
 8003f52:	e00a      	b.n	8003f6a <USART_SendString+0x2e>
		// Send character
		USART_Send(USARTx, (uint16*) &str[i], Enable);
 8003f54:	683a      	ldr	r2, [r7, #0]
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	4413      	add	r3, r2
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	4619      	mov	r1, r3
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f7ff ff78 	bl	8003e54 <USART_Send>
	for (size_t i = 0; i < len; i++) {
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	3301      	adds	r3, #1
 8003f68:	60fb      	str	r3, [r7, #12]
 8003f6a:	68fa      	ldr	r2, [r7, #12]
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	429a      	cmp	r2, r3
 8003f70:	d3f0      	bcc.n	8003f54 <USART_SendString+0x18>

	}
}
 8003f72:	bf00      	nop
 8003f74:	bf00      	nop
 8003f76:	3710      	adds	r7, #16
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}

08003f7c <USART_ReceiveString>:

void USART_ReceiveString(USART_Registers_t *USARTx,uint8 *buffer) {
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b084      	sub	sp, #16
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
 8003f84:	6039      	str	r1, [r7, #0]

	uint8 index = 0;
 8003f86:	2300      	movs	r3, #0
 8003f88:	73fb      	strb	r3, [r7, #15]

	// Receive the first character and store it in the array.
	buffer[index] = USART_Recieve(USARTx, Enable);
 8003f8a:	2100      	movs	r1, #0
 8003f8c:	6878      	ldr	r0, [r7, #4]
 8003f8e:	f7ff ff91 	bl	8003eb4 <USART_Recieve>
 8003f92:	4603      	mov	r3, r0
 8003f94:	4619      	mov	r1, r3
 8003f96:	7bfb      	ldrb	r3, [r7, #15]
 8003f98:	683a      	ldr	r2, [r7, #0]
 8003f9a:	4413      	add	r3, r2
 8003f9c:	b2ca      	uxtb	r2, r1
 8003f9e:	701a      	strb	r2, [r3, #0]

	// Keep receiving characters until the end of the string or '#' character is received.
	while (buffer[index] != '\0' && buffer[index] != '#') {
 8003fa0:	e00d      	b.n	8003fbe <USART_ReceiveString+0x42>
		index++;
 8003fa2:	7bfb      	ldrb	r3, [r7, #15]
 8003fa4:	3301      	adds	r3, #1
 8003fa6:	73fb      	strb	r3, [r7, #15]
		buffer[index] = USART_Recieve(USARTx, Enable);
 8003fa8:	2100      	movs	r1, #0
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f7ff ff82 	bl	8003eb4 <USART_Recieve>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	4619      	mov	r1, r3
 8003fb4:	7bfb      	ldrb	r3, [r7, #15]
 8003fb6:	683a      	ldr	r2, [r7, #0]
 8003fb8:	4413      	add	r3, r2
 8003fba:	b2ca      	uxtb	r2, r1
 8003fbc:	701a      	strb	r2, [r3, #0]
	while (buffer[index] != '\0' && buffer[index] != '#') {
 8003fbe:	7bfb      	ldrb	r3, [r7, #15]
 8003fc0:	683a      	ldr	r2, [r7, #0]
 8003fc2:	4413      	add	r3, r2
 8003fc4:	781b      	ldrb	r3, [r3, #0]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d005      	beq.n	8003fd6 <USART_ReceiveString+0x5a>
 8003fca:	7bfb      	ldrb	r3, [r7, #15]
 8003fcc:	683a      	ldr	r2, [r7, #0]
 8003fce:	4413      	add	r3, r2
 8003fd0:	781b      	ldrb	r3, [r3, #0]
 8003fd2:	2b23      	cmp	r3, #35	@ 0x23
 8003fd4:	d1e5      	bne.n	8003fa2 <USART_ReceiveString+0x26>
	}

//	// Add the null terminator at the end of the received string.
	buffer[index] = '\0';
 8003fd6:	7bfb      	ldrb	r3, [r7, #15]
 8003fd8:	683a      	ldr	r2, [r7, #0]
 8003fda:	4413      	add	r3, r2
 8003fdc:	2200      	movs	r2, #0
 8003fde:	701a      	strb	r2, [r3, #0]
}
 8003fe0:	bf00      	nop
 8003fe2:	3710      	adds	r7, #16
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}

08003fe8 <USART1_IRQHandler>:

// ISR
void USART1_IRQHandler() {
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	af00      	add	r7, sp, #0
	Global_pinConfig[USART1_Index].P_CallBack_Fun();
 8003fec:	4b02      	ldr	r3, [pc, #8]	@ (8003ff8 <USART1_IRQHandler+0x10>)
 8003fee:	691b      	ldr	r3, [r3, #16]
 8003ff0:	4798      	blx	r3
}
 8003ff2:	bf00      	nop
 8003ff4:	bd80      	pop	{r7, pc}
 8003ff6:	bf00      	nop
 8003ff8:	20000260 	.word	0x20000260

08003ffc <USART2_IRQHandler>:
void USART2_IRQHandler() {
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	af00      	add	r7, sp, #0
	Global_pinConfig[USART2_Index].P_CallBack_Fun();
 8004000:	4b02      	ldr	r3, [pc, #8]	@ (800400c <USART2_IRQHandler+0x10>)
 8004002:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004004:	4798      	blx	r3
}
 8004006:	bf00      	nop
 8004008:	bd80      	pop	{r7, pc}
 800400a:	bf00      	nop
 800400c:	20000260 	.word	0x20000260

08004010 <USART3_IRQHandler>:
void USART3_IRQHandler() {
 8004010:	b580      	push	{r7, lr}
 8004012:	af00      	add	r7, sp, #0
	Global_pinConfig[USART3_Index].P_CallBack_Fun();
 8004014:	4b02      	ldr	r3, [pc, #8]	@ (8004020 <USART3_IRQHandler+0x10>)
 8004016:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004018:	4798      	blx	r3
}
 800401a:	bf00      	nop
 800401c:	bd80      	pop	{r7, pc}
 800401e:	bf00      	nop
 8004020:	20000260 	.word	0x20000260

08004024 <main>:
 ******************************************************************************
 */
#include "main.h"
#include "FreeRTOS.h"

int main(void) {
 8004024:	b580      	push	{r7, lr}
 8004026:	b0a0      	sub	sp, #128	@ 0x80
 8004028:	af00      	add	r7, sp, #0
	RCC_init(RCC_HSE, HSE_CRYSTAL, 0, 0);
 800402a:	2300      	movs	r3, #0
 800402c:	2200      	movs	r2, #0
 800402e:	2100      	movs	r1, #0
 8004030:	2001      	movs	r0, #1
 8004032:	f7ff fc85 	bl	8003940 <RCC_init>
	RCC_CLK_EN(APB2_ID, GPIOA_ID);
 8004036:	2102      	movs	r1, #2
 8004038:	2001      	movs	r0, #1
 800403a:	f7ff fd41 	bl	8003ac0 <RCC_CLK_EN>
	RCC_CLK_EN(APB2_ID, USART1_ID);
 800403e:	210e      	movs	r1, #14
 8004040:	2001      	movs	r0, #1
 8004042:	f7ff fd3d 	bl	8003ac0 <RCC_CLK_EN>

	USART_pinConfig_t USART_pinConfig;
	USART_pinConfig.BaudRate = USART_BaudRate_9600;
 8004046:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
 800404a:	66fb      	str	r3, [r7, #108]	@ 0x6c
	USART_pinConfig.Parity = USART_Parity_None;
 800404c:	2300      	movs	r3, #0
 800404e:	f887 3072 	strb.w	r3, [r7, #114]	@ 0x72
	USART_pinConfig.DataLength = USART_DataLength8;
 8004052:	2300      	movs	r3, #0
 8004054:	f887 3071 	strb.w	r3, [r7, #113]	@ 0x71
	USART_pinConfig.StopBits = USART_StopBits_1;
 8004058:	2300      	movs	r3, #0
 800405a:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70
	USART_pinConfig.FlowControl = USART_FlowControl_NONE;
 800405e:	2300      	movs	r3, #0
 8004060:	f887 3073 	strb.w	r3, [r7, #115]	@ 0x73
	USART_pinConfig.USART_Mode = USART_TXRXEN;
 8004064:	230c      	movs	r3, #12
 8004066:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
	USART_pinConfig.P_CallBack_Fun = NULL;
 800406a:	2300      	movs	r3, #0
 800406c:	67bb      	str	r3, [r7, #120]	@ 0x78
	USART_pinConfig.IRQ_Enable = USART_NONE;
 800406e:	2300      	movs	r3, #0
 8004070:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74

	USART_init(&USART_pinConfig, USART1);
 8004074:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8004078:	4939      	ldr	r1, [pc, #228]	@ (8004160 <main+0x13c>)
 800407a:	4618      	mov	r0, r3
 800407c:	f7ff fdc0 	bl	8003c00 <USART_init>
	USART_SetPins(USART1);
 8004080:	4837      	ldr	r0, [pc, #220]	@ (8004160 <main+0x13c>)
 8004082:	f7ff fe81 	bl	8003d88 <USART_SetPins>

	node_t node = { .status = 0 };
 8004086:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800408a:	2200      	movs	r2, #0
 800408c:	601a      	str	r2, [r3, #0]
 800408e:	605a      	str	r2, [r3, #4]
 8004090:	609a      	str	r2, [r3, #8]
	uint8 received_json[50];

	uint16 val;
	while (1) {

		USART_ReceiveString(USART1, (uint8 *)received_json);
 8004092:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004096:	4619      	mov	r1, r3
 8004098:	4831      	ldr	r0, [pc, #196]	@ (8004160 <main+0x13c>)
 800409a:	f7ff ff6f 	bl	8003f7c <USART_ReceiveString>
		Parsed_JSON_t parsedMessage = JSON_parseString((uint8 *)received_json);
 800409e:	1d3b      	adds	r3, r7, #4
 80040a0:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80040a4:	4611      	mov	r1, r2
 80040a6:	4618      	mov	r0, r3
 80040a8:	f7fc fec2 	bl	8000e30 <JSON_parseString>
		node.nodeID = parsedMessage.nodeID;
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	663b      	str	r3, [r7, #96]	@ 0x60

		if (!strcmp((char*) parsedMessage.command, "ENA")) {
 80040b0:	1d3b      	adds	r3, r7, #4
 80040b2:	492c      	ldr	r1, [pc, #176]	@ (8004164 <main+0x140>)
 80040b4:	4618      	mov	r0, r3
 80040b6:	f7fc f85b 	bl	8000170 <strcmp>
 80040ba:	4603      	mov	r3, r0
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d105      	bne.n	80040cc <main+0xa8>
			enableNode(&node);
 80040c0:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80040c4:	4618      	mov	r0, r3
 80040c6:	f7fc fd9b 	bl	8000c00 <enableNode>
 80040ca:	e7e2      	b.n	8004092 <main+0x6e>
		} else if (!strcmp((char*) parsedMessage.command, "ACT")) {
 80040cc:	1d3b      	adds	r3, r7, #4
 80040ce:	4926      	ldr	r1, [pc, #152]	@ (8004168 <main+0x144>)
 80040d0:	4618      	mov	r0, r3
 80040d2:	f7fc f84d 	bl	8000170 <strcmp>
 80040d6:	4603      	mov	r3, r0
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d109      	bne.n	80040f0 <main+0xcc>
			actOnNode(&node, (uint8)(parsedMessage.data[0]- '0'));
 80040dc:	7e3b      	ldrb	r3, [r7, #24]
 80040de:	3b30      	subs	r3, #48	@ 0x30
 80040e0:	b2da      	uxtb	r2, r3
 80040e2:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80040e6:	4611      	mov	r1, r2
 80040e8:	4618      	mov	r0, r3
 80040ea:	f7fc fdff 	bl	8000cec <actOnNode>
 80040ee:	e7d0      	b.n	8004092 <main+0x6e>
		} else if (!strcmp((char*) parsedMessage.command, "STA")) {
 80040f0:	1d3b      	adds	r3, r7, #4
 80040f2:	491e      	ldr	r1, [pc, #120]	@ (800416c <main+0x148>)
 80040f4:	4618      	mov	r0, r3
 80040f6:	f7fc f83b 	bl	8000170 <strcmp>
 80040fa:	4603      	mov	r3, r0
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d105      	bne.n	800410c <main+0xe8>
			getNodeStatus(&node);
 8004100:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8004104:	4618      	mov	r0, r3
 8004106:	f7fc fe0b 	bl	8000d20 <getNodeStatus>
 800410a:	e7c2      	b.n	8004092 <main+0x6e>
		}else if (!strcmp((char*) parsedMessage.command, "DUR")) {
 800410c:	1d3b      	adds	r3, r7, #4
 800410e:	4918      	ldr	r1, [pc, #96]	@ (8004170 <main+0x14c>)
 8004110:	4618      	mov	r0, r3
 8004112:	f7fc f82d 	bl	8000170 <strcmp>
 8004116:	4603      	mov	r3, r0
 8004118:	2b00      	cmp	r3, #0
 800411a:	d112      	bne.n	8004142 <main+0x11e>
			uint32 data;
			sprintf(parsedMessage.data, "%d", data);
 800411c:	1d3b      	adds	r3, r7, #4
 800411e:	3314      	adds	r3, #20
 8004120:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8004122:	4914      	ldr	r1, [pc, #80]	@ (8004174 <main+0x150>)
 8004124:	4618      	mov	r0, r3
 8004126:	f001 f957 	bl	80053d8 <siprintf>
			setNodeDuration(&node, data);
 800412a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800412e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004130:	4618      	mov	r0, r3
 8004132:	f7fc fe1b 	bl	8000d6c <setNodeDuration>
			getNodeReading(&node); //???
 8004136:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800413a:	4618      	mov	r0, r3
 800413c:	f7fc fe24 	bl	8000d88 <getNodeReading>
 8004140:	e7a7      	b.n	8004092 <main+0x6e>
		}else if (!strcmp((char*) parsedMessage.command, "DIS")) {
 8004142:	1d3b      	adds	r3, r7, #4
 8004144:	490c      	ldr	r1, [pc, #48]	@ (8004178 <main+0x154>)
 8004146:	4618      	mov	r0, r3
 8004148:	f7fc f812 	bl	8000170 <strcmp>
 800414c:	4603      	mov	r3, r0
 800414e:	2b00      	cmp	r3, #0
 8004150:	d19f      	bne.n	8004092 <main+0x6e>
			disableNode(&node);
 8004152:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8004156:	4618      	mov	r0, r3
 8004158:	f7fc fdb8 	bl	8000ccc <disableNode>
	while (1) {
 800415c:	e799      	b.n	8004092 <main+0x6e>
 800415e:	bf00      	nop
 8004160:	40013800 	.word	0x40013800
 8004164:	08007ce4 	.word	0x08007ce4
 8004168:	08007ce8 	.word	0x08007ce8
 800416c:	08007cec 	.word	0x08007cec
 8004170:	08007cf0 	.word	0x08007cf0
 8004174:	08007cf4 	.word	0x08007cf4
 8004178:	08007cf8 	.word	0x08007cf8

0800417c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800417c:	b480      	push	{r7}
 800417e:	af00      	add	r7, sp, #0
	return 1;
 8004180:	2301      	movs	r3, #1
}
 8004182:	4618      	mov	r0, r3
 8004184:	46bd      	mov	sp, r7
 8004186:	bc80      	pop	{r7}
 8004188:	4770      	bx	lr

0800418a <_kill>:

int _kill(int pid, int sig)
{
 800418a:	b580      	push	{r7, lr}
 800418c:	b082      	sub	sp, #8
 800418e:	af00      	add	r7, sp, #0
 8004190:	6078      	str	r0, [r7, #4]
 8004192:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004194:	f001 fa32 	bl	80055fc <__errno>
 8004198:	4603      	mov	r3, r0
 800419a:	2216      	movs	r2, #22
 800419c:	601a      	str	r2, [r3, #0]
	return -1;
 800419e:	f04f 33ff 	mov.w	r3, #4294967295
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	3708      	adds	r7, #8
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}

080041aa <_exit>:

void _exit (int status)
{
 80041aa:	b580      	push	{r7, lr}
 80041ac:	b082      	sub	sp, #8
 80041ae:	af00      	add	r7, sp, #0
 80041b0:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80041b2:	f04f 31ff 	mov.w	r1, #4294967295
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	f7ff ffe7 	bl	800418a <_kill>
	while (1) {}		/* Make sure we hang here */
 80041bc:	bf00      	nop
 80041be:	e7fd      	b.n	80041bc <_exit+0x12>

080041c0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b086      	sub	sp, #24
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	60f8      	str	r0, [r7, #12]
 80041c8:	60b9      	str	r1, [r7, #8]
 80041ca:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80041cc:	2300      	movs	r3, #0
 80041ce:	617b      	str	r3, [r7, #20]
 80041d0:	e00a      	b.n	80041e8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80041d2:	f3af 8000 	nop.w
 80041d6:	4601      	mov	r1, r0
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	1c5a      	adds	r2, r3, #1
 80041dc:	60ba      	str	r2, [r7, #8]
 80041de:	b2ca      	uxtb	r2, r1
 80041e0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	3301      	adds	r3, #1
 80041e6:	617b      	str	r3, [r7, #20]
 80041e8:	697a      	ldr	r2, [r7, #20]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	429a      	cmp	r2, r3
 80041ee:	dbf0      	blt.n	80041d2 <_read+0x12>
	}

return len;
 80041f0:	687b      	ldr	r3, [r7, #4]
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	3718      	adds	r7, #24
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}

080041fa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80041fa:	b580      	push	{r7, lr}
 80041fc:	b086      	sub	sp, #24
 80041fe:	af00      	add	r7, sp, #0
 8004200:	60f8      	str	r0, [r7, #12]
 8004202:	60b9      	str	r1, [r7, #8]
 8004204:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004206:	2300      	movs	r3, #0
 8004208:	617b      	str	r3, [r7, #20]
 800420a:	e009      	b.n	8004220 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	1c5a      	adds	r2, r3, #1
 8004210:	60ba      	str	r2, [r7, #8]
 8004212:	781b      	ldrb	r3, [r3, #0]
 8004214:	4618      	mov	r0, r3
 8004216:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	3301      	adds	r3, #1
 800421e:	617b      	str	r3, [r7, #20]
 8004220:	697a      	ldr	r2, [r7, #20]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	429a      	cmp	r2, r3
 8004226:	dbf1      	blt.n	800420c <_write+0x12>
	}
	return len;
 8004228:	687b      	ldr	r3, [r7, #4]
}
 800422a:	4618      	mov	r0, r3
 800422c:	3718      	adds	r7, #24
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}

08004232 <_close>:

int _close(int file)
{
 8004232:	b480      	push	{r7}
 8004234:	b083      	sub	sp, #12
 8004236:	af00      	add	r7, sp, #0
 8004238:	6078      	str	r0, [r7, #4]
	return -1;
 800423a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800423e:	4618      	mov	r0, r3
 8004240:	370c      	adds	r7, #12
 8004242:	46bd      	mov	sp, r7
 8004244:	bc80      	pop	{r7}
 8004246:	4770      	bx	lr

08004248 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004248:	b480      	push	{r7}
 800424a:	b083      	sub	sp, #12
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
 8004250:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004258:	605a      	str	r2, [r3, #4]
	return 0;
 800425a:	2300      	movs	r3, #0
}
 800425c:	4618      	mov	r0, r3
 800425e:	370c      	adds	r7, #12
 8004260:	46bd      	mov	sp, r7
 8004262:	bc80      	pop	{r7}
 8004264:	4770      	bx	lr

08004266 <_isatty>:

int _isatty(int file)
{
 8004266:	b480      	push	{r7}
 8004268:	b083      	sub	sp, #12
 800426a:	af00      	add	r7, sp, #0
 800426c:	6078      	str	r0, [r7, #4]
	return 1;
 800426e:	2301      	movs	r3, #1
}
 8004270:	4618      	mov	r0, r3
 8004272:	370c      	adds	r7, #12
 8004274:	46bd      	mov	sp, r7
 8004276:	bc80      	pop	{r7}
 8004278:	4770      	bx	lr

0800427a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800427a:	b480      	push	{r7}
 800427c:	b085      	sub	sp, #20
 800427e:	af00      	add	r7, sp, #0
 8004280:	60f8      	str	r0, [r7, #12]
 8004282:	60b9      	str	r1, [r7, #8]
 8004284:	607a      	str	r2, [r7, #4]
	return 0;
 8004286:	2300      	movs	r3, #0
}
 8004288:	4618      	mov	r0, r3
 800428a:	3714      	adds	r7, #20
 800428c:	46bd      	mov	sp, r7
 800428e:	bc80      	pop	{r7}
 8004290:	4770      	bx	lr
	...

08004294 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b086      	sub	sp, #24
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800429c:	4a14      	ldr	r2, [pc, #80]	@ (80042f0 <_sbrk+0x5c>)
 800429e:	4b15      	ldr	r3, [pc, #84]	@ (80042f4 <_sbrk+0x60>)
 80042a0:	1ad3      	subs	r3, r2, r3
 80042a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80042a8:	4b13      	ldr	r3, [pc, #76]	@ (80042f8 <_sbrk+0x64>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d102      	bne.n	80042b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80042b0:	4b11      	ldr	r3, [pc, #68]	@ (80042f8 <_sbrk+0x64>)
 80042b2:	4a12      	ldr	r2, [pc, #72]	@ (80042fc <_sbrk+0x68>)
 80042b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80042b6:	4b10      	ldr	r3, [pc, #64]	@ (80042f8 <_sbrk+0x64>)
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	4413      	add	r3, r2
 80042be:	693a      	ldr	r2, [r7, #16]
 80042c0:	429a      	cmp	r2, r3
 80042c2:	d207      	bcs.n	80042d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80042c4:	f001 f99a 	bl	80055fc <__errno>
 80042c8:	4603      	mov	r3, r0
 80042ca:	220c      	movs	r2, #12
 80042cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80042ce:	f04f 33ff 	mov.w	r3, #4294967295
 80042d2:	e009      	b.n	80042e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80042d4:	4b08      	ldr	r3, [pc, #32]	@ (80042f8 <_sbrk+0x64>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80042da:	4b07      	ldr	r3, [pc, #28]	@ (80042f8 <_sbrk+0x64>)
 80042dc:	681a      	ldr	r2, [r3, #0]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	4413      	add	r3, r2
 80042e2:	4a05      	ldr	r2, [pc, #20]	@ (80042f8 <_sbrk+0x64>)
 80042e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80042e6:	68fb      	ldr	r3, [r7, #12]
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	3718      	adds	r7, #24
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bd80      	pop	{r7, pc}
 80042f0:	20005000 	.word	0x20005000
 80042f4:	00000400 	.word	0x00000400
 80042f8:	2000029c 	.word	0x2000029c
 80042fc:	200003f0 	.word	0x200003f0

08004300 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004300:	480d      	ldr	r0, [pc, #52]	@ (8004338 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004302:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8004304:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004308:	480c      	ldr	r0, [pc, #48]	@ (800433c <LoopForever+0x6>)
  ldr r1, =_edata
 800430a:	490d      	ldr	r1, [pc, #52]	@ (8004340 <LoopForever+0xa>)
  ldr r2, =_sidata
 800430c:	4a0d      	ldr	r2, [pc, #52]	@ (8004344 <LoopForever+0xe>)
  movs r3, #0
 800430e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004310:	e002      	b.n	8004318 <LoopCopyDataInit>

08004312 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004312:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004314:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004316:	3304      	adds	r3, #4

08004318 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004318:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800431a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800431c:	d3f9      	bcc.n	8004312 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800431e:	4a0a      	ldr	r2, [pc, #40]	@ (8004348 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004320:	4c0a      	ldr	r4, [pc, #40]	@ (800434c <LoopForever+0x16>)
  movs r3, #0
 8004322:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004324:	e001      	b.n	800432a <LoopFillZerobss>

08004326 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004326:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004328:	3204      	adds	r2, #4

0800432a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800432a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800432c:	d3fb      	bcc.n	8004326 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800432e:	f001 f96b 	bl	8005608 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004332:	f7ff fe77 	bl	8004024 <main>

08004336 <LoopForever>:

LoopForever:
  b LoopForever
 8004336:	e7fe      	b.n	8004336 <LoopForever>
  ldr   r0, =_estack
 8004338:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 800433c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004340:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8004344:	080080f4 	.word	0x080080f4
  ldr r2, =_sbss
 8004348:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 800434c:	200003ec 	.word	0x200003ec

08004350 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004350:	e7fe      	b.n	8004350 <ADC1_2_IRQHandler>
	...

08004354 <malloc>:
 8004354:	4b02      	ldr	r3, [pc, #8]	@ (8004360 <malloc+0xc>)
 8004356:	4601      	mov	r1, r0
 8004358:	6818      	ldr	r0, [r3, #0]
 800435a:	f000 b82d 	b.w	80043b8 <_malloc_r>
 800435e:	bf00      	nop
 8004360:	200001a0 	.word	0x200001a0

08004364 <free>:
 8004364:	4b02      	ldr	r3, [pc, #8]	@ (8004370 <free+0xc>)
 8004366:	4601      	mov	r1, r0
 8004368:	6818      	ldr	r0, [r3, #0]
 800436a:	f001 b989 	b.w	8005680 <_free_r>
 800436e:	bf00      	nop
 8004370:	200001a0 	.word	0x200001a0

08004374 <sbrk_aligned>:
 8004374:	b570      	push	{r4, r5, r6, lr}
 8004376:	4e0f      	ldr	r6, [pc, #60]	@ (80043b4 <sbrk_aligned+0x40>)
 8004378:	460c      	mov	r4, r1
 800437a:	6831      	ldr	r1, [r6, #0]
 800437c:	4605      	mov	r5, r0
 800437e:	b911      	cbnz	r1, 8004386 <sbrk_aligned+0x12>
 8004380:	f001 f91a 	bl	80055b8 <_sbrk_r>
 8004384:	6030      	str	r0, [r6, #0]
 8004386:	4621      	mov	r1, r4
 8004388:	4628      	mov	r0, r5
 800438a:	f001 f915 	bl	80055b8 <_sbrk_r>
 800438e:	1c43      	adds	r3, r0, #1
 8004390:	d103      	bne.n	800439a <sbrk_aligned+0x26>
 8004392:	f04f 34ff 	mov.w	r4, #4294967295
 8004396:	4620      	mov	r0, r4
 8004398:	bd70      	pop	{r4, r5, r6, pc}
 800439a:	1cc4      	adds	r4, r0, #3
 800439c:	f024 0403 	bic.w	r4, r4, #3
 80043a0:	42a0      	cmp	r0, r4
 80043a2:	d0f8      	beq.n	8004396 <sbrk_aligned+0x22>
 80043a4:	1a21      	subs	r1, r4, r0
 80043a6:	4628      	mov	r0, r5
 80043a8:	f001 f906 	bl	80055b8 <_sbrk_r>
 80043ac:	3001      	adds	r0, #1
 80043ae:	d1f2      	bne.n	8004396 <sbrk_aligned+0x22>
 80043b0:	e7ef      	b.n	8004392 <sbrk_aligned+0x1e>
 80043b2:	bf00      	nop
 80043b4:	200002a0 	.word	0x200002a0

080043b8 <_malloc_r>:
 80043b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80043bc:	1ccd      	adds	r5, r1, #3
 80043be:	f025 0503 	bic.w	r5, r5, #3
 80043c2:	3508      	adds	r5, #8
 80043c4:	2d0c      	cmp	r5, #12
 80043c6:	bf38      	it	cc
 80043c8:	250c      	movcc	r5, #12
 80043ca:	2d00      	cmp	r5, #0
 80043cc:	4606      	mov	r6, r0
 80043ce:	db01      	blt.n	80043d4 <_malloc_r+0x1c>
 80043d0:	42a9      	cmp	r1, r5
 80043d2:	d904      	bls.n	80043de <_malloc_r+0x26>
 80043d4:	230c      	movs	r3, #12
 80043d6:	6033      	str	r3, [r6, #0]
 80043d8:	2000      	movs	r0, #0
 80043da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80043de:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80044b4 <_malloc_r+0xfc>
 80043e2:	f000 f869 	bl	80044b8 <__malloc_lock>
 80043e6:	f8d8 3000 	ldr.w	r3, [r8]
 80043ea:	461c      	mov	r4, r3
 80043ec:	bb44      	cbnz	r4, 8004440 <_malloc_r+0x88>
 80043ee:	4629      	mov	r1, r5
 80043f0:	4630      	mov	r0, r6
 80043f2:	f7ff ffbf 	bl	8004374 <sbrk_aligned>
 80043f6:	1c43      	adds	r3, r0, #1
 80043f8:	4604      	mov	r4, r0
 80043fa:	d158      	bne.n	80044ae <_malloc_r+0xf6>
 80043fc:	f8d8 4000 	ldr.w	r4, [r8]
 8004400:	4627      	mov	r7, r4
 8004402:	2f00      	cmp	r7, #0
 8004404:	d143      	bne.n	800448e <_malloc_r+0xd6>
 8004406:	2c00      	cmp	r4, #0
 8004408:	d04b      	beq.n	80044a2 <_malloc_r+0xea>
 800440a:	6823      	ldr	r3, [r4, #0]
 800440c:	4639      	mov	r1, r7
 800440e:	4630      	mov	r0, r6
 8004410:	eb04 0903 	add.w	r9, r4, r3
 8004414:	f001 f8d0 	bl	80055b8 <_sbrk_r>
 8004418:	4581      	cmp	r9, r0
 800441a:	d142      	bne.n	80044a2 <_malloc_r+0xea>
 800441c:	6821      	ldr	r1, [r4, #0]
 800441e:	4630      	mov	r0, r6
 8004420:	1a6d      	subs	r5, r5, r1
 8004422:	4629      	mov	r1, r5
 8004424:	f7ff ffa6 	bl	8004374 <sbrk_aligned>
 8004428:	3001      	adds	r0, #1
 800442a:	d03a      	beq.n	80044a2 <_malloc_r+0xea>
 800442c:	6823      	ldr	r3, [r4, #0]
 800442e:	442b      	add	r3, r5
 8004430:	6023      	str	r3, [r4, #0]
 8004432:	f8d8 3000 	ldr.w	r3, [r8]
 8004436:	685a      	ldr	r2, [r3, #4]
 8004438:	bb62      	cbnz	r2, 8004494 <_malloc_r+0xdc>
 800443a:	f8c8 7000 	str.w	r7, [r8]
 800443e:	e00f      	b.n	8004460 <_malloc_r+0xa8>
 8004440:	6822      	ldr	r2, [r4, #0]
 8004442:	1b52      	subs	r2, r2, r5
 8004444:	d420      	bmi.n	8004488 <_malloc_r+0xd0>
 8004446:	2a0b      	cmp	r2, #11
 8004448:	d917      	bls.n	800447a <_malloc_r+0xc2>
 800444a:	1961      	adds	r1, r4, r5
 800444c:	42a3      	cmp	r3, r4
 800444e:	6025      	str	r5, [r4, #0]
 8004450:	bf18      	it	ne
 8004452:	6059      	strne	r1, [r3, #4]
 8004454:	6863      	ldr	r3, [r4, #4]
 8004456:	bf08      	it	eq
 8004458:	f8c8 1000 	streq.w	r1, [r8]
 800445c:	5162      	str	r2, [r4, r5]
 800445e:	604b      	str	r3, [r1, #4]
 8004460:	4630      	mov	r0, r6
 8004462:	f000 f82f 	bl	80044c4 <__malloc_unlock>
 8004466:	f104 000b 	add.w	r0, r4, #11
 800446a:	1d23      	adds	r3, r4, #4
 800446c:	f020 0007 	bic.w	r0, r0, #7
 8004470:	1ac2      	subs	r2, r0, r3
 8004472:	bf1c      	itt	ne
 8004474:	1a1b      	subne	r3, r3, r0
 8004476:	50a3      	strne	r3, [r4, r2]
 8004478:	e7af      	b.n	80043da <_malloc_r+0x22>
 800447a:	6862      	ldr	r2, [r4, #4]
 800447c:	42a3      	cmp	r3, r4
 800447e:	bf0c      	ite	eq
 8004480:	f8c8 2000 	streq.w	r2, [r8]
 8004484:	605a      	strne	r2, [r3, #4]
 8004486:	e7eb      	b.n	8004460 <_malloc_r+0xa8>
 8004488:	4623      	mov	r3, r4
 800448a:	6864      	ldr	r4, [r4, #4]
 800448c:	e7ae      	b.n	80043ec <_malloc_r+0x34>
 800448e:	463c      	mov	r4, r7
 8004490:	687f      	ldr	r7, [r7, #4]
 8004492:	e7b6      	b.n	8004402 <_malloc_r+0x4a>
 8004494:	461a      	mov	r2, r3
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	42a3      	cmp	r3, r4
 800449a:	d1fb      	bne.n	8004494 <_malloc_r+0xdc>
 800449c:	2300      	movs	r3, #0
 800449e:	6053      	str	r3, [r2, #4]
 80044a0:	e7de      	b.n	8004460 <_malloc_r+0xa8>
 80044a2:	230c      	movs	r3, #12
 80044a4:	4630      	mov	r0, r6
 80044a6:	6033      	str	r3, [r6, #0]
 80044a8:	f000 f80c 	bl	80044c4 <__malloc_unlock>
 80044ac:	e794      	b.n	80043d8 <_malloc_r+0x20>
 80044ae:	6005      	str	r5, [r0, #0]
 80044b0:	e7d6      	b.n	8004460 <_malloc_r+0xa8>
 80044b2:	bf00      	nop
 80044b4:	200002a4 	.word	0x200002a4

080044b8 <__malloc_lock>:
 80044b8:	4801      	ldr	r0, [pc, #4]	@ (80044c0 <__malloc_lock+0x8>)
 80044ba:	f001 b8ca 	b.w	8005652 <__retarget_lock_acquire_recursive>
 80044be:	bf00      	nop
 80044c0:	200003e8 	.word	0x200003e8

080044c4 <__malloc_unlock>:
 80044c4:	4801      	ldr	r0, [pc, #4]	@ (80044cc <__malloc_unlock+0x8>)
 80044c6:	f001 b8c5 	b.w	8005654 <__retarget_lock_release_recursive>
 80044ca:	bf00      	nop
 80044cc:	200003e8 	.word	0x200003e8

080044d0 <realloc>:
 80044d0:	4b02      	ldr	r3, [pc, #8]	@ (80044dc <realloc+0xc>)
 80044d2:	460a      	mov	r2, r1
 80044d4:	4601      	mov	r1, r0
 80044d6:	6818      	ldr	r0, [r3, #0]
 80044d8:	f000 b802 	b.w	80044e0 <_realloc_r>
 80044dc:	200001a0 	.word	0x200001a0

080044e0 <_realloc_r>:
 80044e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80044e4:	4680      	mov	r8, r0
 80044e6:	4615      	mov	r5, r2
 80044e8:	460c      	mov	r4, r1
 80044ea:	b921      	cbnz	r1, 80044f6 <_realloc_r+0x16>
 80044ec:	4611      	mov	r1, r2
 80044ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80044f2:	f7ff bf61 	b.w	80043b8 <_malloc_r>
 80044f6:	b92a      	cbnz	r2, 8004504 <_realloc_r+0x24>
 80044f8:	f001 f8c2 	bl	8005680 <_free_r>
 80044fc:	2400      	movs	r4, #0
 80044fe:	4620      	mov	r0, r4
 8004500:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004504:	f002 f8f6 	bl	80066f4 <_malloc_usable_size_r>
 8004508:	4285      	cmp	r5, r0
 800450a:	4606      	mov	r6, r0
 800450c:	d802      	bhi.n	8004514 <_realloc_r+0x34>
 800450e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004512:	d8f4      	bhi.n	80044fe <_realloc_r+0x1e>
 8004514:	4629      	mov	r1, r5
 8004516:	4640      	mov	r0, r8
 8004518:	f7ff ff4e 	bl	80043b8 <_malloc_r>
 800451c:	4607      	mov	r7, r0
 800451e:	2800      	cmp	r0, #0
 8004520:	d0ec      	beq.n	80044fc <_realloc_r+0x1c>
 8004522:	42b5      	cmp	r5, r6
 8004524:	462a      	mov	r2, r5
 8004526:	4621      	mov	r1, r4
 8004528:	bf28      	it	cs
 800452a:	4632      	movcs	r2, r6
 800452c:	f001 f893 	bl	8005656 <memcpy>
 8004530:	4621      	mov	r1, r4
 8004532:	4640      	mov	r0, r8
 8004534:	f001 f8a4 	bl	8005680 <_free_r>
 8004538:	463c      	mov	r4, r7
 800453a:	e7e0      	b.n	80044fe <_realloc_r+0x1e>

0800453c <sulp>:
 800453c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004540:	460f      	mov	r7, r1
 8004542:	4690      	mov	r8, r2
 8004544:	f001 ffa2 	bl	800648c <__ulp>
 8004548:	4604      	mov	r4, r0
 800454a:	460d      	mov	r5, r1
 800454c:	f1b8 0f00 	cmp.w	r8, #0
 8004550:	d011      	beq.n	8004576 <sulp+0x3a>
 8004552:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8004556:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800455a:	2b00      	cmp	r3, #0
 800455c:	dd0b      	ble.n	8004576 <sulp+0x3a>
 800455e:	2400      	movs	r4, #0
 8004560:	051b      	lsls	r3, r3, #20
 8004562:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8004566:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800456a:	4622      	mov	r2, r4
 800456c:	462b      	mov	r3, r5
 800456e:	f7fb ffcd 	bl	800050c <__aeabi_dmul>
 8004572:	4604      	mov	r4, r0
 8004574:	460d      	mov	r5, r1
 8004576:	4620      	mov	r0, r4
 8004578:	4629      	mov	r1, r5
 800457a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08004580 <_strtod_l>:
 8004580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004584:	b09f      	sub	sp, #124	@ 0x7c
 8004586:	9217      	str	r2, [sp, #92]	@ 0x5c
 8004588:	2200      	movs	r2, #0
 800458a:	460c      	mov	r4, r1
 800458c:	921a      	str	r2, [sp, #104]	@ 0x68
 800458e:	f04f 0a00 	mov.w	sl, #0
 8004592:	f04f 0b00 	mov.w	fp, #0
 8004596:	460a      	mov	r2, r1
 8004598:	9005      	str	r0, [sp, #20]
 800459a:	9219      	str	r2, [sp, #100]	@ 0x64
 800459c:	7811      	ldrb	r1, [r2, #0]
 800459e:	292b      	cmp	r1, #43	@ 0x2b
 80045a0:	d048      	beq.n	8004634 <_strtod_l+0xb4>
 80045a2:	d836      	bhi.n	8004612 <_strtod_l+0x92>
 80045a4:	290d      	cmp	r1, #13
 80045a6:	d830      	bhi.n	800460a <_strtod_l+0x8a>
 80045a8:	2908      	cmp	r1, #8
 80045aa:	d830      	bhi.n	800460e <_strtod_l+0x8e>
 80045ac:	2900      	cmp	r1, #0
 80045ae:	d039      	beq.n	8004624 <_strtod_l+0xa4>
 80045b0:	2200      	movs	r2, #0
 80045b2:	920b      	str	r2, [sp, #44]	@ 0x2c
 80045b4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80045b6:	782a      	ldrb	r2, [r5, #0]
 80045b8:	2a30      	cmp	r2, #48	@ 0x30
 80045ba:	f040 80b1 	bne.w	8004720 <_strtod_l+0x1a0>
 80045be:	786a      	ldrb	r2, [r5, #1]
 80045c0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80045c4:	2a58      	cmp	r2, #88	@ 0x58
 80045c6:	d16c      	bne.n	80046a2 <_strtod_l+0x122>
 80045c8:	9302      	str	r3, [sp, #8]
 80045ca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80045cc:	4a8e      	ldr	r2, [pc, #568]	@ (8004808 <_strtod_l+0x288>)
 80045ce:	9301      	str	r3, [sp, #4]
 80045d0:	ab1a      	add	r3, sp, #104	@ 0x68
 80045d2:	9300      	str	r3, [sp, #0]
 80045d4:	9805      	ldr	r0, [sp, #20]
 80045d6:	ab1b      	add	r3, sp, #108	@ 0x6c
 80045d8:	a919      	add	r1, sp, #100	@ 0x64
 80045da:	f001 f901 	bl	80057e0 <__gethex>
 80045de:	f010 060f 	ands.w	r6, r0, #15
 80045e2:	4604      	mov	r4, r0
 80045e4:	d005      	beq.n	80045f2 <_strtod_l+0x72>
 80045e6:	2e06      	cmp	r6, #6
 80045e8:	d126      	bne.n	8004638 <_strtod_l+0xb8>
 80045ea:	2300      	movs	r3, #0
 80045ec:	3501      	adds	r5, #1
 80045ee:	9519      	str	r5, [sp, #100]	@ 0x64
 80045f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80045f2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	f040 8584 	bne.w	8005102 <_strtod_l+0xb82>
 80045fa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80045fc:	b1bb      	cbz	r3, 800462e <_strtod_l+0xae>
 80045fe:	4650      	mov	r0, sl
 8004600:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 8004604:	b01f      	add	sp, #124	@ 0x7c
 8004606:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800460a:	2920      	cmp	r1, #32
 800460c:	d1d0      	bne.n	80045b0 <_strtod_l+0x30>
 800460e:	3201      	adds	r2, #1
 8004610:	e7c3      	b.n	800459a <_strtod_l+0x1a>
 8004612:	292d      	cmp	r1, #45	@ 0x2d
 8004614:	d1cc      	bne.n	80045b0 <_strtod_l+0x30>
 8004616:	2101      	movs	r1, #1
 8004618:	910b      	str	r1, [sp, #44]	@ 0x2c
 800461a:	1c51      	adds	r1, r2, #1
 800461c:	9119      	str	r1, [sp, #100]	@ 0x64
 800461e:	7852      	ldrb	r2, [r2, #1]
 8004620:	2a00      	cmp	r2, #0
 8004622:	d1c7      	bne.n	80045b4 <_strtod_l+0x34>
 8004624:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8004626:	9419      	str	r4, [sp, #100]	@ 0x64
 8004628:	2b00      	cmp	r3, #0
 800462a:	f040 8568 	bne.w	80050fe <_strtod_l+0xb7e>
 800462e:	4650      	mov	r0, sl
 8004630:	4659      	mov	r1, fp
 8004632:	e7e7      	b.n	8004604 <_strtod_l+0x84>
 8004634:	2100      	movs	r1, #0
 8004636:	e7ef      	b.n	8004618 <_strtod_l+0x98>
 8004638:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800463a:	b13a      	cbz	r2, 800464c <_strtod_l+0xcc>
 800463c:	2135      	movs	r1, #53	@ 0x35
 800463e:	a81c      	add	r0, sp, #112	@ 0x70
 8004640:	f002 f814 	bl	800666c <__copybits>
 8004644:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8004646:	9805      	ldr	r0, [sp, #20]
 8004648:	f001 fbee 	bl	8005e28 <_Bfree>
 800464c:	3e01      	subs	r6, #1
 800464e:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8004650:	2e04      	cmp	r6, #4
 8004652:	d806      	bhi.n	8004662 <_strtod_l+0xe2>
 8004654:	e8df f006 	tbb	[pc, r6]
 8004658:	201d0314 	.word	0x201d0314
 800465c:	14          	.byte	0x14
 800465d:	00          	.byte	0x00
 800465e:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8004662:	05e1      	lsls	r1, r4, #23
 8004664:	bf48      	it	mi
 8004666:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800466a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800466e:	0d1b      	lsrs	r3, r3, #20
 8004670:	051b      	lsls	r3, r3, #20
 8004672:	2b00      	cmp	r3, #0
 8004674:	d1bd      	bne.n	80045f2 <_strtod_l+0x72>
 8004676:	f000 ffc1 	bl	80055fc <__errno>
 800467a:	2322      	movs	r3, #34	@ 0x22
 800467c:	6003      	str	r3, [r0, #0]
 800467e:	e7b8      	b.n	80045f2 <_strtod_l+0x72>
 8004680:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8004684:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8004688:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800468c:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8004690:	e7e7      	b.n	8004662 <_strtod_l+0xe2>
 8004692:	f8df b178 	ldr.w	fp, [pc, #376]	@ 800480c <_strtod_l+0x28c>
 8004696:	e7e4      	b.n	8004662 <_strtod_l+0xe2>
 8004698:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800469c:	f04f 3aff 	mov.w	sl, #4294967295
 80046a0:	e7df      	b.n	8004662 <_strtod_l+0xe2>
 80046a2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80046a4:	1c5a      	adds	r2, r3, #1
 80046a6:	9219      	str	r2, [sp, #100]	@ 0x64
 80046a8:	785b      	ldrb	r3, [r3, #1]
 80046aa:	2b30      	cmp	r3, #48	@ 0x30
 80046ac:	d0f9      	beq.n	80046a2 <_strtod_l+0x122>
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d09f      	beq.n	80045f2 <_strtod_l+0x72>
 80046b2:	2301      	movs	r3, #1
 80046b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80046b6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80046b8:	220a      	movs	r2, #10
 80046ba:	930c      	str	r3, [sp, #48]	@ 0x30
 80046bc:	2300      	movs	r3, #0
 80046be:	461f      	mov	r7, r3
 80046c0:	9308      	str	r3, [sp, #32]
 80046c2:	930a      	str	r3, [sp, #40]	@ 0x28
 80046c4:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80046c6:	7805      	ldrb	r5, [r0, #0]
 80046c8:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80046cc:	b2d9      	uxtb	r1, r3
 80046ce:	2909      	cmp	r1, #9
 80046d0:	d928      	bls.n	8004724 <_strtod_l+0x1a4>
 80046d2:	2201      	movs	r2, #1
 80046d4:	494e      	ldr	r1, [pc, #312]	@ (8004810 <_strtod_l+0x290>)
 80046d6:	f000 ff16 	bl	8005506 <strncmp>
 80046da:	2800      	cmp	r0, #0
 80046dc:	d032      	beq.n	8004744 <_strtod_l+0x1c4>
 80046de:	2000      	movs	r0, #0
 80046e0:	462a      	mov	r2, r5
 80046e2:	4681      	mov	r9, r0
 80046e4:	463d      	mov	r5, r7
 80046e6:	4603      	mov	r3, r0
 80046e8:	2a65      	cmp	r2, #101	@ 0x65
 80046ea:	d001      	beq.n	80046f0 <_strtod_l+0x170>
 80046ec:	2a45      	cmp	r2, #69	@ 0x45
 80046ee:	d114      	bne.n	800471a <_strtod_l+0x19a>
 80046f0:	b91d      	cbnz	r5, 80046fa <_strtod_l+0x17a>
 80046f2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80046f4:	4302      	orrs	r2, r0
 80046f6:	d095      	beq.n	8004624 <_strtod_l+0xa4>
 80046f8:	2500      	movs	r5, #0
 80046fa:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80046fc:	1c62      	adds	r2, r4, #1
 80046fe:	9219      	str	r2, [sp, #100]	@ 0x64
 8004700:	7862      	ldrb	r2, [r4, #1]
 8004702:	2a2b      	cmp	r2, #43	@ 0x2b
 8004704:	d077      	beq.n	80047f6 <_strtod_l+0x276>
 8004706:	2a2d      	cmp	r2, #45	@ 0x2d
 8004708:	d07b      	beq.n	8004802 <_strtod_l+0x282>
 800470a:	f04f 0c00 	mov.w	ip, #0
 800470e:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8004712:	2909      	cmp	r1, #9
 8004714:	f240 8082 	bls.w	800481c <_strtod_l+0x29c>
 8004718:	9419      	str	r4, [sp, #100]	@ 0x64
 800471a:	f04f 0800 	mov.w	r8, #0
 800471e:	e0a2      	b.n	8004866 <_strtod_l+0x2e6>
 8004720:	2300      	movs	r3, #0
 8004722:	e7c7      	b.n	80046b4 <_strtod_l+0x134>
 8004724:	2f08      	cmp	r7, #8
 8004726:	bfd5      	itete	le
 8004728:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800472a:	9908      	ldrgt	r1, [sp, #32]
 800472c:	fb02 3301 	mlale	r3, r2, r1, r3
 8004730:	fb02 3301 	mlagt	r3, r2, r1, r3
 8004734:	f100 0001 	add.w	r0, r0, #1
 8004738:	bfd4      	ite	le
 800473a:	930a      	strle	r3, [sp, #40]	@ 0x28
 800473c:	9308      	strgt	r3, [sp, #32]
 800473e:	3701      	adds	r7, #1
 8004740:	9019      	str	r0, [sp, #100]	@ 0x64
 8004742:	e7bf      	b.n	80046c4 <_strtod_l+0x144>
 8004744:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004746:	1c5a      	adds	r2, r3, #1
 8004748:	9219      	str	r2, [sp, #100]	@ 0x64
 800474a:	785a      	ldrb	r2, [r3, #1]
 800474c:	b37f      	cbz	r7, 80047ae <_strtod_l+0x22e>
 800474e:	4681      	mov	r9, r0
 8004750:	463d      	mov	r5, r7
 8004752:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8004756:	2b09      	cmp	r3, #9
 8004758:	d912      	bls.n	8004780 <_strtod_l+0x200>
 800475a:	2301      	movs	r3, #1
 800475c:	e7c4      	b.n	80046e8 <_strtod_l+0x168>
 800475e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004760:	3001      	adds	r0, #1
 8004762:	1c5a      	adds	r2, r3, #1
 8004764:	9219      	str	r2, [sp, #100]	@ 0x64
 8004766:	785a      	ldrb	r2, [r3, #1]
 8004768:	2a30      	cmp	r2, #48	@ 0x30
 800476a:	d0f8      	beq.n	800475e <_strtod_l+0x1de>
 800476c:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8004770:	2b08      	cmp	r3, #8
 8004772:	f200 84cb 	bhi.w	800510c <_strtod_l+0xb8c>
 8004776:	4681      	mov	r9, r0
 8004778:	2000      	movs	r0, #0
 800477a:	4605      	mov	r5, r0
 800477c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800477e:	930c      	str	r3, [sp, #48]	@ 0x30
 8004780:	3a30      	subs	r2, #48	@ 0x30
 8004782:	f100 0301 	add.w	r3, r0, #1
 8004786:	d02a      	beq.n	80047de <_strtod_l+0x25e>
 8004788:	4499      	add	r9, r3
 800478a:	210a      	movs	r1, #10
 800478c:	462b      	mov	r3, r5
 800478e:	eb00 0c05 	add.w	ip, r0, r5
 8004792:	4563      	cmp	r3, ip
 8004794:	d10d      	bne.n	80047b2 <_strtod_l+0x232>
 8004796:	1c69      	adds	r1, r5, #1
 8004798:	4401      	add	r1, r0
 800479a:	4428      	add	r0, r5
 800479c:	2808      	cmp	r0, #8
 800479e:	dc16      	bgt.n	80047ce <_strtod_l+0x24e>
 80047a0:	230a      	movs	r3, #10
 80047a2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80047a4:	fb03 2300 	mla	r3, r3, r0, r2
 80047a8:	930a      	str	r3, [sp, #40]	@ 0x28
 80047aa:	2300      	movs	r3, #0
 80047ac:	e018      	b.n	80047e0 <_strtod_l+0x260>
 80047ae:	4638      	mov	r0, r7
 80047b0:	e7da      	b.n	8004768 <_strtod_l+0x1e8>
 80047b2:	2b08      	cmp	r3, #8
 80047b4:	f103 0301 	add.w	r3, r3, #1
 80047b8:	dc03      	bgt.n	80047c2 <_strtod_l+0x242>
 80047ba:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80047bc:	434e      	muls	r6, r1
 80047be:	960a      	str	r6, [sp, #40]	@ 0x28
 80047c0:	e7e7      	b.n	8004792 <_strtod_l+0x212>
 80047c2:	2b10      	cmp	r3, #16
 80047c4:	bfde      	ittt	le
 80047c6:	9e08      	ldrle	r6, [sp, #32]
 80047c8:	434e      	mulle	r6, r1
 80047ca:	9608      	strle	r6, [sp, #32]
 80047cc:	e7e1      	b.n	8004792 <_strtod_l+0x212>
 80047ce:	280f      	cmp	r0, #15
 80047d0:	dceb      	bgt.n	80047aa <_strtod_l+0x22a>
 80047d2:	230a      	movs	r3, #10
 80047d4:	9808      	ldr	r0, [sp, #32]
 80047d6:	fb03 2300 	mla	r3, r3, r0, r2
 80047da:	9308      	str	r3, [sp, #32]
 80047dc:	e7e5      	b.n	80047aa <_strtod_l+0x22a>
 80047de:	4629      	mov	r1, r5
 80047e0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80047e2:	460d      	mov	r5, r1
 80047e4:	1c50      	adds	r0, r2, #1
 80047e6:	9019      	str	r0, [sp, #100]	@ 0x64
 80047e8:	7852      	ldrb	r2, [r2, #1]
 80047ea:	4618      	mov	r0, r3
 80047ec:	e7b1      	b.n	8004752 <_strtod_l+0x1d2>
 80047ee:	f04f 0900 	mov.w	r9, #0
 80047f2:	2301      	movs	r3, #1
 80047f4:	e77d      	b.n	80046f2 <_strtod_l+0x172>
 80047f6:	f04f 0c00 	mov.w	ip, #0
 80047fa:	1ca2      	adds	r2, r4, #2
 80047fc:	9219      	str	r2, [sp, #100]	@ 0x64
 80047fe:	78a2      	ldrb	r2, [r4, #2]
 8004800:	e785      	b.n	800470e <_strtod_l+0x18e>
 8004802:	f04f 0c01 	mov.w	ip, #1
 8004806:	e7f8      	b.n	80047fa <_strtod_l+0x27a>
 8004808:	08007d30 	.word	0x08007d30
 800480c:	7ff00000 	.word	0x7ff00000
 8004810:	08007d0c 	.word	0x08007d0c
 8004814:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8004816:	1c51      	adds	r1, r2, #1
 8004818:	9119      	str	r1, [sp, #100]	@ 0x64
 800481a:	7852      	ldrb	r2, [r2, #1]
 800481c:	2a30      	cmp	r2, #48	@ 0x30
 800481e:	d0f9      	beq.n	8004814 <_strtod_l+0x294>
 8004820:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8004824:	2908      	cmp	r1, #8
 8004826:	f63f af78 	bhi.w	800471a <_strtod_l+0x19a>
 800482a:	f04f 080a 	mov.w	r8, #10
 800482e:	3a30      	subs	r2, #48	@ 0x30
 8004830:	920e      	str	r2, [sp, #56]	@ 0x38
 8004832:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8004834:	920f      	str	r2, [sp, #60]	@ 0x3c
 8004836:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8004838:	1c56      	adds	r6, r2, #1
 800483a:	9619      	str	r6, [sp, #100]	@ 0x64
 800483c:	7852      	ldrb	r2, [r2, #1]
 800483e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8004842:	f1be 0f09 	cmp.w	lr, #9
 8004846:	d939      	bls.n	80048bc <_strtod_l+0x33c>
 8004848:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800484a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800484e:	1a76      	subs	r6, r6, r1
 8004850:	2e08      	cmp	r6, #8
 8004852:	dc03      	bgt.n	800485c <_strtod_l+0x2dc>
 8004854:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8004856:	4588      	cmp	r8, r1
 8004858:	bfa8      	it	ge
 800485a:	4688      	movge	r8, r1
 800485c:	f1bc 0f00 	cmp.w	ip, #0
 8004860:	d001      	beq.n	8004866 <_strtod_l+0x2e6>
 8004862:	f1c8 0800 	rsb	r8, r8, #0
 8004866:	2d00      	cmp	r5, #0
 8004868:	d14e      	bne.n	8004908 <_strtod_l+0x388>
 800486a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800486c:	4308      	orrs	r0, r1
 800486e:	f47f aec0 	bne.w	80045f2 <_strtod_l+0x72>
 8004872:	2b00      	cmp	r3, #0
 8004874:	f47f aed6 	bne.w	8004624 <_strtod_l+0xa4>
 8004878:	2a69      	cmp	r2, #105	@ 0x69
 800487a:	d028      	beq.n	80048ce <_strtod_l+0x34e>
 800487c:	dc25      	bgt.n	80048ca <_strtod_l+0x34a>
 800487e:	2a49      	cmp	r2, #73	@ 0x49
 8004880:	d025      	beq.n	80048ce <_strtod_l+0x34e>
 8004882:	2a4e      	cmp	r2, #78	@ 0x4e
 8004884:	f47f aece 	bne.w	8004624 <_strtod_l+0xa4>
 8004888:	499a      	ldr	r1, [pc, #616]	@ (8004af4 <_strtod_l+0x574>)
 800488a:	a819      	add	r0, sp, #100	@ 0x64
 800488c:	f001 f9ca 	bl	8005c24 <__match>
 8004890:	2800      	cmp	r0, #0
 8004892:	f43f aec7 	beq.w	8004624 <_strtod_l+0xa4>
 8004896:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004898:	781b      	ldrb	r3, [r3, #0]
 800489a:	2b28      	cmp	r3, #40	@ 0x28
 800489c:	d12e      	bne.n	80048fc <_strtod_l+0x37c>
 800489e:	4996      	ldr	r1, [pc, #600]	@ (8004af8 <_strtod_l+0x578>)
 80048a0:	aa1c      	add	r2, sp, #112	@ 0x70
 80048a2:	a819      	add	r0, sp, #100	@ 0x64
 80048a4:	f001 f9d2 	bl	8005c4c <__hexnan>
 80048a8:	2805      	cmp	r0, #5
 80048aa:	d127      	bne.n	80048fc <_strtod_l+0x37c>
 80048ac:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80048ae:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80048b2:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80048b6:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80048ba:	e69a      	b.n	80045f2 <_strtod_l+0x72>
 80048bc:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80048be:	fb08 2101 	mla	r1, r8, r1, r2
 80048c2:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80048c6:	920e      	str	r2, [sp, #56]	@ 0x38
 80048c8:	e7b5      	b.n	8004836 <_strtod_l+0x2b6>
 80048ca:	2a6e      	cmp	r2, #110	@ 0x6e
 80048cc:	e7da      	b.n	8004884 <_strtod_l+0x304>
 80048ce:	498b      	ldr	r1, [pc, #556]	@ (8004afc <_strtod_l+0x57c>)
 80048d0:	a819      	add	r0, sp, #100	@ 0x64
 80048d2:	f001 f9a7 	bl	8005c24 <__match>
 80048d6:	2800      	cmp	r0, #0
 80048d8:	f43f aea4 	beq.w	8004624 <_strtod_l+0xa4>
 80048dc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80048de:	4988      	ldr	r1, [pc, #544]	@ (8004b00 <_strtod_l+0x580>)
 80048e0:	3b01      	subs	r3, #1
 80048e2:	a819      	add	r0, sp, #100	@ 0x64
 80048e4:	9319      	str	r3, [sp, #100]	@ 0x64
 80048e6:	f001 f99d 	bl	8005c24 <__match>
 80048ea:	b910      	cbnz	r0, 80048f2 <_strtod_l+0x372>
 80048ec:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80048ee:	3301      	adds	r3, #1
 80048f0:	9319      	str	r3, [sp, #100]	@ 0x64
 80048f2:	f04f 0a00 	mov.w	sl, #0
 80048f6:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 8004b04 <_strtod_l+0x584>
 80048fa:	e67a      	b.n	80045f2 <_strtod_l+0x72>
 80048fc:	4882      	ldr	r0, [pc, #520]	@ (8004b08 <_strtod_l+0x588>)
 80048fe:	f000 feb9 	bl	8005674 <nan>
 8004902:	4682      	mov	sl, r0
 8004904:	468b      	mov	fp, r1
 8004906:	e674      	b.n	80045f2 <_strtod_l+0x72>
 8004908:	eba8 0309 	sub.w	r3, r8, r9
 800490c:	2f00      	cmp	r7, #0
 800490e:	bf08      	it	eq
 8004910:	462f      	moveq	r7, r5
 8004912:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8004914:	2d10      	cmp	r5, #16
 8004916:	462c      	mov	r4, r5
 8004918:	9309      	str	r3, [sp, #36]	@ 0x24
 800491a:	bfa8      	it	ge
 800491c:	2410      	movge	r4, #16
 800491e:	f7fb fd7b 	bl	8000418 <__aeabi_ui2d>
 8004922:	2d09      	cmp	r5, #9
 8004924:	4682      	mov	sl, r0
 8004926:	468b      	mov	fp, r1
 8004928:	dc11      	bgt.n	800494e <_strtod_l+0x3ce>
 800492a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800492c:	2b00      	cmp	r3, #0
 800492e:	f43f ae60 	beq.w	80045f2 <_strtod_l+0x72>
 8004932:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004934:	dd76      	ble.n	8004a24 <_strtod_l+0x4a4>
 8004936:	2b16      	cmp	r3, #22
 8004938:	dc5d      	bgt.n	80049f6 <_strtod_l+0x476>
 800493a:	4974      	ldr	r1, [pc, #464]	@ (8004b0c <_strtod_l+0x58c>)
 800493c:	4652      	mov	r2, sl
 800493e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8004942:	465b      	mov	r3, fp
 8004944:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004948:	f7fb fde0 	bl	800050c <__aeabi_dmul>
 800494c:	e7d9      	b.n	8004902 <_strtod_l+0x382>
 800494e:	4b6f      	ldr	r3, [pc, #444]	@ (8004b0c <_strtod_l+0x58c>)
 8004950:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004954:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8004958:	f7fb fdd8 	bl	800050c <__aeabi_dmul>
 800495c:	4682      	mov	sl, r0
 800495e:	9808      	ldr	r0, [sp, #32]
 8004960:	468b      	mov	fp, r1
 8004962:	f7fb fd59 	bl	8000418 <__aeabi_ui2d>
 8004966:	4602      	mov	r2, r0
 8004968:	460b      	mov	r3, r1
 800496a:	4650      	mov	r0, sl
 800496c:	4659      	mov	r1, fp
 800496e:	f7fb fc17 	bl	80001a0 <__adddf3>
 8004972:	2d0f      	cmp	r5, #15
 8004974:	4682      	mov	sl, r0
 8004976:	468b      	mov	fp, r1
 8004978:	ddd7      	ble.n	800492a <_strtod_l+0x3aa>
 800497a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800497c:	1b2c      	subs	r4, r5, r4
 800497e:	441c      	add	r4, r3
 8004980:	2c00      	cmp	r4, #0
 8004982:	f340 8096 	ble.w	8004ab2 <_strtod_l+0x532>
 8004986:	f014 030f 	ands.w	r3, r4, #15
 800498a:	d00a      	beq.n	80049a2 <_strtod_l+0x422>
 800498c:	495f      	ldr	r1, [pc, #380]	@ (8004b0c <_strtod_l+0x58c>)
 800498e:	4652      	mov	r2, sl
 8004990:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8004994:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004998:	465b      	mov	r3, fp
 800499a:	f7fb fdb7 	bl	800050c <__aeabi_dmul>
 800499e:	4682      	mov	sl, r0
 80049a0:	468b      	mov	fp, r1
 80049a2:	f034 040f 	bics.w	r4, r4, #15
 80049a6:	d073      	beq.n	8004a90 <_strtod_l+0x510>
 80049a8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80049ac:	dd48      	ble.n	8004a40 <_strtod_l+0x4c0>
 80049ae:	2400      	movs	r4, #0
 80049b0:	46a0      	mov	r8, r4
 80049b2:	46a1      	mov	r9, r4
 80049b4:	940a      	str	r4, [sp, #40]	@ 0x28
 80049b6:	2322      	movs	r3, #34	@ 0x22
 80049b8:	f04f 0a00 	mov.w	sl, #0
 80049bc:	9a05      	ldr	r2, [sp, #20]
 80049be:	f8df b144 	ldr.w	fp, [pc, #324]	@ 8004b04 <_strtod_l+0x584>
 80049c2:	6013      	str	r3, [r2, #0]
 80049c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	f43f ae13 	beq.w	80045f2 <_strtod_l+0x72>
 80049cc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80049ce:	9805      	ldr	r0, [sp, #20]
 80049d0:	f001 fa2a 	bl	8005e28 <_Bfree>
 80049d4:	4649      	mov	r1, r9
 80049d6:	9805      	ldr	r0, [sp, #20]
 80049d8:	f001 fa26 	bl	8005e28 <_Bfree>
 80049dc:	4641      	mov	r1, r8
 80049de:	9805      	ldr	r0, [sp, #20]
 80049e0:	f001 fa22 	bl	8005e28 <_Bfree>
 80049e4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80049e6:	9805      	ldr	r0, [sp, #20]
 80049e8:	f001 fa1e 	bl	8005e28 <_Bfree>
 80049ec:	4621      	mov	r1, r4
 80049ee:	9805      	ldr	r0, [sp, #20]
 80049f0:	f001 fa1a 	bl	8005e28 <_Bfree>
 80049f4:	e5fd      	b.n	80045f2 <_strtod_l+0x72>
 80049f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80049f8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80049fc:	4293      	cmp	r3, r2
 80049fe:	dbbc      	blt.n	800497a <_strtod_l+0x3fa>
 8004a00:	4c42      	ldr	r4, [pc, #264]	@ (8004b0c <_strtod_l+0x58c>)
 8004a02:	f1c5 050f 	rsb	r5, r5, #15
 8004a06:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8004a0a:	4652      	mov	r2, sl
 8004a0c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004a10:	465b      	mov	r3, fp
 8004a12:	f7fb fd7b 	bl	800050c <__aeabi_dmul>
 8004a16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004a18:	1b5d      	subs	r5, r3, r5
 8004a1a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8004a1e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8004a22:	e791      	b.n	8004948 <_strtod_l+0x3c8>
 8004a24:	3316      	adds	r3, #22
 8004a26:	dba8      	blt.n	800497a <_strtod_l+0x3fa>
 8004a28:	4b38      	ldr	r3, [pc, #224]	@ (8004b0c <_strtod_l+0x58c>)
 8004a2a:	eba9 0808 	sub.w	r8, r9, r8
 8004a2e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8004a32:	4650      	mov	r0, sl
 8004a34:	e9d8 2300 	ldrd	r2, r3, [r8]
 8004a38:	4659      	mov	r1, fp
 8004a3a:	f7fb fe91 	bl	8000760 <__aeabi_ddiv>
 8004a3e:	e760      	b.n	8004902 <_strtod_l+0x382>
 8004a40:	4b33      	ldr	r3, [pc, #204]	@ (8004b10 <_strtod_l+0x590>)
 8004a42:	4650      	mov	r0, sl
 8004a44:	9308      	str	r3, [sp, #32]
 8004a46:	2300      	movs	r3, #0
 8004a48:	4659      	mov	r1, fp
 8004a4a:	461e      	mov	r6, r3
 8004a4c:	1124      	asrs	r4, r4, #4
 8004a4e:	2c01      	cmp	r4, #1
 8004a50:	dc21      	bgt.n	8004a96 <_strtod_l+0x516>
 8004a52:	b10b      	cbz	r3, 8004a58 <_strtod_l+0x4d8>
 8004a54:	4682      	mov	sl, r0
 8004a56:	468b      	mov	fp, r1
 8004a58:	492d      	ldr	r1, [pc, #180]	@ (8004b10 <_strtod_l+0x590>)
 8004a5a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8004a5e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8004a62:	4652      	mov	r2, sl
 8004a64:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004a68:	465b      	mov	r3, fp
 8004a6a:	f7fb fd4f 	bl	800050c <__aeabi_dmul>
 8004a6e:	4b25      	ldr	r3, [pc, #148]	@ (8004b04 <_strtod_l+0x584>)
 8004a70:	460a      	mov	r2, r1
 8004a72:	400b      	ands	r3, r1
 8004a74:	4927      	ldr	r1, [pc, #156]	@ (8004b14 <_strtod_l+0x594>)
 8004a76:	4682      	mov	sl, r0
 8004a78:	428b      	cmp	r3, r1
 8004a7a:	d898      	bhi.n	80049ae <_strtod_l+0x42e>
 8004a7c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8004a80:	428b      	cmp	r3, r1
 8004a82:	bf86      	itte	hi
 8004a84:	f04f 3aff 	movhi.w	sl, #4294967295
 8004a88:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8004b18 <_strtod_l+0x598>
 8004a8c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8004a90:	2300      	movs	r3, #0
 8004a92:	9308      	str	r3, [sp, #32]
 8004a94:	e07a      	b.n	8004b8c <_strtod_l+0x60c>
 8004a96:	07e2      	lsls	r2, r4, #31
 8004a98:	d505      	bpl.n	8004aa6 <_strtod_l+0x526>
 8004a9a:	9b08      	ldr	r3, [sp, #32]
 8004a9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aa0:	f7fb fd34 	bl	800050c <__aeabi_dmul>
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	9a08      	ldr	r2, [sp, #32]
 8004aa8:	3601      	adds	r6, #1
 8004aaa:	3208      	adds	r2, #8
 8004aac:	1064      	asrs	r4, r4, #1
 8004aae:	9208      	str	r2, [sp, #32]
 8004ab0:	e7cd      	b.n	8004a4e <_strtod_l+0x4ce>
 8004ab2:	d0ed      	beq.n	8004a90 <_strtod_l+0x510>
 8004ab4:	4264      	negs	r4, r4
 8004ab6:	f014 020f 	ands.w	r2, r4, #15
 8004aba:	d00a      	beq.n	8004ad2 <_strtod_l+0x552>
 8004abc:	4b13      	ldr	r3, [pc, #76]	@ (8004b0c <_strtod_l+0x58c>)
 8004abe:	4650      	mov	r0, sl
 8004ac0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004ac4:	4659      	mov	r1, fp
 8004ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aca:	f7fb fe49 	bl	8000760 <__aeabi_ddiv>
 8004ace:	4682      	mov	sl, r0
 8004ad0:	468b      	mov	fp, r1
 8004ad2:	1124      	asrs	r4, r4, #4
 8004ad4:	d0dc      	beq.n	8004a90 <_strtod_l+0x510>
 8004ad6:	2c1f      	cmp	r4, #31
 8004ad8:	dd20      	ble.n	8004b1c <_strtod_l+0x59c>
 8004ada:	2400      	movs	r4, #0
 8004adc:	46a0      	mov	r8, r4
 8004ade:	46a1      	mov	r9, r4
 8004ae0:	940a      	str	r4, [sp, #40]	@ 0x28
 8004ae2:	2322      	movs	r3, #34	@ 0x22
 8004ae4:	9a05      	ldr	r2, [sp, #20]
 8004ae6:	f04f 0a00 	mov.w	sl, #0
 8004aea:	f04f 0b00 	mov.w	fp, #0
 8004aee:	6013      	str	r3, [r2, #0]
 8004af0:	e768      	b.n	80049c4 <_strtod_l+0x444>
 8004af2:	bf00      	nop
 8004af4:	08007d17 	.word	0x08007d17
 8004af8:	08007d1c 	.word	0x08007d1c
 8004afc:	08007d0e 	.word	0x08007d0e
 8004b00:	08007d11 	.word	0x08007d11
 8004b04:	7ff00000 	.word	0x7ff00000
 8004b08:	080080e1 	.word	0x080080e1
 8004b0c:	08007f90 	.word	0x08007f90
 8004b10:	08007f68 	.word	0x08007f68
 8004b14:	7ca00000 	.word	0x7ca00000
 8004b18:	7fefffff 	.word	0x7fefffff
 8004b1c:	f014 0310 	ands.w	r3, r4, #16
 8004b20:	bf18      	it	ne
 8004b22:	236a      	movne	r3, #106	@ 0x6a
 8004b24:	4650      	mov	r0, sl
 8004b26:	9308      	str	r3, [sp, #32]
 8004b28:	4659      	mov	r1, fp
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	4ea9      	ldr	r6, [pc, #676]	@ (8004dd4 <_strtod_l+0x854>)
 8004b2e:	07e2      	lsls	r2, r4, #31
 8004b30:	d504      	bpl.n	8004b3c <_strtod_l+0x5bc>
 8004b32:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004b36:	f7fb fce9 	bl	800050c <__aeabi_dmul>
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	1064      	asrs	r4, r4, #1
 8004b3e:	f106 0608 	add.w	r6, r6, #8
 8004b42:	d1f4      	bne.n	8004b2e <_strtod_l+0x5ae>
 8004b44:	b10b      	cbz	r3, 8004b4a <_strtod_l+0x5ca>
 8004b46:	4682      	mov	sl, r0
 8004b48:	468b      	mov	fp, r1
 8004b4a:	9b08      	ldr	r3, [sp, #32]
 8004b4c:	b1b3      	cbz	r3, 8004b7c <_strtod_l+0x5fc>
 8004b4e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8004b52:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	4659      	mov	r1, fp
 8004b5a:	dd0f      	ble.n	8004b7c <_strtod_l+0x5fc>
 8004b5c:	2b1f      	cmp	r3, #31
 8004b5e:	dd57      	ble.n	8004c10 <_strtod_l+0x690>
 8004b60:	2b34      	cmp	r3, #52	@ 0x34
 8004b62:	bfd8      	it	le
 8004b64:	f04f 33ff 	movle.w	r3, #4294967295
 8004b68:	f04f 0a00 	mov.w	sl, #0
 8004b6c:	bfcf      	iteee	gt
 8004b6e:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8004b72:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8004b76:	4093      	lslle	r3, r2
 8004b78:	ea03 0b01 	andle.w	fp, r3, r1
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	2300      	movs	r3, #0
 8004b80:	4650      	mov	r0, sl
 8004b82:	4659      	mov	r1, fp
 8004b84:	f7fb ff2a 	bl	80009dc <__aeabi_dcmpeq>
 8004b88:	2800      	cmp	r0, #0
 8004b8a:	d1a6      	bne.n	8004ada <_strtod_l+0x55a>
 8004b8c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004b8e:	463a      	mov	r2, r7
 8004b90:	9300      	str	r3, [sp, #0]
 8004b92:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8004b94:	462b      	mov	r3, r5
 8004b96:	9805      	ldr	r0, [sp, #20]
 8004b98:	f001 f9ae 	bl	8005ef8 <__s2b>
 8004b9c:	900a      	str	r0, [sp, #40]	@ 0x28
 8004b9e:	2800      	cmp	r0, #0
 8004ba0:	f43f af05 	beq.w	80049ae <_strtod_l+0x42e>
 8004ba4:	2400      	movs	r4, #0
 8004ba6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004ba8:	eba9 0308 	sub.w	r3, r9, r8
 8004bac:	2a00      	cmp	r2, #0
 8004bae:	bfa8      	it	ge
 8004bb0:	2300      	movge	r3, #0
 8004bb2:	46a0      	mov	r8, r4
 8004bb4:	9312      	str	r3, [sp, #72]	@ 0x48
 8004bb6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8004bba:	9316      	str	r3, [sp, #88]	@ 0x58
 8004bbc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004bbe:	9805      	ldr	r0, [sp, #20]
 8004bc0:	6859      	ldr	r1, [r3, #4]
 8004bc2:	f001 f8f1 	bl	8005da8 <_Balloc>
 8004bc6:	4681      	mov	r9, r0
 8004bc8:	2800      	cmp	r0, #0
 8004bca:	f43f aef4 	beq.w	80049b6 <_strtod_l+0x436>
 8004bce:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004bd0:	300c      	adds	r0, #12
 8004bd2:	691a      	ldr	r2, [r3, #16]
 8004bd4:	f103 010c 	add.w	r1, r3, #12
 8004bd8:	3202      	adds	r2, #2
 8004bda:	0092      	lsls	r2, r2, #2
 8004bdc:	f000 fd3b 	bl	8005656 <memcpy>
 8004be0:	ab1c      	add	r3, sp, #112	@ 0x70
 8004be2:	9301      	str	r3, [sp, #4]
 8004be4:	ab1b      	add	r3, sp, #108	@ 0x6c
 8004be6:	9300      	str	r3, [sp, #0]
 8004be8:	4652      	mov	r2, sl
 8004bea:	465b      	mov	r3, fp
 8004bec:	9805      	ldr	r0, [sp, #20]
 8004bee:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8004bf2:	f001 fcb3 	bl	800655c <__d2b>
 8004bf6:	901a      	str	r0, [sp, #104]	@ 0x68
 8004bf8:	2800      	cmp	r0, #0
 8004bfa:	f43f aedc 	beq.w	80049b6 <_strtod_l+0x436>
 8004bfe:	2101      	movs	r1, #1
 8004c00:	9805      	ldr	r0, [sp, #20]
 8004c02:	f001 fa0f 	bl	8006024 <__i2b>
 8004c06:	4680      	mov	r8, r0
 8004c08:	b948      	cbnz	r0, 8004c1e <_strtod_l+0x69e>
 8004c0a:	f04f 0800 	mov.w	r8, #0
 8004c0e:	e6d2      	b.n	80049b6 <_strtod_l+0x436>
 8004c10:	f04f 32ff 	mov.w	r2, #4294967295
 8004c14:	fa02 f303 	lsl.w	r3, r2, r3
 8004c18:	ea03 0a0a 	and.w	sl, r3, sl
 8004c1c:	e7ae      	b.n	8004b7c <_strtod_l+0x5fc>
 8004c1e:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8004c20:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8004c22:	2d00      	cmp	r5, #0
 8004c24:	bfab      	itete	ge
 8004c26:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8004c28:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8004c2a:	18ef      	addge	r7, r5, r3
 8004c2c:	1b5e      	sublt	r6, r3, r5
 8004c2e:	9b08      	ldr	r3, [sp, #32]
 8004c30:	bfa8      	it	ge
 8004c32:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8004c34:	eba5 0503 	sub.w	r5, r5, r3
 8004c38:	4415      	add	r5, r2
 8004c3a:	4b67      	ldr	r3, [pc, #412]	@ (8004dd8 <_strtod_l+0x858>)
 8004c3c:	f105 35ff 	add.w	r5, r5, #4294967295
 8004c40:	bfb8      	it	lt
 8004c42:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8004c44:	429d      	cmp	r5, r3
 8004c46:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8004c4a:	da50      	bge.n	8004cee <_strtod_l+0x76e>
 8004c4c:	1b5b      	subs	r3, r3, r5
 8004c4e:	2b1f      	cmp	r3, #31
 8004c50:	f04f 0101 	mov.w	r1, #1
 8004c54:	eba2 0203 	sub.w	r2, r2, r3
 8004c58:	dc3d      	bgt.n	8004cd6 <_strtod_l+0x756>
 8004c5a:	fa01 f303 	lsl.w	r3, r1, r3
 8004c5e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8004c60:	2300      	movs	r3, #0
 8004c62:	9310      	str	r3, [sp, #64]	@ 0x40
 8004c64:	18bd      	adds	r5, r7, r2
 8004c66:	9b08      	ldr	r3, [sp, #32]
 8004c68:	42af      	cmp	r7, r5
 8004c6a:	4416      	add	r6, r2
 8004c6c:	441e      	add	r6, r3
 8004c6e:	463b      	mov	r3, r7
 8004c70:	bfa8      	it	ge
 8004c72:	462b      	movge	r3, r5
 8004c74:	42b3      	cmp	r3, r6
 8004c76:	bfa8      	it	ge
 8004c78:	4633      	movge	r3, r6
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	bfc2      	ittt	gt
 8004c7e:	1aed      	subgt	r5, r5, r3
 8004c80:	1af6      	subgt	r6, r6, r3
 8004c82:	1aff      	subgt	r7, r7, r3
 8004c84:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	dd16      	ble.n	8004cb8 <_strtod_l+0x738>
 8004c8a:	4641      	mov	r1, r8
 8004c8c:	461a      	mov	r2, r3
 8004c8e:	9805      	ldr	r0, [sp, #20]
 8004c90:	f001 fa86 	bl	80061a0 <__pow5mult>
 8004c94:	4680      	mov	r8, r0
 8004c96:	2800      	cmp	r0, #0
 8004c98:	d0b7      	beq.n	8004c0a <_strtod_l+0x68a>
 8004c9a:	4601      	mov	r1, r0
 8004c9c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8004c9e:	9805      	ldr	r0, [sp, #20]
 8004ca0:	f001 f9d6 	bl	8006050 <__multiply>
 8004ca4:	900e      	str	r0, [sp, #56]	@ 0x38
 8004ca6:	2800      	cmp	r0, #0
 8004ca8:	f43f ae85 	beq.w	80049b6 <_strtod_l+0x436>
 8004cac:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8004cae:	9805      	ldr	r0, [sp, #20]
 8004cb0:	f001 f8ba 	bl	8005e28 <_Bfree>
 8004cb4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004cb6:	931a      	str	r3, [sp, #104]	@ 0x68
 8004cb8:	2d00      	cmp	r5, #0
 8004cba:	dc1d      	bgt.n	8004cf8 <_strtod_l+0x778>
 8004cbc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	dd23      	ble.n	8004d0a <_strtod_l+0x78a>
 8004cc2:	4649      	mov	r1, r9
 8004cc4:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8004cc6:	9805      	ldr	r0, [sp, #20]
 8004cc8:	f001 fa6a 	bl	80061a0 <__pow5mult>
 8004ccc:	4681      	mov	r9, r0
 8004cce:	b9e0      	cbnz	r0, 8004d0a <_strtod_l+0x78a>
 8004cd0:	f04f 0900 	mov.w	r9, #0
 8004cd4:	e66f      	b.n	80049b6 <_strtod_l+0x436>
 8004cd6:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8004cda:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8004cde:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8004ce2:	35e2      	adds	r5, #226	@ 0xe2
 8004ce4:	fa01 f305 	lsl.w	r3, r1, r5
 8004ce8:	9310      	str	r3, [sp, #64]	@ 0x40
 8004cea:	9113      	str	r1, [sp, #76]	@ 0x4c
 8004cec:	e7ba      	b.n	8004c64 <_strtod_l+0x6e4>
 8004cee:	2300      	movs	r3, #0
 8004cf0:	9310      	str	r3, [sp, #64]	@ 0x40
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	9313      	str	r3, [sp, #76]	@ 0x4c
 8004cf6:	e7b5      	b.n	8004c64 <_strtod_l+0x6e4>
 8004cf8:	462a      	mov	r2, r5
 8004cfa:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8004cfc:	9805      	ldr	r0, [sp, #20]
 8004cfe:	f001 faa9 	bl	8006254 <__lshift>
 8004d02:	901a      	str	r0, [sp, #104]	@ 0x68
 8004d04:	2800      	cmp	r0, #0
 8004d06:	d1d9      	bne.n	8004cbc <_strtod_l+0x73c>
 8004d08:	e655      	b.n	80049b6 <_strtod_l+0x436>
 8004d0a:	2e00      	cmp	r6, #0
 8004d0c:	dd07      	ble.n	8004d1e <_strtod_l+0x79e>
 8004d0e:	4649      	mov	r1, r9
 8004d10:	4632      	mov	r2, r6
 8004d12:	9805      	ldr	r0, [sp, #20]
 8004d14:	f001 fa9e 	bl	8006254 <__lshift>
 8004d18:	4681      	mov	r9, r0
 8004d1a:	2800      	cmp	r0, #0
 8004d1c:	d0d8      	beq.n	8004cd0 <_strtod_l+0x750>
 8004d1e:	2f00      	cmp	r7, #0
 8004d20:	dd08      	ble.n	8004d34 <_strtod_l+0x7b4>
 8004d22:	4641      	mov	r1, r8
 8004d24:	463a      	mov	r2, r7
 8004d26:	9805      	ldr	r0, [sp, #20]
 8004d28:	f001 fa94 	bl	8006254 <__lshift>
 8004d2c:	4680      	mov	r8, r0
 8004d2e:	2800      	cmp	r0, #0
 8004d30:	f43f ae41 	beq.w	80049b6 <_strtod_l+0x436>
 8004d34:	464a      	mov	r2, r9
 8004d36:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8004d38:	9805      	ldr	r0, [sp, #20]
 8004d3a:	f001 fb13 	bl	8006364 <__mdiff>
 8004d3e:	4604      	mov	r4, r0
 8004d40:	2800      	cmp	r0, #0
 8004d42:	f43f ae38 	beq.w	80049b6 <_strtod_l+0x436>
 8004d46:	68c3      	ldr	r3, [r0, #12]
 8004d48:	4641      	mov	r1, r8
 8004d4a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	60c3      	str	r3, [r0, #12]
 8004d50:	f001 faec 	bl	800632c <__mcmp>
 8004d54:	2800      	cmp	r0, #0
 8004d56:	da45      	bge.n	8004de4 <_strtod_l+0x864>
 8004d58:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004d5a:	ea53 030a 	orrs.w	r3, r3, sl
 8004d5e:	d16b      	bne.n	8004e38 <_strtod_l+0x8b8>
 8004d60:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d167      	bne.n	8004e38 <_strtod_l+0x8b8>
 8004d68:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8004d6c:	0d1b      	lsrs	r3, r3, #20
 8004d6e:	051b      	lsls	r3, r3, #20
 8004d70:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8004d74:	d960      	bls.n	8004e38 <_strtod_l+0x8b8>
 8004d76:	6963      	ldr	r3, [r4, #20]
 8004d78:	b913      	cbnz	r3, 8004d80 <_strtod_l+0x800>
 8004d7a:	6923      	ldr	r3, [r4, #16]
 8004d7c:	2b01      	cmp	r3, #1
 8004d7e:	dd5b      	ble.n	8004e38 <_strtod_l+0x8b8>
 8004d80:	4621      	mov	r1, r4
 8004d82:	2201      	movs	r2, #1
 8004d84:	9805      	ldr	r0, [sp, #20]
 8004d86:	f001 fa65 	bl	8006254 <__lshift>
 8004d8a:	4641      	mov	r1, r8
 8004d8c:	4604      	mov	r4, r0
 8004d8e:	f001 facd 	bl	800632c <__mcmp>
 8004d92:	2800      	cmp	r0, #0
 8004d94:	dd50      	ble.n	8004e38 <_strtod_l+0x8b8>
 8004d96:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8004d9a:	9a08      	ldr	r2, [sp, #32]
 8004d9c:	0d1b      	lsrs	r3, r3, #20
 8004d9e:	051b      	lsls	r3, r3, #20
 8004da0:	2a00      	cmp	r2, #0
 8004da2:	d06a      	beq.n	8004e7a <_strtod_l+0x8fa>
 8004da4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8004da8:	d867      	bhi.n	8004e7a <_strtod_l+0x8fa>
 8004daa:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8004dae:	f67f ae98 	bls.w	8004ae2 <_strtod_l+0x562>
 8004db2:	4650      	mov	r0, sl
 8004db4:	4659      	mov	r1, fp
 8004db6:	4b09      	ldr	r3, [pc, #36]	@ (8004ddc <_strtod_l+0x85c>)
 8004db8:	2200      	movs	r2, #0
 8004dba:	f7fb fba7 	bl	800050c <__aeabi_dmul>
 8004dbe:	4b08      	ldr	r3, [pc, #32]	@ (8004de0 <_strtod_l+0x860>)
 8004dc0:	4682      	mov	sl, r0
 8004dc2:	400b      	ands	r3, r1
 8004dc4:	468b      	mov	fp, r1
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	f47f ae00 	bne.w	80049cc <_strtod_l+0x44c>
 8004dcc:	2322      	movs	r3, #34	@ 0x22
 8004dce:	9a05      	ldr	r2, [sp, #20]
 8004dd0:	6013      	str	r3, [r2, #0]
 8004dd2:	e5fb      	b.n	80049cc <_strtod_l+0x44c>
 8004dd4:	08007d48 	.word	0x08007d48
 8004dd8:	fffffc02 	.word	0xfffffc02
 8004ddc:	39500000 	.word	0x39500000
 8004de0:	7ff00000 	.word	0x7ff00000
 8004de4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8004de8:	d165      	bne.n	8004eb6 <_strtod_l+0x936>
 8004dea:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8004dec:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004df0:	b35a      	cbz	r2, 8004e4a <_strtod_l+0x8ca>
 8004df2:	4a99      	ldr	r2, [pc, #612]	@ (8005058 <_strtod_l+0xad8>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d12b      	bne.n	8004e50 <_strtod_l+0x8d0>
 8004df8:	9b08      	ldr	r3, [sp, #32]
 8004dfa:	4651      	mov	r1, sl
 8004dfc:	b303      	cbz	r3, 8004e40 <_strtod_l+0x8c0>
 8004dfe:	465a      	mov	r2, fp
 8004e00:	4b96      	ldr	r3, [pc, #600]	@ (800505c <_strtod_l+0xadc>)
 8004e02:	4013      	ands	r3, r2
 8004e04:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8004e08:	f04f 32ff 	mov.w	r2, #4294967295
 8004e0c:	d81b      	bhi.n	8004e46 <_strtod_l+0x8c6>
 8004e0e:	0d1b      	lsrs	r3, r3, #20
 8004e10:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8004e14:	fa02 f303 	lsl.w	r3, r2, r3
 8004e18:	4299      	cmp	r1, r3
 8004e1a:	d119      	bne.n	8004e50 <_strtod_l+0x8d0>
 8004e1c:	4b90      	ldr	r3, [pc, #576]	@ (8005060 <_strtod_l+0xae0>)
 8004e1e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004e20:	429a      	cmp	r2, r3
 8004e22:	d102      	bne.n	8004e2a <_strtod_l+0x8aa>
 8004e24:	3101      	adds	r1, #1
 8004e26:	f43f adc6 	beq.w	80049b6 <_strtod_l+0x436>
 8004e2a:	f04f 0a00 	mov.w	sl, #0
 8004e2e:	4b8b      	ldr	r3, [pc, #556]	@ (800505c <_strtod_l+0xadc>)
 8004e30:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004e32:	401a      	ands	r2, r3
 8004e34:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8004e38:	9b08      	ldr	r3, [sp, #32]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d1b9      	bne.n	8004db2 <_strtod_l+0x832>
 8004e3e:	e5c5      	b.n	80049cc <_strtod_l+0x44c>
 8004e40:	f04f 33ff 	mov.w	r3, #4294967295
 8004e44:	e7e8      	b.n	8004e18 <_strtod_l+0x898>
 8004e46:	4613      	mov	r3, r2
 8004e48:	e7e6      	b.n	8004e18 <_strtod_l+0x898>
 8004e4a:	ea53 030a 	orrs.w	r3, r3, sl
 8004e4e:	d0a2      	beq.n	8004d96 <_strtod_l+0x816>
 8004e50:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8004e52:	b1db      	cbz	r3, 8004e8c <_strtod_l+0x90c>
 8004e54:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004e56:	4213      	tst	r3, r2
 8004e58:	d0ee      	beq.n	8004e38 <_strtod_l+0x8b8>
 8004e5a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004e5c:	4650      	mov	r0, sl
 8004e5e:	4659      	mov	r1, fp
 8004e60:	9a08      	ldr	r2, [sp, #32]
 8004e62:	b1bb      	cbz	r3, 8004e94 <_strtod_l+0x914>
 8004e64:	f7ff fb6a 	bl	800453c <sulp>
 8004e68:	4602      	mov	r2, r0
 8004e6a:	460b      	mov	r3, r1
 8004e6c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004e70:	f7fb f996 	bl	80001a0 <__adddf3>
 8004e74:	4682      	mov	sl, r0
 8004e76:	468b      	mov	fp, r1
 8004e78:	e7de      	b.n	8004e38 <_strtod_l+0x8b8>
 8004e7a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8004e7e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8004e82:	f04f 3aff 	mov.w	sl, #4294967295
 8004e86:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8004e8a:	e7d5      	b.n	8004e38 <_strtod_l+0x8b8>
 8004e8c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8004e8e:	ea13 0f0a 	tst.w	r3, sl
 8004e92:	e7e1      	b.n	8004e58 <_strtod_l+0x8d8>
 8004e94:	f7ff fb52 	bl	800453c <sulp>
 8004e98:	4602      	mov	r2, r0
 8004e9a:	460b      	mov	r3, r1
 8004e9c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8004ea0:	f7fb f97c 	bl	800019c <__aeabi_dsub>
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	4682      	mov	sl, r0
 8004eaa:	468b      	mov	fp, r1
 8004eac:	f7fb fd96 	bl	80009dc <__aeabi_dcmpeq>
 8004eb0:	2800      	cmp	r0, #0
 8004eb2:	d0c1      	beq.n	8004e38 <_strtod_l+0x8b8>
 8004eb4:	e615      	b.n	8004ae2 <_strtod_l+0x562>
 8004eb6:	4641      	mov	r1, r8
 8004eb8:	4620      	mov	r0, r4
 8004eba:	f001 fba7 	bl	800660c <__ratio>
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8004ec4:	4606      	mov	r6, r0
 8004ec6:	460f      	mov	r7, r1
 8004ec8:	f7fb fd9c 	bl	8000a04 <__aeabi_dcmple>
 8004ecc:	2800      	cmp	r0, #0
 8004ece:	d06d      	beq.n	8004fac <_strtod_l+0xa2c>
 8004ed0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d178      	bne.n	8004fc8 <_strtod_l+0xa48>
 8004ed6:	f1ba 0f00 	cmp.w	sl, #0
 8004eda:	d156      	bne.n	8004f8a <_strtod_l+0xa0a>
 8004edc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004ede:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d158      	bne.n	8004f98 <_strtod_l+0xa18>
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	4630      	mov	r0, r6
 8004eea:	4639      	mov	r1, r7
 8004eec:	4b5d      	ldr	r3, [pc, #372]	@ (8005064 <_strtod_l+0xae4>)
 8004eee:	f7fb fd7f 	bl	80009f0 <__aeabi_dcmplt>
 8004ef2:	2800      	cmp	r0, #0
 8004ef4:	d157      	bne.n	8004fa6 <_strtod_l+0xa26>
 8004ef6:	4630      	mov	r0, r6
 8004ef8:	4639      	mov	r1, r7
 8004efa:	2200      	movs	r2, #0
 8004efc:	4b5a      	ldr	r3, [pc, #360]	@ (8005068 <_strtod_l+0xae8>)
 8004efe:	f7fb fb05 	bl	800050c <__aeabi_dmul>
 8004f02:	4606      	mov	r6, r0
 8004f04:	460f      	mov	r7, r1
 8004f06:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8004f0a:	9606      	str	r6, [sp, #24]
 8004f0c:	9307      	str	r3, [sp, #28]
 8004f0e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004f12:	4d52      	ldr	r5, [pc, #328]	@ (800505c <_strtod_l+0xadc>)
 8004f14:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8004f18:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004f1a:	401d      	ands	r5, r3
 8004f1c:	4b53      	ldr	r3, [pc, #332]	@ (800506c <_strtod_l+0xaec>)
 8004f1e:	429d      	cmp	r5, r3
 8004f20:	f040 80aa 	bne.w	8005078 <_strtod_l+0xaf8>
 8004f24:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004f26:	4650      	mov	r0, sl
 8004f28:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8004f2c:	4659      	mov	r1, fp
 8004f2e:	f001 faad 	bl	800648c <__ulp>
 8004f32:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004f36:	f7fb fae9 	bl	800050c <__aeabi_dmul>
 8004f3a:	4652      	mov	r2, sl
 8004f3c:	465b      	mov	r3, fp
 8004f3e:	f7fb f92f 	bl	80001a0 <__adddf3>
 8004f42:	460b      	mov	r3, r1
 8004f44:	4945      	ldr	r1, [pc, #276]	@ (800505c <_strtod_l+0xadc>)
 8004f46:	4a4a      	ldr	r2, [pc, #296]	@ (8005070 <_strtod_l+0xaf0>)
 8004f48:	4019      	ands	r1, r3
 8004f4a:	4291      	cmp	r1, r2
 8004f4c:	4682      	mov	sl, r0
 8004f4e:	d942      	bls.n	8004fd6 <_strtod_l+0xa56>
 8004f50:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8004f52:	4b43      	ldr	r3, [pc, #268]	@ (8005060 <_strtod_l+0xae0>)
 8004f54:	429a      	cmp	r2, r3
 8004f56:	d103      	bne.n	8004f60 <_strtod_l+0x9e0>
 8004f58:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004f5a:	3301      	adds	r3, #1
 8004f5c:	f43f ad2b 	beq.w	80049b6 <_strtod_l+0x436>
 8004f60:	f04f 3aff 	mov.w	sl, #4294967295
 8004f64:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 8005060 <_strtod_l+0xae0>
 8004f68:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8004f6a:	9805      	ldr	r0, [sp, #20]
 8004f6c:	f000 ff5c 	bl	8005e28 <_Bfree>
 8004f70:	4649      	mov	r1, r9
 8004f72:	9805      	ldr	r0, [sp, #20]
 8004f74:	f000 ff58 	bl	8005e28 <_Bfree>
 8004f78:	4641      	mov	r1, r8
 8004f7a:	9805      	ldr	r0, [sp, #20]
 8004f7c:	f000 ff54 	bl	8005e28 <_Bfree>
 8004f80:	4621      	mov	r1, r4
 8004f82:	9805      	ldr	r0, [sp, #20]
 8004f84:	f000 ff50 	bl	8005e28 <_Bfree>
 8004f88:	e618      	b.n	8004bbc <_strtod_l+0x63c>
 8004f8a:	f1ba 0f01 	cmp.w	sl, #1
 8004f8e:	d103      	bne.n	8004f98 <_strtod_l+0xa18>
 8004f90:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	f43f ada5 	beq.w	8004ae2 <_strtod_l+0x562>
 8004f98:	2200      	movs	r2, #0
 8004f9a:	4b36      	ldr	r3, [pc, #216]	@ (8005074 <_strtod_l+0xaf4>)
 8004f9c:	2600      	movs	r6, #0
 8004f9e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004fa2:	4f30      	ldr	r7, [pc, #192]	@ (8005064 <_strtod_l+0xae4>)
 8004fa4:	e7b3      	b.n	8004f0e <_strtod_l+0x98e>
 8004fa6:	2600      	movs	r6, #0
 8004fa8:	4f2f      	ldr	r7, [pc, #188]	@ (8005068 <_strtod_l+0xae8>)
 8004faa:	e7ac      	b.n	8004f06 <_strtod_l+0x986>
 8004fac:	4630      	mov	r0, r6
 8004fae:	4639      	mov	r1, r7
 8004fb0:	4b2d      	ldr	r3, [pc, #180]	@ (8005068 <_strtod_l+0xae8>)
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	f7fb faaa 	bl	800050c <__aeabi_dmul>
 8004fb8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8004fba:	4606      	mov	r6, r0
 8004fbc:	460f      	mov	r7, r1
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d0a1      	beq.n	8004f06 <_strtod_l+0x986>
 8004fc2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8004fc6:	e7a2      	b.n	8004f0e <_strtod_l+0x98e>
 8004fc8:	2200      	movs	r2, #0
 8004fca:	4b26      	ldr	r3, [pc, #152]	@ (8005064 <_strtod_l+0xae4>)
 8004fcc:	4616      	mov	r6, r2
 8004fce:	461f      	mov	r7, r3
 8004fd0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004fd4:	e79b      	b.n	8004f0e <_strtod_l+0x98e>
 8004fd6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8004fda:	9b08      	ldr	r3, [sp, #32]
 8004fdc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d1c1      	bne.n	8004f68 <_strtod_l+0x9e8>
 8004fe4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8004fe8:	0d1b      	lsrs	r3, r3, #20
 8004fea:	051b      	lsls	r3, r3, #20
 8004fec:	429d      	cmp	r5, r3
 8004fee:	d1bb      	bne.n	8004f68 <_strtod_l+0x9e8>
 8004ff0:	4630      	mov	r0, r6
 8004ff2:	4639      	mov	r1, r7
 8004ff4:	f7fb fd82 	bl	8000afc <__aeabi_d2lz>
 8004ff8:	f7fb fa5a 	bl	80004b0 <__aeabi_l2d>
 8004ffc:	4602      	mov	r2, r0
 8004ffe:	460b      	mov	r3, r1
 8005000:	4630      	mov	r0, r6
 8005002:	4639      	mov	r1, r7
 8005004:	f7fb f8ca 	bl	800019c <__aeabi_dsub>
 8005008:	460b      	mov	r3, r1
 800500a:	4602      	mov	r2, r0
 800500c:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8005010:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8005014:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005016:	ea46 060a 	orr.w	r6, r6, sl
 800501a:	431e      	orrs	r6, r3
 800501c:	d069      	beq.n	80050f2 <_strtod_l+0xb72>
 800501e:	a30a      	add	r3, pc, #40	@ (adr r3, 8005048 <_strtod_l+0xac8>)
 8005020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005024:	f7fb fce4 	bl	80009f0 <__aeabi_dcmplt>
 8005028:	2800      	cmp	r0, #0
 800502a:	f47f accf 	bne.w	80049cc <_strtod_l+0x44c>
 800502e:	a308      	add	r3, pc, #32	@ (adr r3, 8005050 <_strtod_l+0xad0>)
 8005030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005034:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005038:	f7fb fcf8 	bl	8000a2c <__aeabi_dcmpgt>
 800503c:	2800      	cmp	r0, #0
 800503e:	d093      	beq.n	8004f68 <_strtod_l+0x9e8>
 8005040:	e4c4      	b.n	80049cc <_strtod_l+0x44c>
 8005042:	bf00      	nop
 8005044:	f3af 8000 	nop.w
 8005048:	94a03595 	.word	0x94a03595
 800504c:	3fdfffff 	.word	0x3fdfffff
 8005050:	35afe535 	.word	0x35afe535
 8005054:	3fe00000 	.word	0x3fe00000
 8005058:	000fffff 	.word	0x000fffff
 800505c:	7ff00000 	.word	0x7ff00000
 8005060:	7fefffff 	.word	0x7fefffff
 8005064:	3ff00000 	.word	0x3ff00000
 8005068:	3fe00000 	.word	0x3fe00000
 800506c:	7fe00000 	.word	0x7fe00000
 8005070:	7c9fffff 	.word	0x7c9fffff
 8005074:	bff00000 	.word	0xbff00000
 8005078:	9b08      	ldr	r3, [sp, #32]
 800507a:	b323      	cbz	r3, 80050c6 <_strtod_l+0xb46>
 800507c:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8005080:	d821      	bhi.n	80050c6 <_strtod_l+0xb46>
 8005082:	a327      	add	r3, pc, #156	@ (adr r3, 8005120 <_strtod_l+0xba0>)
 8005084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005088:	4630      	mov	r0, r6
 800508a:	4639      	mov	r1, r7
 800508c:	f7fb fcba 	bl	8000a04 <__aeabi_dcmple>
 8005090:	b1a0      	cbz	r0, 80050bc <_strtod_l+0xb3c>
 8005092:	4639      	mov	r1, r7
 8005094:	4630      	mov	r0, r6
 8005096:	f7fb fd11 	bl	8000abc <__aeabi_d2uiz>
 800509a:	2801      	cmp	r0, #1
 800509c:	bf38      	it	cc
 800509e:	2001      	movcc	r0, #1
 80050a0:	f7fb f9ba 	bl	8000418 <__aeabi_ui2d>
 80050a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80050a6:	4606      	mov	r6, r0
 80050a8:	460f      	mov	r7, r1
 80050aa:	b9fb      	cbnz	r3, 80050ec <_strtod_l+0xb6c>
 80050ac:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80050b0:	9014      	str	r0, [sp, #80]	@ 0x50
 80050b2:	9315      	str	r3, [sp, #84]	@ 0x54
 80050b4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80050b8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80050bc:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80050be:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80050c2:	1b5b      	subs	r3, r3, r5
 80050c4:	9311      	str	r3, [sp, #68]	@ 0x44
 80050c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80050ca:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80050ce:	f001 f9dd 	bl	800648c <__ulp>
 80050d2:	4602      	mov	r2, r0
 80050d4:	460b      	mov	r3, r1
 80050d6:	4650      	mov	r0, sl
 80050d8:	4659      	mov	r1, fp
 80050da:	f7fb fa17 	bl	800050c <__aeabi_dmul>
 80050de:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80050e2:	f7fb f85d 	bl	80001a0 <__adddf3>
 80050e6:	4682      	mov	sl, r0
 80050e8:	468b      	mov	fp, r1
 80050ea:	e776      	b.n	8004fda <_strtod_l+0xa5a>
 80050ec:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80050f0:	e7e0      	b.n	80050b4 <_strtod_l+0xb34>
 80050f2:	a30d      	add	r3, pc, #52	@ (adr r3, 8005128 <_strtod_l+0xba8>)
 80050f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050f8:	f7fb fc7a 	bl	80009f0 <__aeabi_dcmplt>
 80050fc:	e79e      	b.n	800503c <_strtod_l+0xabc>
 80050fe:	2300      	movs	r3, #0
 8005100:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005102:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005104:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8005106:	6013      	str	r3, [r2, #0]
 8005108:	f7ff ba77 	b.w	80045fa <_strtod_l+0x7a>
 800510c:	2a65      	cmp	r2, #101	@ 0x65
 800510e:	f43f ab6e 	beq.w	80047ee <_strtod_l+0x26e>
 8005112:	2a45      	cmp	r2, #69	@ 0x45
 8005114:	f43f ab6b 	beq.w	80047ee <_strtod_l+0x26e>
 8005118:	2301      	movs	r3, #1
 800511a:	f7ff bba6 	b.w	800486a <_strtod_l+0x2ea>
 800511e:	bf00      	nop
 8005120:	ffc00000 	.word	0xffc00000
 8005124:	41dfffff 	.word	0x41dfffff
 8005128:	94a03595 	.word	0x94a03595
 800512c:	3fcfffff 	.word	0x3fcfffff

08005130 <strtod>:
 8005130:	460a      	mov	r2, r1
 8005132:	4601      	mov	r1, r0
 8005134:	4802      	ldr	r0, [pc, #8]	@ (8005140 <strtod+0x10>)
 8005136:	4b03      	ldr	r3, [pc, #12]	@ (8005144 <strtod+0x14>)
 8005138:	6800      	ldr	r0, [r0, #0]
 800513a:	f7ff ba21 	b.w	8004580 <_strtod_l>
 800513e:	bf00      	nop
 8005140:	200001a0 	.word	0x200001a0
 8005144:	20000034 	.word	0x20000034

08005148 <_strtol_l.constprop.0>:
 8005148:	2b24      	cmp	r3, #36	@ 0x24
 800514a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800514e:	4686      	mov	lr, r0
 8005150:	4690      	mov	r8, r2
 8005152:	d801      	bhi.n	8005158 <_strtol_l.constprop.0+0x10>
 8005154:	2b01      	cmp	r3, #1
 8005156:	d106      	bne.n	8005166 <_strtol_l.constprop.0+0x1e>
 8005158:	f000 fa50 	bl	80055fc <__errno>
 800515c:	2316      	movs	r3, #22
 800515e:	6003      	str	r3, [r0, #0]
 8005160:	2000      	movs	r0, #0
 8005162:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005166:	460d      	mov	r5, r1
 8005168:	4833      	ldr	r0, [pc, #204]	@ (8005238 <_strtol_l.constprop.0+0xf0>)
 800516a:	462a      	mov	r2, r5
 800516c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005170:	5d06      	ldrb	r6, [r0, r4]
 8005172:	f016 0608 	ands.w	r6, r6, #8
 8005176:	d1f8      	bne.n	800516a <_strtol_l.constprop.0+0x22>
 8005178:	2c2d      	cmp	r4, #45	@ 0x2d
 800517a:	d12d      	bne.n	80051d8 <_strtol_l.constprop.0+0x90>
 800517c:	2601      	movs	r6, #1
 800517e:	782c      	ldrb	r4, [r5, #0]
 8005180:	1c95      	adds	r5, r2, #2
 8005182:	f033 0210 	bics.w	r2, r3, #16
 8005186:	d109      	bne.n	800519c <_strtol_l.constprop.0+0x54>
 8005188:	2c30      	cmp	r4, #48	@ 0x30
 800518a:	d12a      	bne.n	80051e2 <_strtol_l.constprop.0+0x9a>
 800518c:	782a      	ldrb	r2, [r5, #0]
 800518e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8005192:	2a58      	cmp	r2, #88	@ 0x58
 8005194:	d125      	bne.n	80051e2 <_strtol_l.constprop.0+0x9a>
 8005196:	2310      	movs	r3, #16
 8005198:	786c      	ldrb	r4, [r5, #1]
 800519a:	3502      	adds	r5, #2
 800519c:	2200      	movs	r2, #0
 800519e:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80051a2:	f10c 3cff 	add.w	ip, ip, #4294967295
 80051a6:	fbbc f9f3 	udiv	r9, ip, r3
 80051aa:	4610      	mov	r0, r2
 80051ac:	fb03 ca19 	mls	sl, r3, r9, ip
 80051b0:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80051b4:	2f09      	cmp	r7, #9
 80051b6:	d81b      	bhi.n	80051f0 <_strtol_l.constprop.0+0xa8>
 80051b8:	463c      	mov	r4, r7
 80051ba:	42a3      	cmp	r3, r4
 80051bc:	dd27      	ble.n	800520e <_strtol_l.constprop.0+0xc6>
 80051be:	1c57      	adds	r7, r2, #1
 80051c0:	d007      	beq.n	80051d2 <_strtol_l.constprop.0+0x8a>
 80051c2:	4581      	cmp	r9, r0
 80051c4:	d320      	bcc.n	8005208 <_strtol_l.constprop.0+0xc0>
 80051c6:	d101      	bne.n	80051cc <_strtol_l.constprop.0+0x84>
 80051c8:	45a2      	cmp	sl, r4
 80051ca:	db1d      	blt.n	8005208 <_strtol_l.constprop.0+0xc0>
 80051cc:	2201      	movs	r2, #1
 80051ce:	fb00 4003 	mla	r0, r0, r3, r4
 80051d2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80051d6:	e7eb      	b.n	80051b0 <_strtol_l.constprop.0+0x68>
 80051d8:	2c2b      	cmp	r4, #43	@ 0x2b
 80051da:	bf04      	itt	eq
 80051dc:	782c      	ldrbeq	r4, [r5, #0]
 80051de:	1c95      	addeq	r5, r2, #2
 80051e0:	e7cf      	b.n	8005182 <_strtol_l.constprop.0+0x3a>
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d1da      	bne.n	800519c <_strtol_l.constprop.0+0x54>
 80051e6:	2c30      	cmp	r4, #48	@ 0x30
 80051e8:	bf0c      	ite	eq
 80051ea:	2308      	moveq	r3, #8
 80051ec:	230a      	movne	r3, #10
 80051ee:	e7d5      	b.n	800519c <_strtol_l.constprop.0+0x54>
 80051f0:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80051f4:	2f19      	cmp	r7, #25
 80051f6:	d801      	bhi.n	80051fc <_strtol_l.constprop.0+0xb4>
 80051f8:	3c37      	subs	r4, #55	@ 0x37
 80051fa:	e7de      	b.n	80051ba <_strtol_l.constprop.0+0x72>
 80051fc:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8005200:	2f19      	cmp	r7, #25
 8005202:	d804      	bhi.n	800520e <_strtol_l.constprop.0+0xc6>
 8005204:	3c57      	subs	r4, #87	@ 0x57
 8005206:	e7d8      	b.n	80051ba <_strtol_l.constprop.0+0x72>
 8005208:	f04f 32ff 	mov.w	r2, #4294967295
 800520c:	e7e1      	b.n	80051d2 <_strtol_l.constprop.0+0x8a>
 800520e:	1c53      	adds	r3, r2, #1
 8005210:	d108      	bne.n	8005224 <_strtol_l.constprop.0+0xdc>
 8005212:	2322      	movs	r3, #34	@ 0x22
 8005214:	4660      	mov	r0, ip
 8005216:	f8ce 3000 	str.w	r3, [lr]
 800521a:	f1b8 0f00 	cmp.w	r8, #0
 800521e:	d0a0      	beq.n	8005162 <_strtol_l.constprop.0+0x1a>
 8005220:	1e69      	subs	r1, r5, #1
 8005222:	e006      	b.n	8005232 <_strtol_l.constprop.0+0xea>
 8005224:	b106      	cbz	r6, 8005228 <_strtol_l.constprop.0+0xe0>
 8005226:	4240      	negs	r0, r0
 8005228:	f1b8 0f00 	cmp.w	r8, #0
 800522c:	d099      	beq.n	8005162 <_strtol_l.constprop.0+0x1a>
 800522e:	2a00      	cmp	r2, #0
 8005230:	d1f6      	bne.n	8005220 <_strtol_l.constprop.0+0xd8>
 8005232:	f8c8 1000 	str.w	r1, [r8]
 8005236:	e794      	b.n	8005162 <_strtol_l.constprop.0+0x1a>
 8005238:	08007d71 	.word	0x08007d71

0800523c <_strtol_r>:
 800523c:	f7ff bf84 	b.w	8005148 <_strtol_l.constprop.0>

08005240 <strtol>:
 8005240:	4613      	mov	r3, r2
 8005242:	460a      	mov	r2, r1
 8005244:	4601      	mov	r1, r0
 8005246:	4802      	ldr	r0, [pc, #8]	@ (8005250 <strtol+0x10>)
 8005248:	6800      	ldr	r0, [r0, #0]
 800524a:	f7ff bf7d 	b.w	8005148 <_strtol_l.constprop.0>
 800524e:	bf00      	nop
 8005250:	200001a0 	.word	0x200001a0

08005254 <std>:
 8005254:	2300      	movs	r3, #0
 8005256:	b510      	push	{r4, lr}
 8005258:	4604      	mov	r4, r0
 800525a:	e9c0 3300 	strd	r3, r3, [r0]
 800525e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005262:	6083      	str	r3, [r0, #8]
 8005264:	8181      	strh	r1, [r0, #12]
 8005266:	6643      	str	r3, [r0, #100]	@ 0x64
 8005268:	81c2      	strh	r2, [r0, #14]
 800526a:	6183      	str	r3, [r0, #24]
 800526c:	4619      	mov	r1, r3
 800526e:	2208      	movs	r2, #8
 8005270:	305c      	adds	r0, #92	@ 0x5c
 8005272:	f000 f940 	bl	80054f6 <memset>
 8005276:	4b0d      	ldr	r3, [pc, #52]	@ (80052ac <std+0x58>)
 8005278:	6224      	str	r4, [r4, #32]
 800527a:	6263      	str	r3, [r4, #36]	@ 0x24
 800527c:	4b0c      	ldr	r3, [pc, #48]	@ (80052b0 <std+0x5c>)
 800527e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005280:	4b0c      	ldr	r3, [pc, #48]	@ (80052b4 <std+0x60>)
 8005282:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005284:	4b0c      	ldr	r3, [pc, #48]	@ (80052b8 <std+0x64>)
 8005286:	6323      	str	r3, [r4, #48]	@ 0x30
 8005288:	4b0c      	ldr	r3, [pc, #48]	@ (80052bc <std+0x68>)
 800528a:	429c      	cmp	r4, r3
 800528c:	d006      	beq.n	800529c <std+0x48>
 800528e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005292:	4294      	cmp	r4, r2
 8005294:	d002      	beq.n	800529c <std+0x48>
 8005296:	33d0      	adds	r3, #208	@ 0xd0
 8005298:	429c      	cmp	r4, r3
 800529a:	d105      	bne.n	80052a8 <std+0x54>
 800529c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80052a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80052a4:	f000 b9d4 	b.w	8005650 <__retarget_lock_init_recursive>
 80052a8:	bd10      	pop	{r4, pc}
 80052aa:	bf00      	nop
 80052ac:	0800546d 	.word	0x0800546d
 80052b0:	08005493 	.word	0x08005493
 80052b4:	080054cb 	.word	0x080054cb
 80052b8:	080054ef 	.word	0x080054ef
 80052bc:	200002a8 	.word	0x200002a8

080052c0 <stdio_exit_handler>:
 80052c0:	4a02      	ldr	r2, [pc, #8]	@ (80052cc <stdio_exit_handler+0xc>)
 80052c2:	4903      	ldr	r1, [pc, #12]	@ (80052d0 <stdio_exit_handler+0x10>)
 80052c4:	4803      	ldr	r0, [pc, #12]	@ (80052d4 <stdio_exit_handler+0x14>)
 80052c6:	f000 b869 	b.w	800539c <_fwalk_sglue>
 80052ca:	bf00      	nop
 80052cc:	20000028 	.word	0x20000028
 80052d0:	0800741d 	.word	0x0800741d
 80052d4:	200001a4 	.word	0x200001a4

080052d8 <cleanup_stdio>:
 80052d8:	6841      	ldr	r1, [r0, #4]
 80052da:	4b0c      	ldr	r3, [pc, #48]	@ (800530c <cleanup_stdio+0x34>)
 80052dc:	b510      	push	{r4, lr}
 80052de:	4299      	cmp	r1, r3
 80052e0:	4604      	mov	r4, r0
 80052e2:	d001      	beq.n	80052e8 <cleanup_stdio+0x10>
 80052e4:	f002 f89a 	bl	800741c <_fflush_r>
 80052e8:	68a1      	ldr	r1, [r4, #8]
 80052ea:	4b09      	ldr	r3, [pc, #36]	@ (8005310 <cleanup_stdio+0x38>)
 80052ec:	4299      	cmp	r1, r3
 80052ee:	d002      	beq.n	80052f6 <cleanup_stdio+0x1e>
 80052f0:	4620      	mov	r0, r4
 80052f2:	f002 f893 	bl	800741c <_fflush_r>
 80052f6:	68e1      	ldr	r1, [r4, #12]
 80052f8:	4b06      	ldr	r3, [pc, #24]	@ (8005314 <cleanup_stdio+0x3c>)
 80052fa:	4299      	cmp	r1, r3
 80052fc:	d004      	beq.n	8005308 <cleanup_stdio+0x30>
 80052fe:	4620      	mov	r0, r4
 8005300:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005304:	f002 b88a 	b.w	800741c <_fflush_r>
 8005308:	bd10      	pop	{r4, pc}
 800530a:	bf00      	nop
 800530c:	200002a8 	.word	0x200002a8
 8005310:	20000310 	.word	0x20000310
 8005314:	20000378 	.word	0x20000378

08005318 <global_stdio_init.part.0>:
 8005318:	b510      	push	{r4, lr}
 800531a:	4b0b      	ldr	r3, [pc, #44]	@ (8005348 <global_stdio_init.part.0+0x30>)
 800531c:	4c0b      	ldr	r4, [pc, #44]	@ (800534c <global_stdio_init.part.0+0x34>)
 800531e:	4a0c      	ldr	r2, [pc, #48]	@ (8005350 <global_stdio_init.part.0+0x38>)
 8005320:	4620      	mov	r0, r4
 8005322:	601a      	str	r2, [r3, #0]
 8005324:	2104      	movs	r1, #4
 8005326:	2200      	movs	r2, #0
 8005328:	f7ff ff94 	bl	8005254 <std>
 800532c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005330:	2201      	movs	r2, #1
 8005332:	2109      	movs	r1, #9
 8005334:	f7ff ff8e 	bl	8005254 <std>
 8005338:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800533c:	2202      	movs	r2, #2
 800533e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005342:	2112      	movs	r1, #18
 8005344:	f7ff bf86 	b.w	8005254 <std>
 8005348:	200003e0 	.word	0x200003e0
 800534c:	200002a8 	.word	0x200002a8
 8005350:	080052c1 	.word	0x080052c1

08005354 <__sfp_lock_acquire>:
 8005354:	4801      	ldr	r0, [pc, #4]	@ (800535c <__sfp_lock_acquire+0x8>)
 8005356:	f000 b97c 	b.w	8005652 <__retarget_lock_acquire_recursive>
 800535a:	bf00      	nop
 800535c:	200003e9 	.word	0x200003e9

08005360 <__sfp_lock_release>:
 8005360:	4801      	ldr	r0, [pc, #4]	@ (8005368 <__sfp_lock_release+0x8>)
 8005362:	f000 b977 	b.w	8005654 <__retarget_lock_release_recursive>
 8005366:	bf00      	nop
 8005368:	200003e9 	.word	0x200003e9

0800536c <__sinit>:
 800536c:	b510      	push	{r4, lr}
 800536e:	4604      	mov	r4, r0
 8005370:	f7ff fff0 	bl	8005354 <__sfp_lock_acquire>
 8005374:	6a23      	ldr	r3, [r4, #32]
 8005376:	b11b      	cbz	r3, 8005380 <__sinit+0x14>
 8005378:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800537c:	f7ff bff0 	b.w	8005360 <__sfp_lock_release>
 8005380:	4b04      	ldr	r3, [pc, #16]	@ (8005394 <__sinit+0x28>)
 8005382:	6223      	str	r3, [r4, #32]
 8005384:	4b04      	ldr	r3, [pc, #16]	@ (8005398 <__sinit+0x2c>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d1f5      	bne.n	8005378 <__sinit+0xc>
 800538c:	f7ff ffc4 	bl	8005318 <global_stdio_init.part.0>
 8005390:	e7f2      	b.n	8005378 <__sinit+0xc>
 8005392:	bf00      	nop
 8005394:	080052d9 	.word	0x080052d9
 8005398:	200003e0 	.word	0x200003e0

0800539c <_fwalk_sglue>:
 800539c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80053a0:	4607      	mov	r7, r0
 80053a2:	4688      	mov	r8, r1
 80053a4:	4614      	mov	r4, r2
 80053a6:	2600      	movs	r6, #0
 80053a8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80053ac:	f1b9 0901 	subs.w	r9, r9, #1
 80053b0:	d505      	bpl.n	80053be <_fwalk_sglue+0x22>
 80053b2:	6824      	ldr	r4, [r4, #0]
 80053b4:	2c00      	cmp	r4, #0
 80053b6:	d1f7      	bne.n	80053a8 <_fwalk_sglue+0xc>
 80053b8:	4630      	mov	r0, r6
 80053ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80053be:	89ab      	ldrh	r3, [r5, #12]
 80053c0:	2b01      	cmp	r3, #1
 80053c2:	d907      	bls.n	80053d4 <_fwalk_sglue+0x38>
 80053c4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80053c8:	3301      	adds	r3, #1
 80053ca:	d003      	beq.n	80053d4 <_fwalk_sglue+0x38>
 80053cc:	4629      	mov	r1, r5
 80053ce:	4638      	mov	r0, r7
 80053d0:	47c0      	blx	r8
 80053d2:	4306      	orrs	r6, r0
 80053d4:	3568      	adds	r5, #104	@ 0x68
 80053d6:	e7e9      	b.n	80053ac <_fwalk_sglue+0x10>

080053d8 <siprintf>:
 80053d8:	b40e      	push	{r1, r2, r3}
 80053da:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80053de:	b500      	push	{lr}
 80053e0:	b09c      	sub	sp, #112	@ 0x70
 80053e2:	ab1d      	add	r3, sp, #116	@ 0x74
 80053e4:	9002      	str	r0, [sp, #8]
 80053e6:	9006      	str	r0, [sp, #24]
 80053e8:	9107      	str	r1, [sp, #28]
 80053ea:	9104      	str	r1, [sp, #16]
 80053ec:	4808      	ldr	r0, [pc, #32]	@ (8005410 <siprintf+0x38>)
 80053ee:	4909      	ldr	r1, [pc, #36]	@ (8005414 <siprintf+0x3c>)
 80053f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80053f4:	9105      	str	r1, [sp, #20]
 80053f6:	6800      	ldr	r0, [r0, #0]
 80053f8:	a902      	add	r1, sp, #8
 80053fa:	9301      	str	r3, [sp, #4]
 80053fc:	f001 f9ea 	bl	80067d4 <_svfiprintf_r>
 8005400:	2200      	movs	r2, #0
 8005402:	9b02      	ldr	r3, [sp, #8]
 8005404:	701a      	strb	r2, [r3, #0]
 8005406:	b01c      	add	sp, #112	@ 0x70
 8005408:	f85d eb04 	ldr.w	lr, [sp], #4
 800540c:	b003      	add	sp, #12
 800540e:	4770      	bx	lr
 8005410:	200001a0 	.word	0x200001a0
 8005414:	ffff0208 	.word	0xffff0208

08005418 <siscanf>:
 8005418:	b40e      	push	{r1, r2, r3}
 800541a:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800541e:	b530      	push	{r4, r5, lr}
 8005420:	b09c      	sub	sp, #112	@ 0x70
 8005422:	ac1f      	add	r4, sp, #124	@ 0x7c
 8005424:	f854 5b04 	ldr.w	r5, [r4], #4
 8005428:	f8ad 2014 	strh.w	r2, [sp, #20]
 800542c:	9002      	str	r0, [sp, #8]
 800542e:	9006      	str	r0, [sp, #24]
 8005430:	f7fa fea8 	bl	8000184 <strlen>
 8005434:	4b0b      	ldr	r3, [pc, #44]	@ (8005464 <siscanf+0x4c>)
 8005436:	9003      	str	r0, [sp, #12]
 8005438:	930b      	str	r3, [sp, #44]	@ 0x2c
 800543a:	2300      	movs	r3, #0
 800543c:	930f      	str	r3, [sp, #60]	@ 0x3c
 800543e:	9314      	str	r3, [sp, #80]	@ 0x50
 8005440:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005444:	9007      	str	r0, [sp, #28]
 8005446:	4808      	ldr	r0, [pc, #32]	@ (8005468 <siscanf+0x50>)
 8005448:	f8ad 3016 	strh.w	r3, [sp, #22]
 800544c:	462a      	mov	r2, r5
 800544e:	4623      	mov	r3, r4
 8005450:	a902      	add	r1, sp, #8
 8005452:	6800      	ldr	r0, [r0, #0]
 8005454:	9401      	str	r4, [sp, #4]
 8005456:	f001 fb11 	bl	8006a7c <__ssvfiscanf_r>
 800545a:	b01c      	add	sp, #112	@ 0x70
 800545c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005460:	b003      	add	sp, #12
 8005462:	4770      	bx	lr
 8005464:	0800548f 	.word	0x0800548f
 8005468:	200001a0 	.word	0x200001a0

0800546c <__sread>:
 800546c:	b510      	push	{r4, lr}
 800546e:	460c      	mov	r4, r1
 8005470:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005474:	f000 f88e 	bl	8005594 <_read_r>
 8005478:	2800      	cmp	r0, #0
 800547a:	bfab      	itete	ge
 800547c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800547e:	89a3      	ldrhlt	r3, [r4, #12]
 8005480:	181b      	addge	r3, r3, r0
 8005482:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005486:	bfac      	ite	ge
 8005488:	6563      	strge	r3, [r4, #84]	@ 0x54
 800548a:	81a3      	strhlt	r3, [r4, #12]
 800548c:	bd10      	pop	{r4, pc}

0800548e <__seofread>:
 800548e:	2000      	movs	r0, #0
 8005490:	4770      	bx	lr

08005492 <__swrite>:
 8005492:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005496:	461f      	mov	r7, r3
 8005498:	898b      	ldrh	r3, [r1, #12]
 800549a:	4605      	mov	r5, r0
 800549c:	05db      	lsls	r3, r3, #23
 800549e:	460c      	mov	r4, r1
 80054a0:	4616      	mov	r6, r2
 80054a2:	d505      	bpl.n	80054b0 <__swrite+0x1e>
 80054a4:	2302      	movs	r3, #2
 80054a6:	2200      	movs	r2, #0
 80054a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054ac:	f000 f860 	bl	8005570 <_lseek_r>
 80054b0:	89a3      	ldrh	r3, [r4, #12]
 80054b2:	4632      	mov	r2, r6
 80054b4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80054b8:	81a3      	strh	r3, [r4, #12]
 80054ba:	4628      	mov	r0, r5
 80054bc:	463b      	mov	r3, r7
 80054be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80054c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80054c6:	f000 b887 	b.w	80055d8 <_write_r>

080054ca <__sseek>:
 80054ca:	b510      	push	{r4, lr}
 80054cc:	460c      	mov	r4, r1
 80054ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054d2:	f000 f84d 	bl	8005570 <_lseek_r>
 80054d6:	1c43      	adds	r3, r0, #1
 80054d8:	89a3      	ldrh	r3, [r4, #12]
 80054da:	bf15      	itete	ne
 80054dc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80054de:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80054e2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80054e6:	81a3      	strheq	r3, [r4, #12]
 80054e8:	bf18      	it	ne
 80054ea:	81a3      	strhne	r3, [r4, #12]
 80054ec:	bd10      	pop	{r4, pc}

080054ee <__sclose>:
 80054ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054f2:	f000 b82d 	b.w	8005550 <_close_r>

080054f6 <memset>:
 80054f6:	4603      	mov	r3, r0
 80054f8:	4402      	add	r2, r0
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d100      	bne.n	8005500 <memset+0xa>
 80054fe:	4770      	bx	lr
 8005500:	f803 1b01 	strb.w	r1, [r3], #1
 8005504:	e7f9      	b.n	80054fa <memset+0x4>

08005506 <strncmp>:
 8005506:	b510      	push	{r4, lr}
 8005508:	b16a      	cbz	r2, 8005526 <strncmp+0x20>
 800550a:	3901      	subs	r1, #1
 800550c:	1884      	adds	r4, r0, r2
 800550e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005512:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8005516:	429a      	cmp	r2, r3
 8005518:	d103      	bne.n	8005522 <strncmp+0x1c>
 800551a:	42a0      	cmp	r0, r4
 800551c:	d001      	beq.n	8005522 <strncmp+0x1c>
 800551e:	2a00      	cmp	r2, #0
 8005520:	d1f5      	bne.n	800550e <strncmp+0x8>
 8005522:	1ad0      	subs	r0, r2, r3
 8005524:	bd10      	pop	{r4, pc}
 8005526:	4610      	mov	r0, r2
 8005528:	e7fc      	b.n	8005524 <strncmp+0x1e>

0800552a <strncpy>:
 800552a:	4603      	mov	r3, r0
 800552c:	b510      	push	{r4, lr}
 800552e:	3901      	subs	r1, #1
 8005530:	b132      	cbz	r2, 8005540 <strncpy+0x16>
 8005532:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005536:	3a01      	subs	r2, #1
 8005538:	f803 4b01 	strb.w	r4, [r3], #1
 800553c:	2c00      	cmp	r4, #0
 800553e:	d1f7      	bne.n	8005530 <strncpy+0x6>
 8005540:	2100      	movs	r1, #0
 8005542:	441a      	add	r2, r3
 8005544:	4293      	cmp	r3, r2
 8005546:	d100      	bne.n	800554a <strncpy+0x20>
 8005548:	bd10      	pop	{r4, pc}
 800554a:	f803 1b01 	strb.w	r1, [r3], #1
 800554e:	e7f9      	b.n	8005544 <strncpy+0x1a>

08005550 <_close_r>:
 8005550:	b538      	push	{r3, r4, r5, lr}
 8005552:	2300      	movs	r3, #0
 8005554:	4d05      	ldr	r5, [pc, #20]	@ (800556c <_close_r+0x1c>)
 8005556:	4604      	mov	r4, r0
 8005558:	4608      	mov	r0, r1
 800555a:	602b      	str	r3, [r5, #0]
 800555c:	f7fe fe69 	bl	8004232 <_close>
 8005560:	1c43      	adds	r3, r0, #1
 8005562:	d102      	bne.n	800556a <_close_r+0x1a>
 8005564:	682b      	ldr	r3, [r5, #0]
 8005566:	b103      	cbz	r3, 800556a <_close_r+0x1a>
 8005568:	6023      	str	r3, [r4, #0]
 800556a:	bd38      	pop	{r3, r4, r5, pc}
 800556c:	200003e4 	.word	0x200003e4

08005570 <_lseek_r>:
 8005570:	b538      	push	{r3, r4, r5, lr}
 8005572:	4604      	mov	r4, r0
 8005574:	4608      	mov	r0, r1
 8005576:	4611      	mov	r1, r2
 8005578:	2200      	movs	r2, #0
 800557a:	4d05      	ldr	r5, [pc, #20]	@ (8005590 <_lseek_r+0x20>)
 800557c:	602a      	str	r2, [r5, #0]
 800557e:	461a      	mov	r2, r3
 8005580:	f7fe fe7b 	bl	800427a <_lseek>
 8005584:	1c43      	adds	r3, r0, #1
 8005586:	d102      	bne.n	800558e <_lseek_r+0x1e>
 8005588:	682b      	ldr	r3, [r5, #0]
 800558a:	b103      	cbz	r3, 800558e <_lseek_r+0x1e>
 800558c:	6023      	str	r3, [r4, #0]
 800558e:	bd38      	pop	{r3, r4, r5, pc}
 8005590:	200003e4 	.word	0x200003e4

08005594 <_read_r>:
 8005594:	b538      	push	{r3, r4, r5, lr}
 8005596:	4604      	mov	r4, r0
 8005598:	4608      	mov	r0, r1
 800559a:	4611      	mov	r1, r2
 800559c:	2200      	movs	r2, #0
 800559e:	4d05      	ldr	r5, [pc, #20]	@ (80055b4 <_read_r+0x20>)
 80055a0:	602a      	str	r2, [r5, #0]
 80055a2:	461a      	mov	r2, r3
 80055a4:	f7fe fe0c 	bl	80041c0 <_read>
 80055a8:	1c43      	adds	r3, r0, #1
 80055aa:	d102      	bne.n	80055b2 <_read_r+0x1e>
 80055ac:	682b      	ldr	r3, [r5, #0]
 80055ae:	b103      	cbz	r3, 80055b2 <_read_r+0x1e>
 80055b0:	6023      	str	r3, [r4, #0]
 80055b2:	bd38      	pop	{r3, r4, r5, pc}
 80055b4:	200003e4 	.word	0x200003e4

080055b8 <_sbrk_r>:
 80055b8:	b538      	push	{r3, r4, r5, lr}
 80055ba:	2300      	movs	r3, #0
 80055bc:	4d05      	ldr	r5, [pc, #20]	@ (80055d4 <_sbrk_r+0x1c>)
 80055be:	4604      	mov	r4, r0
 80055c0:	4608      	mov	r0, r1
 80055c2:	602b      	str	r3, [r5, #0]
 80055c4:	f7fe fe66 	bl	8004294 <_sbrk>
 80055c8:	1c43      	adds	r3, r0, #1
 80055ca:	d102      	bne.n	80055d2 <_sbrk_r+0x1a>
 80055cc:	682b      	ldr	r3, [r5, #0]
 80055ce:	b103      	cbz	r3, 80055d2 <_sbrk_r+0x1a>
 80055d0:	6023      	str	r3, [r4, #0]
 80055d2:	bd38      	pop	{r3, r4, r5, pc}
 80055d4:	200003e4 	.word	0x200003e4

080055d8 <_write_r>:
 80055d8:	b538      	push	{r3, r4, r5, lr}
 80055da:	4604      	mov	r4, r0
 80055dc:	4608      	mov	r0, r1
 80055de:	4611      	mov	r1, r2
 80055e0:	2200      	movs	r2, #0
 80055e2:	4d05      	ldr	r5, [pc, #20]	@ (80055f8 <_write_r+0x20>)
 80055e4:	602a      	str	r2, [r5, #0]
 80055e6:	461a      	mov	r2, r3
 80055e8:	f7fe fe07 	bl	80041fa <_write>
 80055ec:	1c43      	adds	r3, r0, #1
 80055ee:	d102      	bne.n	80055f6 <_write_r+0x1e>
 80055f0:	682b      	ldr	r3, [r5, #0]
 80055f2:	b103      	cbz	r3, 80055f6 <_write_r+0x1e>
 80055f4:	6023      	str	r3, [r4, #0]
 80055f6:	bd38      	pop	{r3, r4, r5, pc}
 80055f8:	200003e4 	.word	0x200003e4

080055fc <__errno>:
 80055fc:	4b01      	ldr	r3, [pc, #4]	@ (8005604 <__errno+0x8>)
 80055fe:	6818      	ldr	r0, [r3, #0]
 8005600:	4770      	bx	lr
 8005602:	bf00      	nop
 8005604:	200001a0 	.word	0x200001a0

08005608 <__libc_init_array>:
 8005608:	b570      	push	{r4, r5, r6, lr}
 800560a:	2600      	movs	r6, #0
 800560c:	4d0c      	ldr	r5, [pc, #48]	@ (8005640 <__libc_init_array+0x38>)
 800560e:	4c0d      	ldr	r4, [pc, #52]	@ (8005644 <__libc_init_array+0x3c>)
 8005610:	1b64      	subs	r4, r4, r5
 8005612:	10a4      	asrs	r4, r4, #2
 8005614:	42a6      	cmp	r6, r4
 8005616:	d109      	bne.n	800562c <__libc_init_array+0x24>
 8005618:	f002 fb18 	bl	8007c4c <_init>
 800561c:	2600      	movs	r6, #0
 800561e:	4d0a      	ldr	r5, [pc, #40]	@ (8005648 <__libc_init_array+0x40>)
 8005620:	4c0a      	ldr	r4, [pc, #40]	@ (800564c <__libc_init_array+0x44>)
 8005622:	1b64      	subs	r4, r4, r5
 8005624:	10a4      	asrs	r4, r4, #2
 8005626:	42a6      	cmp	r6, r4
 8005628:	d105      	bne.n	8005636 <__libc_init_array+0x2e>
 800562a:	bd70      	pop	{r4, r5, r6, pc}
 800562c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005630:	4798      	blx	r3
 8005632:	3601      	adds	r6, #1
 8005634:	e7ee      	b.n	8005614 <__libc_init_array+0xc>
 8005636:	f855 3b04 	ldr.w	r3, [r5], #4
 800563a:	4798      	blx	r3
 800563c:	3601      	adds	r6, #1
 800563e:	e7f2      	b.n	8005626 <__libc_init_array+0x1e>
 8005640:	080080ec 	.word	0x080080ec
 8005644:	080080ec 	.word	0x080080ec
 8005648:	080080ec 	.word	0x080080ec
 800564c:	080080f0 	.word	0x080080f0

08005650 <__retarget_lock_init_recursive>:
 8005650:	4770      	bx	lr

08005652 <__retarget_lock_acquire_recursive>:
 8005652:	4770      	bx	lr

08005654 <__retarget_lock_release_recursive>:
 8005654:	4770      	bx	lr

08005656 <memcpy>:
 8005656:	440a      	add	r2, r1
 8005658:	4291      	cmp	r1, r2
 800565a:	f100 33ff 	add.w	r3, r0, #4294967295
 800565e:	d100      	bne.n	8005662 <memcpy+0xc>
 8005660:	4770      	bx	lr
 8005662:	b510      	push	{r4, lr}
 8005664:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005668:	4291      	cmp	r1, r2
 800566a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800566e:	d1f9      	bne.n	8005664 <memcpy+0xe>
 8005670:	bd10      	pop	{r4, pc}
	...

08005674 <nan>:
 8005674:	2000      	movs	r0, #0
 8005676:	4901      	ldr	r1, [pc, #4]	@ (800567c <nan+0x8>)
 8005678:	4770      	bx	lr
 800567a:	bf00      	nop
 800567c:	7ff80000 	.word	0x7ff80000

08005680 <_free_r>:
 8005680:	b538      	push	{r3, r4, r5, lr}
 8005682:	4605      	mov	r5, r0
 8005684:	2900      	cmp	r1, #0
 8005686:	d040      	beq.n	800570a <_free_r+0x8a>
 8005688:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800568c:	1f0c      	subs	r4, r1, #4
 800568e:	2b00      	cmp	r3, #0
 8005690:	bfb8      	it	lt
 8005692:	18e4      	addlt	r4, r4, r3
 8005694:	f7fe ff10 	bl	80044b8 <__malloc_lock>
 8005698:	4a1c      	ldr	r2, [pc, #112]	@ (800570c <_free_r+0x8c>)
 800569a:	6813      	ldr	r3, [r2, #0]
 800569c:	b933      	cbnz	r3, 80056ac <_free_r+0x2c>
 800569e:	6063      	str	r3, [r4, #4]
 80056a0:	6014      	str	r4, [r2, #0]
 80056a2:	4628      	mov	r0, r5
 80056a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80056a8:	f7fe bf0c 	b.w	80044c4 <__malloc_unlock>
 80056ac:	42a3      	cmp	r3, r4
 80056ae:	d908      	bls.n	80056c2 <_free_r+0x42>
 80056b0:	6820      	ldr	r0, [r4, #0]
 80056b2:	1821      	adds	r1, r4, r0
 80056b4:	428b      	cmp	r3, r1
 80056b6:	bf01      	itttt	eq
 80056b8:	6819      	ldreq	r1, [r3, #0]
 80056ba:	685b      	ldreq	r3, [r3, #4]
 80056bc:	1809      	addeq	r1, r1, r0
 80056be:	6021      	streq	r1, [r4, #0]
 80056c0:	e7ed      	b.n	800569e <_free_r+0x1e>
 80056c2:	461a      	mov	r2, r3
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	b10b      	cbz	r3, 80056cc <_free_r+0x4c>
 80056c8:	42a3      	cmp	r3, r4
 80056ca:	d9fa      	bls.n	80056c2 <_free_r+0x42>
 80056cc:	6811      	ldr	r1, [r2, #0]
 80056ce:	1850      	adds	r0, r2, r1
 80056d0:	42a0      	cmp	r0, r4
 80056d2:	d10b      	bne.n	80056ec <_free_r+0x6c>
 80056d4:	6820      	ldr	r0, [r4, #0]
 80056d6:	4401      	add	r1, r0
 80056d8:	1850      	adds	r0, r2, r1
 80056da:	4283      	cmp	r3, r0
 80056dc:	6011      	str	r1, [r2, #0]
 80056de:	d1e0      	bne.n	80056a2 <_free_r+0x22>
 80056e0:	6818      	ldr	r0, [r3, #0]
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	4408      	add	r0, r1
 80056e6:	6010      	str	r0, [r2, #0]
 80056e8:	6053      	str	r3, [r2, #4]
 80056ea:	e7da      	b.n	80056a2 <_free_r+0x22>
 80056ec:	d902      	bls.n	80056f4 <_free_r+0x74>
 80056ee:	230c      	movs	r3, #12
 80056f0:	602b      	str	r3, [r5, #0]
 80056f2:	e7d6      	b.n	80056a2 <_free_r+0x22>
 80056f4:	6820      	ldr	r0, [r4, #0]
 80056f6:	1821      	adds	r1, r4, r0
 80056f8:	428b      	cmp	r3, r1
 80056fa:	bf01      	itttt	eq
 80056fc:	6819      	ldreq	r1, [r3, #0]
 80056fe:	685b      	ldreq	r3, [r3, #4]
 8005700:	1809      	addeq	r1, r1, r0
 8005702:	6021      	streq	r1, [r4, #0]
 8005704:	6063      	str	r3, [r4, #4]
 8005706:	6054      	str	r4, [r2, #4]
 8005708:	e7cb      	b.n	80056a2 <_free_r+0x22>
 800570a:	bd38      	pop	{r3, r4, r5, pc}
 800570c:	200002a4 	.word	0x200002a4

08005710 <rshift>:
 8005710:	6903      	ldr	r3, [r0, #16]
 8005712:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005716:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800571a:	f100 0414 	add.w	r4, r0, #20
 800571e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8005722:	dd46      	ble.n	80057b2 <rshift+0xa2>
 8005724:	f011 011f 	ands.w	r1, r1, #31
 8005728:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800572c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8005730:	d10c      	bne.n	800574c <rshift+0x3c>
 8005732:	4629      	mov	r1, r5
 8005734:	f100 0710 	add.w	r7, r0, #16
 8005738:	42b1      	cmp	r1, r6
 800573a:	d335      	bcc.n	80057a8 <rshift+0x98>
 800573c:	1a9b      	subs	r3, r3, r2
 800573e:	009b      	lsls	r3, r3, #2
 8005740:	1eea      	subs	r2, r5, #3
 8005742:	4296      	cmp	r6, r2
 8005744:	bf38      	it	cc
 8005746:	2300      	movcc	r3, #0
 8005748:	4423      	add	r3, r4
 800574a:	e015      	b.n	8005778 <rshift+0x68>
 800574c:	46a1      	mov	r9, r4
 800574e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8005752:	f1c1 0820 	rsb	r8, r1, #32
 8005756:	40cf      	lsrs	r7, r1
 8005758:	f105 0e04 	add.w	lr, r5, #4
 800575c:	4576      	cmp	r6, lr
 800575e:	46f4      	mov	ip, lr
 8005760:	d816      	bhi.n	8005790 <rshift+0x80>
 8005762:	1a9a      	subs	r2, r3, r2
 8005764:	0092      	lsls	r2, r2, #2
 8005766:	3a04      	subs	r2, #4
 8005768:	3501      	adds	r5, #1
 800576a:	42ae      	cmp	r6, r5
 800576c:	bf38      	it	cc
 800576e:	2200      	movcc	r2, #0
 8005770:	18a3      	adds	r3, r4, r2
 8005772:	50a7      	str	r7, [r4, r2]
 8005774:	b107      	cbz	r7, 8005778 <rshift+0x68>
 8005776:	3304      	adds	r3, #4
 8005778:	42a3      	cmp	r3, r4
 800577a:	eba3 0204 	sub.w	r2, r3, r4
 800577e:	bf08      	it	eq
 8005780:	2300      	moveq	r3, #0
 8005782:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8005786:	6102      	str	r2, [r0, #16]
 8005788:	bf08      	it	eq
 800578a:	6143      	streq	r3, [r0, #20]
 800578c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005790:	f8dc c000 	ldr.w	ip, [ip]
 8005794:	fa0c fc08 	lsl.w	ip, ip, r8
 8005798:	ea4c 0707 	orr.w	r7, ip, r7
 800579c:	f849 7b04 	str.w	r7, [r9], #4
 80057a0:	f85e 7b04 	ldr.w	r7, [lr], #4
 80057a4:	40cf      	lsrs	r7, r1
 80057a6:	e7d9      	b.n	800575c <rshift+0x4c>
 80057a8:	f851 cb04 	ldr.w	ip, [r1], #4
 80057ac:	f847 cf04 	str.w	ip, [r7, #4]!
 80057b0:	e7c2      	b.n	8005738 <rshift+0x28>
 80057b2:	4623      	mov	r3, r4
 80057b4:	e7e0      	b.n	8005778 <rshift+0x68>

080057b6 <__hexdig_fun>:
 80057b6:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80057ba:	2b09      	cmp	r3, #9
 80057bc:	d802      	bhi.n	80057c4 <__hexdig_fun+0xe>
 80057be:	3820      	subs	r0, #32
 80057c0:	b2c0      	uxtb	r0, r0
 80057c2:	4770      	bx	lr
 80057c4:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80057c8:	2b05      	cmp	r3, #5
 80057ca:	d801      	bhi.n	80057d0 <__hexdig_fun+0x1a>
 80057cc:	3847      	subs	r0, #71	@ 0x47
 80057ce:	e7f7      	b.n	80057c0 <__hexdig_fun+0xa>
 80057d0:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80057d4:	2b05      	cmp	r3, #5
 80057d6:	d801      	bhi.n	80057dc <__hexdig_fun+0x26>
 80057d8:	3827      	subs	r0, #39	@ 0x27
 80057da:	e7f1      	b.n	80057c0 <__hexdig_fun+0xa>
 80057dc:	2000      	movs	r0, #0
 80057de:	4770      	bx	lr

080057e0 <__gethex>:
 80057e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057e4:	468a      	mov	sl, r1
 80057e6:	4690      	mov	r8, r2
 80057e8:	b085      	sub	sp, #20
 80057ea:	9302      	str	r3, [sp, #8]
 80057ec:	680b      	ldr	r3, [r1, #0]
 80057ee:	9001      	str	r0, [sp, #4]
 80057f0:	1c9c      	adds	r4, r3, #2
 80057f2:	46a1      	mov	r9, r4
 80057f4:	f814 0b01 	ldrb.w	r0, [r4], #1
 80057f8:	2830      	cmp	r0, #48	@ 0x30
 80057fa:	d0fa      	beq.n	80057f2 <__gethex+0x12>
 80057fc:	eba9 0303 	sub.w	r3, r9, r3
 8005800:	f1a3 0b02 	sub.w	fp, r3, #2
 8005804:	f7ff ffd7 	bl	80057b6 <__hexdig_fun>
 8005808:	4605      	mov	r5, r0
 800580a:	2800      	cmp	r0, #0
 800580c:	d168      	bne.n	80058e0 <__gethex+0x100>
 800580e:	2201      	movs	r2, #1
 8005810:	4648      	mov	r0, r9
 8005812:	499f      	ldr	r1, [pc, #636]	@ (8005a90 <__gethex+0x2b0>)
 8005814:	f7ff fe77 	bl	8005506 <strncmp>
 8005818:	4607      	mov	r7, r0
 800581a:	2800      	cmp	r0, #0
 800581c:	d167      	bne.n	80058ee <__gethex+0x10e>
 800581e:	f899 0001 	ldrb.w	r0, [r9, #1]
 8005822:	4626      	mov	r6, r4
 8005824:	f7ff ffc7 	bl	80057b6 <__hexdig_fun>
 8005828:	2800      	cmp	r0, #0
 800582a:	d062      	beq.n	80058f2 <__gethex+0x112>
 800582c:	4623      	mov	r3, r4
 800582e:	7818      	ldrb	r0, [r3, #0]
 8005830:	4699      	mov	r9, r3
 8005832:	2830      	cmp	r0, #48	@ 0x30
 8005834:	f103 0301 	add.w	r3, r3, #1
 8005838:	d0f9      	beq.n	800582e <__gethex+0x4e>
 800583a:	f7ff ffbc 	bl	80057b6 <__hexdig_fun>
 800583e:	fab0 f580 	clz	r5, r0
 8005842:	f04f 0b01 	mov.w	fp, #1
 8005846:	096d      	lsrs	r5, r5, #5
 8005848:	464a      	mov	r2, r9
 800584a:	4616      	mov	r6, r2
 800584c:	7830      	ldrb	r0, [r6, #0]
 800584e:	3201      	adds	r2, #1
 8005850:	f7ff ffb1 	bl	80057b6 <__hexdig_fun>
 8005854:	2800      	cmp	r0, #0
 8005856:	d1f8      	bne.n	800584a <__gethex+0x6a>
 8005858:	2201      	movs	r2, #1
 800585a:	4630      	mov	r0, r6
 800585c:	498c      	ldr	r1, [pc, #560]	@ (8005a90 <__gethex+0x2b0>)
 800585e:	f7ff fe52 	bl	8005506 <strncmp>
 8005862:	2800      	cmp	r0, #0
 8005864:	d13f      	bne.n	80058e6 <__gethex+0x106>
 8005866:	b944      	cbnz	r4, 800587a <__gethex+0x9a>
 8005868:	1c74      	adds	r4, r6, #1
 800586a:	4622      	mov	r2, r4
 800586c:	4616      	mov	r6, r2
 800586e:	7830      	ldrb	r0, [r6, #0]
 8005870:	3201      	adds	r2, #1
 8005872:	f7ff ffa0 	bl	80057b6 <__hexdig_fun>
 8005876:	2800      	cmp	r0, #0
 8005878:	d1f8      	bne.n	800586c <__gethex+0x8c>
 800587a:	1ba4      	subs	r4, r4, r6
 800587c:	00a7      	lsls	r7, r4, #2
 800587e:	7833      	ldrb	r3, [r6, #0]
 8005880:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8005884:	2b50      	cmp	r3, #80	@ 0x50
 8005886:	d13e      	bne.n	8005906 <__gethex+0x126>
 8005888:	7873      	ldrb	r3, [r6, #1]
 800588a:	2b2b      	cmp	r3, #43	@ 0x2b
 800588c:	d033      	beq.n	80058f6 <__gethex+0x116>
 800588e:	2b2d      	cmp	r3, #45	@ 0x2d
 8005890:	d034      	beq.n	80058fc <__gethex+0x11c>
 8005892:	2400      	movs	r4, #0
 8005894:	1c71      	adds	r1, r6, #1
 8005896:	7808      	ldrb	r0, [r1, #0]
 8005898:	f7ff ff8d 	bl	80057b6 <__hexdig_fun>
 800589c:	1e43      	subs	r3, r0, #1
 800589e:	b2db      	uxtb	r3, r3
 80058a0:	2b18      	cmp	r3, #24
 80058a2:	d830      	bhi.n	8005906 <__gethex+0x126>
 80058a4:	f1a0 0210 	sub.w	r2, r0, #16
 80058a8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80058ac:	f7ff ff83 	bl	80057b6 <__hexdig_fun>
 80058b0:	f100 3cff 	add.w	ip, r0, #4294967295
 80058b4:	fa5f fc8c 	uxtb.w	ip, ip
 80058b8:	f1bc 0f18 	cmp.w	ip, #24
 80058bc:	f04f 030a 	mov.w	r3, #10
 80058c0:	d91e      	bls.n	8005900 <__gethex+0x120>
 80058c2:	b104      	cbz	r4, 80058c6 <__gethex+0xe6>
 80058c4:	4252      	negs	r2, r2
 80058c6:	4417      	add	r7, r2
 80058c8:	f8ca 1000 	str.w	r1, [sl]
 80058cc:	b1ed      	cbz	r5, 800590a <__gethex+0x12a>
 80058ce:	f1bb 0f00 	cmp.w	fp, #0
 80058d2:	bf0c      	ite	eq
 80058d4:	2506      	moveq	r5, #6
 80058d6:	2500      	movne	r5, #0
 80058d8:	4628      	mov	r0, r5
 80058da:	b005      	add	sp, #20
 80058dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058e0:	2500      	movs	r5, #0
 80058e2:	462c      	mov	r4, r5
 80058e4:	e7b0      	b.n	8005848 <__gethex+0x68>
 80058e6:	2c00      	cmp	r4, #0
 80058e8:	d1c7      	bne.n	800587a <__gethex+0x9a>
 80058ea:	4627      	mov	r7, r4
 80058ec:	e7c7      	b.n	800587e <__gethex+0x9e>
 80058ee:	464e      	mov	r6, r9
 80058f0:	462f      	mov	r7, r5
 80058f2:	2501      	movs	r5, #1
 80058f4:	e7c3      	b.n	800587e <__gethex+0x9e>
 80058f6:	2400      	movs	r4, #0
 80058f8:	1cb1      	adds	r1, r6, #2
 80058fa:	e7cc      	b.n	8005896 <__gethex+0xb6>
 80058fc:	2401      	movs	r4, #1
 80058fe:	e7fb      	b.n	80058f8 <__gethex+0x118>
 8005900:	fb03 0002 	mla	r0, r3, r2, r0
 8005904:	e7ce      	b.n	80058a4 <__gethex+0xc4>
 8005906:	4631      	mov	r1, r6
 8005908:	e7de      	b.n	80058c8 <__gethex+0xe8>
 800590a:	4629      	mov	r1, r5
 800590c:	eba6 0309 	sub.w	r3, r6, r9
 8005910:	3b01      	subs	r3, #1
 8005912:	2b07      	cmp	r3, #7
 8005914:	dc0a      	bgt.n	800592c <__gethex+0x14c>
 8005916:	9801      	ldr	r0, [sp, #4]
 8005918:	f000 fa46 	bl	8005da8 <_Balloc>
 800591c:	4604      	mov	r4, r0
 800591e:	b940      	cbnz	r0, 8005932 <__gethex+0x152>
 8005920:	4602      	mov	r2, r0
 8005922:	21e4      	movs	r1, #228	@ 0xe4
 8005924:	4b5b      	ldr	r3, [pc, #364]	@ (8005a94 <__gethex+0x2b4>)
 8005926:	485c      	ldr	r0, [pc, #368]	@ (8005a98 <__gethex+0x2b8>)
 8005928:	f001 fe3a 	bl	80075a0 <__assert_func>
 800592c:	3101      	adds	r1, #1
 800592e:	105b      	asrs	r3, r3, #1
 8005930:	e7ef      	b.n	8005912 <__gethex+0x132>
 8005932:	2300      	movs	r3, #0
 8005934:	f100 0a14 	add.w	sl, r0, #20
 8005938:	4655      	mov	r5, sl
 800593a:	469b      	mov	fp, r3
 800593c:	45b1      	cmp	r9, r6
 800593e:	d337      	bcc.n	80059b0 <__gethex+0x1d0>
 8005940:	f845 bb04 	str.w	fp, [r5], #4
 8005944:	eba5 050a 	sub.w	r5, r5, sl
 8005948:	10ad      	asrs	r5, r5, #2
 800594a:	6125      	str	r5, [r4, #16]
 800594c:	4658      	mov	r0, fp
 800594e:	f000 fb1d 	bl	8005f8c <__hi0bits>
 8005952:	016d      	lsls	r5, r5, #5
 8005954:	f8d8 6000 	ldr.w	r6, [r8]
 8005958:	1a2d      	subs	r5, r5, r0
 800595a:	42b5      	cmp	r5, r6
 800595c:	dd54      	ble.n	8005a08 <__gethex+0x228>
 800595e:	1bad      	subs	r5, r5, r6
 8005960:	4629      	mov	r1, r5
 8005962:	4620      	mov	r0, r4
 8005964:	f000 fea5 	bl	80066b2 <__any_on>
 8005968:	4681      	mov	r9, r0
 800596a:	b178      	cbz	r0, 800598c <__gethex+0x1ac>
 800596c:	f04f 0901 	mov.w	r9, #1
 8005970:	1e6b      	subs	r3, r5, #1
 8005972:	1159      	asrs	r1, r3, #5
 8005974:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8005978:	f003 021f 	and.w	r2, r3, #31
 800597c:	fa09 f202 	lsl.w	r2, r9, r2
 8005980:	420a      	tst	r2, r1
 8005982:	d003      	beq.n	800598c <__gethex+0x1ac>
 8005984:	454b      	cmp	r3, r9
 8005986:	dc36      	bgt.n	80059f6 <__gethex+0x216>
 8005988:	f04f 0902 	mov.w	r9, #2
 800598c:	4629      	mov	r1, r5
 800598e:	4620      	mov	r0, r4
 8005990:	f7ff febe 	bl	8005710 <rshift>
 8005994:	442f      	add	r7, r5
 8005996:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800599a:	42bb      	cmp	r3, r7
 800599c:	da42      	bge.n	8005a24 <__gethex+0x244>
 800599e:	4621      	mov	r1, r4
 80059a0:	9801      	ldr	r0, [sp, #4]
 80059a2:	f000 fa41 	bl	8005e28 <_Bfree>
 80059a6:	2300      	movs	r3, #0
 80059a8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80059aa:	25a3      	movs	r5, #163	@ 0xa3
 80059ac:	6013      	str	r3, [r2, #0]
 80059ae:	e793      	b.n	80058d8 <__gethex+0xf8>
 80059b0:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80059b4:	2a2e      	cmp	r2, #46	@ 0x2e
 80059b6:	d012      	beq.n	80059de <__gethex+0x1fe>
 80059b8:	2b20      	cmp	r3, #32
 80059ba:	d104      	bne.n	80059c6 <__gethex+0x1e6>
 80059bc:	f845 bb04 	str.w	fp, [r5], #4
 80059c0:	f04f 0b00 	mov.w	fp, #0
 80059c4:	465b      	mov	r3, fp
 80059c6:	7830      	ldrb	r0, [r6, #0]
 80059c8:	9303      	str	r3, [sp, #12]
 80059ca:	f7ff fef4 	bl	80057b6 <__hexdig_fun>
 80059ce:	9b03      	ldr	r3, [sp, #12]
 80059d0:	f000 000f 	and.w	r0, r0, #15
 80059d4:	4098      	lsls	r0, r3
 80059d6:	ea4b 0b00 	orr.w	fp, fp, r0
 80059da:	3304      	adds	r3, #4
 80059dc:	e7ae      	b.n	800593c <__gethex+0x15c>
 80059de:	45b1      	cmp	r9, r6
 80059e0:	d8ea      	bhi.n	80059b8 <__gethex+0x1d8>
 80059e2:	2201      	movs	r2, #1
 80059e4:	4630      	mov	r0, r6
 80059e6:	492a      	ldr	r1, [pc, #168]	@ (8005a90 <__gethex+0x2b0>)
 80059e8:	9303      	str	r3, [sp, #12]
 80059ea:	f7ff fd8c 	bl	8005506 <strncmp>
 80059ee:	9b03      	ldr	r3, [sp, #12]
 80059f0:	2800      	cmp	r0, #0
 80059f2:	d1e1      	bne.n	80059b8 <__gethex+0x1d8>
 80059f4:	e7a2      	b.n	800593c <__gethex+0x15c>
 80059f6:	4620      	mov	r0, r4
 80059f8:	1ea9      	subs	r1, r5, #2
 80059fa:	f000 fe5a 	bl	80066b2 <__any_on>
 80059fe:	2800      	cmp	r0, #0
 8005a00:	d0c2      	beq.n	8005988 <__gethex+0x1a8>
 8005a02:	f04f 0903 	mov.w	r9, #3
 8005a06:	e7c1      	b.n	800598c <__gethex+0x1ac>
 8005a08:	da09      	bge.n	8005a1e <__gethex+0x23e>
 8005a0a:	1b75      	subs	r5, r6, r5
 8005a0c:	4621      	mov	r1, r4
 8005a0e:	462a      	mov	r2, r5
 8005a10:	9801      	ldr	r0, [sp, #4]
 8005a12:	f000 fc1f 	bl	8006254 <__lshift>
 8005a16:	4604      	mov	r4, r0
 8005a18:	1b7f      	subs	r7, r7, r5
 8005a1a:	f100 0a14 	add.w	sl, r0, #20
 8005a1e:	f04f 0900 	mov.w	r9, #0
 8005a22:	e7b8      	b.n	8005996 <__gethex+0x1b6>
 8005a24:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8005a28:	42bd      	cmp	r5, r7
 8005a2a:	dd6f      	ble.n	8005b0c <__gethex+0x32c>
 8005a2c:	1bed      	subs	r5, r5, r7
 8005a2e:	42ae      	cmp	r6, r5
 8005a30:	dc34      	bgt.n	8005a9c <__gethex+0x2bc>
 8005a32:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8005a36:	2b02      	cmp	r3, #2
 8005a38:	d022      	beq.n	8005a80 <__gethex+0x2a0>
 8005a3a:	2b03      	cmp	r3, #3
 8005a3c:	d024      	beq.n	8005a88 <__gethex+0x2a8>
 8005a3e:	2b01      	cmp	r3, #1
 8005a40:	d115      	bne.n	8005a6e <__gethex+0x28e>
 8005a42:	42ae      	cmp	r6, r5
 8005a44:	d113      	bne.n	8005a6e <__gethex+0x28e>
 8005a46:	2e01      	cmp	r6, #1
 8005a48:	d10b      	bne.n	8005a62 <__gethex+0x282>
 8005a4a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8005a4e:	9a02      	ldr	r2, [sp, #8]
 8005a50:	2562      	movs	r5, #98	@ 0x62
 8005a52:	6013      	str	r3, [r2, #0]
 8005a54:	2301      	movs	r3, #1
 8005a56:	6123      	str	r3, [r4, #16]
 8005a58:	f8ca 3000 	str.w	r3, [sl]
 8005a5c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005a5e:	601c      	str	r4, [r3, #0]
 8005a60:	e73a      	b.n	80058d8 <__gethex+0xf8>
 8005a62:	4620      	mov	r0, r4
 8005a64:	1e71      	subs	r1, r6, #1
 8005a66:	f000 fe24 	bl	80066b2 <__any_on>
 8005a6a:	2800      	cmp	r0, #0
 8005a6c:	d1ed      	bne.n	8005a4a <__gethex+0x26a>
 8005a6e:	4621      	mov	r1, r4
 8005a70:	9801      	ldr	r0, [sp, #4]
 8005a72:	f000 f9d9 	bl	8005e28 <_Bfree>
 8005a76:	2300      	movs	r3, #0
 8005a78:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005a7a:	2550      	movs	r5, #80	@ 0x50
 8005a7c:	6013      	str	r3, [r2, #0]
 8005a7e:	e72b      	b.n	80058d8 <__gethex+0xf8>
 8005a80:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d1f3      	bne.n	8005a6e <__gethex+0x28e>
 8005a86:	e7e0      	b.n	8005a4a <__gethex+0x26a>
 8005a88:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d1dd      	bne.n	8005a4a <__gethex+0x26a>
 8005a8e:	e7ee      	b.n	8005a6e <__gethex+0x28e>
 8005a90:	08007d0c 	.word	0x08007d0c
 8005a94:	08007e79 	.word	0x08007e79
 8005a98:	08007e8a 	.word	0x08007e8a
 8005a9c:	1e6f      	subs	r7, r5, #1
 8005a9e:	f1b9 0f00 	cmp.w	r9, #0
 8005aa2:	d130      	bne.n	8005b06 <__gethex+0x326>
 8005aa4:	b127      	cbz	r7, 8005ab0 <__gethex+0x2d0>
 8005aa6:	4639      	mov	r1, r7
 8005aa8:	4620      	mov	r0, r4
 8005aaa:	f000 fe02 	bl	80066b2 <__any_on>
 8005aae:	4681      	mov	r9, r0
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	4629      	mov	r1, r5
 8005ab4:	1b76      	subs	r6, r6, r5
 8005ab6:	2502      	movs	r5, #2
 8005ab8:	117a      	asrs	r2, r7, #5
 8005aba:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8005abe:	f007 071f 	and.w	r7, r7, #31
 8005ac2:	40bb      	lsls	r3, r7
 8005ac4:	4213      	tst	r3, r2
 8005ac6:	4620      	mov	r0, r4
 8005ac8:	bf18      	it	ne
 8005aca:	f049 0902 	orrne.w	r9, r9, #2
 8005ace:	f7ff fe1f 	bl	8005710 <rshift>
 8005ad2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8005ad6:	f1b9 0f00 	cmp.w	r9, #0
 8005ada:	d047      	beq.n	8005b6c <__gethex+0x38c>
 8005adc:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8005ae0:	2b02      	cmp	r3, #2
 8005ae2:	d015      	beq.n	8005b10 <__gethex+0x330>
 8005ae4:	2b03      	cmp	r3, #3
 8005ae6:	d017      	beq.n	8005b18 <__gethex+0x338>
 8005ae8:	2b01      	cmp	r3, #1
 8005aea:	d109      	bne.n	8005b00 <__gethex+0x320>
 8005aec:	f019 0f02 	tst.w	r9, #2
 8005af0:	d006      	beq.n	8005b00 <__gethex+0x320>
 8005af2:	f8da 3000 	ldr.w	r3, [sl]
 8005af6:	ea49 0903 	orr.w	r9, r9, r3
 8005afa:	f019 0f01 	tst.w	r9, #1
 8005afe:	d10e      	bne.n	8005b1e <__gethex+0x33e>
 8005b00:	f045 0510 	orr.w	r5, r5, #16
 8005b04:	e032      	b.n	8005b6c <__gethex+0x38c>
 8005b06:	f04f 0901 	mov.w	r9, #1
 8005b0a:	e7d1      	b.n	8005ab0 <__gethex+0x2d0>
 8005b0c:	2501      	movs	r5, #1
 8005b0e:	e7e2      	b.n	8005ad6 <__gethex+0x2f6>
 8005b10:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005b12:	f1c3 0301 	rsb	r3, r3, #1
 8005b16:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005b18:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d0f0      	beq.n	8005b00 <__gethex+0x320>
 8005b1e:	f04f 0c00 	mov.w	ip, #0
 8005b22:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8005b26:	f104 0314 	add.w	r3, r4, #20
 8005b2a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8005b2e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8005b32:	4618      	mov	r0, r3
 8005b34:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b38:	f1b2 3fff 	cmp.w	r2, #4294967295
 8005b3c:	d01b      	beq.n	8005b76 <__gethex+0x396>
 8005b3e:	3201      	adds	r2, #1
 8005b40:	6002      	str	r2, [r0, #0]
 8005b42:	2d02      	cmp	r5, #2
 8005b44:	f104 0314 	add.w	r3, r4, #20
 8005b48:	d13c      	bne.n	8005bc4 <__gethex+0x3e4>
 8005b4a:	f8d8 2000 	ldr.w	r2, [r8]
 8005b4e:	3a01      	subs	r2, #1
 8005b50:	42b2      	cmp	r2, r6
 8005b52:	d109      	bne.n	8005b68 <__gethex+0x388>
 8005b54:	2201      	movs	r2, #1
 8005b56:	1171      	asrs	r1, r6, #5
 8005b58:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005b5c:	f006 061f 	and.w	r6, r6, #31
 8005b60:	fa02 f606 	lsl.w	r6, r2, r6
 8005b64:	421e      	tst	r6, r3
 8005b66:	d13a      	bne.n	8005bde <__gethex+0x3fe>
 8005b68:	f045 0520 	orr.w	r5, r5, #32
 8005b6c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005b6e:	601c      	str	r4, [r3, #0]
 8005b70:	9b02      	ldr	r3, [sp, #8]
 8005b72:	601f      	str	r7, [r3, #0]
 8005b74:	e6b0      	b.n	80058d8 <__gethex+0xf8>
 8005b76:	4299      	cmp	r1, r3
 8005b78:	f843 cc04 	str.w	ip, [r3, #-4]
 8005b7c:	d8d9      	bhi.n	8005b32 <__gethex+0x352>
 8005b7e:	68a3      	ldr	r3, [r4, #8]
 8005b80:	459b      	cmp	fp, r3
 8005b82:	db17      	blt.n	8005bb4 <__gethex+0x3d4>
 8005b84:	6861      	ldr	r1, [r4, #4]
 8005b86:	9801      	ldr	r0, [sp, #4]
 8005b88:	3101      	adds	r1, #1
 8005b8a:	f000 f90d 	bl	8005da8 <_Balloc>
 8005b8e:	4681      	mov	r9, r0
 8005b90:	b918      	cbnz	r0, 8005b9a <__gethex+0x3ba>
 8005b92:	4602      	mov	r2, r0
 8005b94:	2184      	movs	r1, #132	@ 0x84
 8005b96:	4b19      	ldr	r3, [pc, #100]	@ (8005bfc <__gethex+0x41c>)
 8005b98:	e6c5      	b.n	8005926 <__gethex+0x146>
 8005b9a:	6922      	ldr	r2, [r4, #16]
 8005b9c:	f104 010c 	add.w	r1, r4, #12
 8005ba0:	3202      	adds	r2, #2
 8005ba2:	0092      	lsls	r2, r2, #2
 8005ba4:	300c      	adds	r0, #12
 8005ba6:	f7ff fd56 	bl	8005656 <memcpy>
 8005baa:	4621      	mov	r1, r4
 8005bac:	9801      	ldr	r0, [sp, #4]
 8005bae:	f000 f93b 	bl	8005e28 <_Bfree>
 8005bb2:	464c      	mov	r4, r9
 8005bb4:	6923      	ldr	r3, [r4, #16]
 8005bb6:	1c5a      	adds	r2, r3, #1
 8005bb8:	6122      	str	r2, [r4, #16]
 8005bba:	2201      	movs	r2, #1
 8005bbc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005bc0:	615a      	str	r2, [r3, #20]
 8005bc2:	e7be      	b.n	8005b42 <__gethex+0x362>
 8005bc4:	6922      	ldr	r2, [r4, #16]
 8005bc6:	455a      	cmp	r2, fp
 8005bc8:	dd0b      	ble.n	8005be2 <__gethex+0x402>
 8005bca:	2101      	movs	r1, #1
 8005bcc:	4620      	mov	r0, r4
 8005bce:	f7ff fd9f 	bl	8005710 <rshift>
 8005bd2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005bd6:	3701      	adds	r7, #1
 8005bd8:	42bb      	cmp	r3, r7
 8005bda:	f6ff aee0 	blt.w	800599e <__gethex+0x1be>
 8005bde:	2501      	movs	r5, #1
 8005be0:	e7c2      	b.n	8005b68 <__gethex+0x388>
 8005be2:	f016 061f 	ands.w	r6, r6, #31
 8005be6:	d0fa      	beq.n	8005bde <__gethex+0x3fe>
 8005be8:	4453      	add	r3, sl
 8005bea:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8005bee:	f000 f9cd 	bl	8005f8c <__hi0bits>
 8005bf2:	f1c6 0620 	rsb	r6, r6, #32
 8005bf6:	42b0      	cmp	r0, r6
 8005bf8:	dbe7      	blt.n	8005bca <__gethex+0x3ea>
 8005bfa:	e7f0      	b.n	8005bde <__gethex+0x3fe>
 8005bfc:	08007e79 	.word	0x08007e79

08005c00 <L_shift>:
 8005c00:	f1c2 0208 	rsb	r2, r2, #8
 8005c04:	0092      	lsls	r2, r2, #2
 8005c06:	b570      	push	{r4, r5, r6, lr}
 8005c08:	f1c2 0620 	rsb	r6, r2, #32
 8005c0c:	6843      	ldr	r3, [r0, #4]
 8005c0e:	6804      	ldr	r4, [r0, #0]
 8005c10:	fa03 f506 	lsl.w	r5, r3, r6
 8005c14:	432c      	orrs	r4, r5
 8005c16:	40d3      	lsrs	r3, r2
 8005c18:	6004      	str	r4, [r0, #0]
 8005c1a:	f840 3f04 	str.w	r3, [r0, #4]!
 8005c1e:	4288      	cmp	r0, r1
 8005c20:	d3f4      	bcc.n	8005c0c <L_shift+0xc>
 8005c22:	bd70      	pop	{r4, r5, r6, pc}

08005c24 <__match>:
 8005c24:	b530      	push	{r4, r5, lr}
 8005c26:	6803      	ldr	r3, [r0, #0]
 8005c28:	3301      	adds	r3, #1
 8005c2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005c2e:	b914      	cbnz	r4, 8005c36 <__match+0x12>
 8005c30:	6003      	str	r3, [r0, #0]
 8005c32:	2001      	movs	r0, #1
 8005c34:	bd30      	pop	{r4, r5, pc}
 8005c36:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005c3a:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8005c3e:	2d19      	cmp	r5, #25
 8005c40:	bf98      	it	ls
 8005c42:	3220      	addls	r2, #32
 8005c44:	42a2      	cmp	r2, r4
 8005c46:	d0f0      	beq.n	8005c2a <__match+0x6>
 8005c48:	2000      	movs	r0, #0
 8005c4a:	e7f3      	b.n	8005c34 <__match+0x10>

08005c4c <__hexnan>:
 8005c4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c50:	2500      	movs	r5, #0
 8005c52:	680b      	ldr	r3, [r1, #0]
 8005c54:	4682      	mov	sl, r0
 8005c56:	115e      	asrs	r6, r3, #5
 8005c58:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8005c5c:	f013 031f 	ands.w	r3, r3, #31
 8005c60:	bf18      	it	ne
 8005c62:	3604      	addne	r6, #4
 8005c64:	1f37      	subs	r7, r6, #4
 8005c66:	4690      	mov	r8, r2
 8005c68:	46b9      	mov	r9, r7
 8005c6a:	463c      	mov	r4, r7
 8005c6c:	46ab      	mov	fp, r5
 8005c6e:	b087      	sub	sp, #28
 8005c70:	6801      	ldr	r1, [r0, #0]
 8005c72:	9301      	str	r3, [sp, #4]
 8005c74:	f846 5c04 	str.w	r5, [r6, #-4]
 8005c78:	9502      	str	r5, [sp, #8]
 8005c7a:	784a      	ldrb	r2, [r1, #1]
 8005c7c:	1c4b      	adds	r3, r1, #1
 8005c7e:	9303      	str	r3, [sp, #12]
 8005c80:	b342      	cbz	r2, 8005cd4 <__hexnan+0x88>
 8005c82:	4610      	mov	r0, r2
 8005c84:	9105      	str	r1, [sp, #20]
 8005c86:	9204      	str	r2, [sp, #16]
 8005c88:	f7ff fd95 	bl	80057b6 <__hexdig_fun>
 8005c8c:	2800      	cmp	r0, #0
 8005c8e:	d151      	bne.n	8005d34 <__hexnan+0xe8>
 8005c90:	9a04      	ldr	r2, [sp, #16]
 8005c92:	9905      	ldr	r1, [sp, #20]
 8005c94:	2a20      	cmp	r2, #32
 8005c96:	d818      	bhi.n	8005cca <__hexnan+0x7e>
 8005c98:	9b02      	ldr	r3, [sp, #8]
 8005c9a:	459b      	cmp	fp, r3
 8005c9c:	dd13      	ble.n	8005cc6 <__hexnan+0x7a>
 8005c9e:	454c      	cmp	r4, r9
 8005ca0:	d206      	bcs.n	8005cb0 <__hexnan+0x64>
 8005ca2:	2d07      	cmp	r5, #7
 8005ca4:	dc04      	bgt.n	8005cb0 <__hexnan+0x64>
 8005ca6:	462a      	mov	r2, r5
 8005ca8:	4649      	mov	r1, r9
 8005caa:	4620      	mov	r0, r4
 8005cac:	f7ff ffa8 	bl	8005c00 <L_shift>
 8005cb0:	4544      	cmp	r4, r8
 8005cb2:	d952      	bls.n	8005d5a <__hexnan+0x10e>
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	f1a4 0904 	sub.w	r9, r4, #4
 8005cba:	f844 3c04 	str.w	r3, [r4, #-4]
 8005cbe:	461d      	mov	r5, r3
 8005cc0:	464c      	mov	r4, r9
 8005cc2:	f8cd b008 	str.w	fp, [sp, #8]
 8005cc6:	9903      	ldr	r1, [sp, #12]
 8005cc8:	e7d7      	b.n	8005c7a <__hexnan+0x2e>
 8005cca:	2a29      	cmp	r2, #41	@ 0x29
 8005ccc:	d157      	bne.n	8005d7e <__hexnan+0x132>
 8005cce:	3102      	adds	r1, #2
 8005cd0:	f8ca 1000 	str.w	r1, [sl]
 8005cd4:	f1bb 0f00 	cmp.w	fp, #0
 8005cd8:	d051      	beq.n	8005d7e <__hexnan+0x132>
 8005cda:	454c      	cmp	r4, r9
 8005cdc:	d206      	bcs.n	8005cec <__hexnan+0xa0>
 8005cde:	2d07      	cmp	r5, #7
 8005ce0:	dc04      	bgt.n	8005cec <__hexnan+0xa0>
 8005ce2:	462a      	mov	r2, r5
 8005ce4:	4649      	mov	r1, r9
 8005ce6:	4620      	mov	r0, r4
 8005ce8:	f7ff ff8a 	bl	8005c00 <L_shift>
 8005cec:	4544      	cmp	r4, r8
 8005cee:	d936      	bls.n	8005d5e <__hexnan+0x112>
 8005cf0:	4623      	mov	r3, r4
 8005cf2:	f1a8 0204 	sub.w	r2, r8, #4
 8005cf6:	f853 1b04 	ldr.w	r1, [r3], #4
 8005cfa:	429f      	cmp	r7, r3
 8005cfc:	f842 1f04 	str.w	r1, [r2, #4]!
 8005d00:	d2f9      	bcs.n	8005cf6 <__hexnan+0xaa>
 8005d02:	1b3b      	subs	r3, r7, r4
 8005d04:	f023 0303 	bic.w	r3, r3, #3
 8005d08:	3304      	adds	r3, #4
 8005d0a:	3401      	adds	r4, #1
 8005d0c:	3e03      	subs	r6, #3
 8005d0e:	42b4      	cmp	r4, r6
 8005d10:	bf88      	it	hi
 8005d12:	2304      	movhi	r3, #4
 8005d14:	2200      	movs	r2, #0
 8005d16:	4443      	add	r3, r8
 8005d18:	f843 2b04 	str.w	r2, [r3], #4
 8005d1c:	429f      	cmp	r7, r3
 8005d1e:	d2fb      	bcs.n	8005d18 <__hexnan+0xcc>
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	b91b      	cbnz	r3, 8005d2c <__hexnan+0xe0>
 8005d24:	4547      	cmp	r7, r8
 8005d26:	d128      	bne.n	8005d7a <__hexnan+0x12e>
 8005d28:	2301      	movs	r3, #1
 8005d2a:	603b      	str	r3, [r7, #0]
 8005d2c:	2005      	movs	r0, #5
 8005d2e:	b007      	add	sp, #28
 8005d30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d34:	3501      	adds	r5, #1
 8005d36:	2d08      	cmp	r5, #8
 8005d38:	f10b 0b01 	add.w	fp, fp, #1
 8005d3c:	dd06      	ble.n	8005d4c <__hexnan+0x100>
 8005d3e:	4544      	cmp	r4, r8
 8005d40:	d9c1      	bls.n	8005cc6 <__hexnan+0x7a>
 8005d42:	2300      	movs	r3, #0
 8005d44:	2501      	movs	r5, #1
 8005d46:	f844 3c04 	str.w	r3, [r4, #-4]
 8005d4a:	3c04      	subs	r4, #4
 8005d4c:	6822      	ldr	r2, [r4, #0]
 8005d4e:	f000 000f 	and.w	r0, r0, #15
 8005d52:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8005d56:	6020      	str	r0, [r4, #0]
 8005d58:	e7b5      	b.n	8005cc6 <__hexnan+0x7a>
 8005d5a:	2508      	movs	r5, #8
 8005d5c:	e7b3      	b.n	8005cc6 <__hexnan+0x7a>
 8005d5e:	9b01      	ldr	r3, [sp, #4]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d0dd      	beq.n	8005d20 <__hexnan+0xd4>
 8005d64:	f04f 32ff 	mov.w	r2, #4294967295
 8005d68:	f1c3 0320 	rsb	r3, r3, #32
 8005d6c:	40da      	lsrs	r2, r3
 8005d6e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8005d72:	4013      	ands	r3, r2
 8005d74:	f846 3c04 	str.w	r3, [r6, #-4]
 8005d78:	e7d2      	b.n	8005d20 <__hexnan+0xd4>
 8005d7a:	3f04      	subs	r7, #4
 8005d7c:	e7d0      	b.n	8005d20 <__hexnan+0xd4>
 8005d7e:	2004      	movs	r0, #4
 8005d80:	e7d5      	b.n	8005d2e <__hexnan+0xe2>

08005d82 <__ascii_mbtowc>:
 8005d82:	b082      	sub	sp, #8
 8005d84:	b901      	cbnz	r1, 8005d88 <__ascii_mbtowc+0x6>
 8005d86:	a901      	add	r1, sp, #4
 8005d88:	b142      	cbz	r2, 8005d9c <__ascii_mbtowc+0x1a>
 8005d8a:	b14b      	cbz	r3, 8005da0 <__ascii_mbtowc+0x1e>
 8005d8c:	7813      	ldrb	r3, [r2, #0]
 8005d8e:	600b      	str	r3, [r1, #0]
 8005d90:	7812      	ldrb	r2, [r2, #0]
 8005d92:	1e10      	subs	r0, r2, #0
 8005d94:	bf18      	it	ne
 8005d96:	2001      	movne	r0, #1
 8005d98:	b002      	add	sp, #8
 8005d9a:	4770      	bx	lr
 8005d9c:	4610      	mov	r0, r2
 8005d9e:	e7fb      	b.n	8005d98 <__ascii_mbtowc+0x16>
 8005da0:	f06f 0001 	mvn.w	r0, #1
 8005da4:	e7f8      	b.n	8005d98 <__ascii_mbtowc+0x16>
	...

08005da8 <_Balloc>:
 8005da8:	b570      	push	{r4, r5, r6, lr}
 8005daa:	69c6      	ldr	r6, [r0, #28]
 8005dac:	4604      	mov	r4, r0
 8005dae:	460d      	mov	r5, r1
 8005db0:	b976      	cbnz	r6, 8005dd0 <_Balloc+0x28>
 8005db2:	2010      	movs	r0, #16
 8005db4:	f7fe face 	bl	8004354 <malloc>
 8005db8:	4602      	mov	r2, r0
 8005dba:	61e0      	str	r0, [r4, #28]
 8005dbc:	b920      	cbnz	r0, 8005dc8 <_Balloc+0x20>
 8005dbe:	216b      	movs	r1, #107	@ 0x6b
 8005dc0:	4b17      	ldr	r3, [pc, #92]	@ (8005e20 <_Balloc+0x78>)
 8005dc2:	4818      	ldr	r0, [pc, #96]	@ (8005e24 <_Balloc+0x7c>)
 8005dc4:	f001 fbec 	bl	80075a0 <__assert_func>
 8005dc8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005dcc:	6006      	str	r6, [r0, #0]
 8005dce:	60c6      	str	r6, [r0, #12]
 8005dd0:	69e6      	ldr	r6, [r4, #28]
 8005dd2:	68f3      	ldr	r3, [r6, #12]
 8005dd4:	b183      	cbz	r3, 8005df8 <_Balloc+0x50>
 8005dd6:	69e3      	ldr	r3, [r4, #28]
 8005dd8:	68db      	ldr	r3, [r3, #12]
 8005dda:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005dde:	b9b8      	cbnz	r0, 8005e10 <_Balloc+0x68>
 8005de0:	2101      	movs	r1, #1
 8005de2:	fa01 f605 	lsl.w	r6, r1, r5
 8005de6:	1d72      	adds	r2, r6, #5
 8005de8:	4620      	mov	r0, r4
 8005dea:	0092      	lsls	r2, r2, #2
 8005dec:	f001 fbf6 	bl	80075dc <_calloc_r>
 8005df0:	b160      	cbz	r0, 8005e0c <_Balloc+0x64>
 8005df2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005df6:	e00e      	b.n	8005e16 <_Balloc+0x6e>
 8005df8:	2221      	movs	r2, #33	@ 0x21
 8005dfa:	2104      	movs	r1, #4
 8005dfc:	4620      	mov	r0, r4
 8005dfe:	f001 fbed 	bl	80075dc <_calloc_r>
 8005e02:	69e3      	ldr	r3, [r4, #28]
 8005e04:	60f0      	str	r0, [r6, #12]
 8005e06:	68db      	ldr	r3, [r3, #12]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d1e4      	bne.n	8005dd6 <_Balloc+0x2e>
 8005e0c:	2000      	movs	r0, #0
 8005e0e:	bd70      	pop	{r4, r5, r6, pc}
 8005e10:	6802      	ldr	r2, [r0, #0]
 8005e12:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005e16:	2300      	movs	r3, #0
 8005e18:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005e1c:	e7f7      	b.n	8005e0e <_Balloc+0x66>
 8005e1e:	bf00      	nop
 8005e20:	08007eea 	.word	0x08007eea
 8005e24:	08007f01 	.word	0x08007f01

08005e28 <_Bfree>:
 8005e28:	b570      	push	{r4, r5, r6, lr}
 8005e2a:	69c6      	ldr	r6, [r0, #28]
 8005e2c:	4605      	mov	r5, r0
 8005e2e:	460c      	mov	r4, r1
 8005e30:	b976      	cbnz	r6, 8005e50 <_Bfree+0x28>
 8005e32:	2010      	movs	r0, #16
 8005e34:	f7fe fa8e 	bl	8004354 <malloc>
 8005e38:	4602      	mov	r2, r0
 8005e3a:	61e8      	str	r0, [r5, #28]
 8005e3c:	b920      	cbnz	r0, 8005e48 <_Bfree+0x20>
 8005e3e:	218f      	movs	r1, #143	@ 0x8f
 8005e40:	4b08      	ldr	r3, [pc, #32]	@ (8005e64 <_Bfree+0x3c>)
 8005e42:	4809      	ldr	r0, [pc, #36]	@ (8005e68 <_Bfree+0x40>)
 8005e44:	f001 fbac 	bl	80075a0 <__assert_func>
 8005e48:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005e4c:	6006      	str	r6, [r0, #0]
 8005e4e:	60c6      	str	r6, [r0, #12]
 8005e50:	b13c      	cbz	r4, 8005e62 <_Bfree+0x3a>
 8005e52:	69eb      	ldr	r3, [r5, #28]
 8005e54:	6862      	ldr	r2, [r4, #4]
 8005e56:	68db      	ldr	r3, [r3, #12]
 8005e58:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005e5c:	6021      	str	r1, [r4, #0]
 8005e5e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005e62:	bd70      	pop	{r4, r5, r6, pc}
 8005e64:	08007eea 	.word	0x08007eea
 8005e68:	08007f01 	.word	0x08007f01

08005e6c <__multadd>:
 8005e6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e70:	4607      	mov	r7, r0
 8005e72:	460c      	mov	r4, r1
 8005e74:	461e      	mov	r6, r3
 8005e76:	2000      	movs	r0, #0
 8005e78:	690d      	ldr	r5, [r1, #16]
 8005e7a:	f101 0c14 	add.w	ip, r1, #20
 8005e7e:	f8dc 3000 	ldr.w	r3, [ip]
 8005e82:	3001      	adds	r0, #1
 8005e84:	b299      	uxth	r1, r3
 8005e86:	fb02 6101 	mla	r1, r2, r1, r6
 8005e8a:	0c1e      	lsrs	r6, r3, #16
 8005e8c:	0c0b      	lsrs	r3, r1, #16
 8005e8e:	fb02 3306 	mla	r3, r2, r6, r3
 8005e92:	b289      	uxth	r1, r1
 8005e94:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005e98:	4285      	cmp	r5, r0
 8005e9a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005e9e:	f84c 1b04 	str.w	r1, [ip], #4
 8005ea2:	dcec      	bgt.n	8005e7e <__multadd+0x12>
 8005ea4:	b30e      	cbz	r6, 8005eea <__multadd+0x7e>
 8005ea6:	68a3      	ldr	r3, [r4, #8]
 8005ea8:	42ab      	cmp	r3, r5
 8005eaa:	dc19      	bgt.n	8005ee0 <__multadd+0x74>
 8005eac:	6861      	ldr	r1, [r4, #4]
 8005eae:	4638      	mov	r0, r7
 8005eb0:	3101      	adds	r1, #1
 8005eb2:	f7ff ff79 	bl	8005da8 <_Balloc>
 8005eb6:	4680      	mov	r8, r0
 8005eb8:	b928      	cbnz	r0, 8005ec6 <__multadd+0x5a>
 8005eba:	4602      	mov	r2, r0
 8005ebc:	21ba      	movs	r1, #186	@ 0xba
 8005ebe:	4b0c      	ldr	r3, [pc, #48]	@ (8005ef0 <__multadd+0x84>)
 8005ec0:	480c      	ldr	r0, [pc, #48]	@ (8005ef4 <__multadd+0x88>)
 8005ec2:	f001 fb6d 	bl	80075a0 <__assert_func>
 8005ec6:	6922      	ldr	r2, [r4, #16]
 8005ec8:	f104 010c 	add.w	r1, r4, #12
 8005ecc:	3202      	adds	r2, #2
 8005ece:	0092      	lsls	r2, r2, #2
 8005ed0:	300c      	adds	r0, #12
 8005ed2:	f7ff fbc0 	bl	8005656 <memcpy>
 8005ed6:	4621      	mov	r1, r4
 8005ed8:	4638      	mov	r0, r7
 8005eda:	f7ff ffa5 	bl	8005e28 <_Bfree>
 8005ede:	4644      	mov	r4, r8
 8005ee0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005ee4:	3501      	adds	r5, #1
 8005ee6:	615e      	str	r6, [r3, #20]
 8005ee8:	6125      	str	r5, [r4, #16]
 8005eea:	4620      	mov	r0, r4
 8005eec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ef0:	08007e79 	.word	0x08007e79
 8005ef4:	08007f01 	.word	0x08007f01

08005ef8 <__s2b>:
 8005ef8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005efc:	4615      	mov	r5, r2
 8005efe:	2209      	movs	r2, #9
 8005f00:	461f      	mov	r7, r3
 8005f02:	3308      	adds	r3, #8
 8005f04:	460c      	mov	r4, r1
 8005f06:	fb93 f3f2 	sdiv	r3, r3, r2
 8005f0a:	4606      	mov	r6, r0
 8005f0c:	2201      	movs	r2, #1
 8005f0e:	2100      	movs	r1, #0
 8005f10:	429a      	cmp	r2, r3
 8005f12:	db09      	blt.n	8005f28 <__s2b+0x30>
 8005f14:	4630      	mov	r0, r6
 8005f16:	f7ff ff47 	bl	8005da8 <_Balloc>
 8005f1a:	b940      	cbnz	r0, 8005f2e <__s2b+0x36>
 8005f1c:	4602      	mov	r2, r0
 8005f1e:	21d3      	movs	r1, #211	@ 0xd3
 8005f20:	4b18      	ldr	r3, [pc, #96]	@ (8005f84 <__s2b+0x8c>)
 8005f22:	4819      	ldr	r0, [pc, #100]	@ (8005f88 <__s2b+0x90>)
 8005f24:	f001 fb3c 	bl	80075a0 <__assert_func>
 8005f28:	0052      	lsls	r2, r2, #1
 8005f2a:	3101      	adds	r1, #1
 8005f2c:	e7f0      	b.n	8005f10 <__s2b+0x18>
 8005f2e:	9b08      	ldr	r3, [sp, #32]
 8005f30:	2d09      	cmp	r5, #9
 8005f32:	6143      	str	r3, [r0, #20]
 8005f34:	f04f 0301 	mov.w	r3, #1
 8005f38:	6103      	str	r3, [r0, #16]
 8005f3a:	dd16      	ble.n	8005f6a <__s2b+0x72>
 8005f3c:	f104 0909 	add.w	r9, r4, #9
 8005f40:	46c8      	mov	r8, r9
 8005f42:	442c      	add	r4, r5
 8005f44:	f818 3b01 	ldrb.w	r3, [r8], #1
 8005f48:	4601      	mov	r1, r0
 8005f4a:	220a      	movs	r2, #10
 8005f4c:	4630      	mov	r0, r6
 8005f4e:	3b30      	subs	r3, #48	@ 0x30
 8005f50:	f7ff ff8c 	bl	8005e6c <__multadd>
 8005f54:	45a0      	cmp	r8, r4
 8005f56:	d1f5      	bne.n	8005f44 <__s2b+0x4c>
 8005f58:	f1a5 0408 	sub.w	r4, r5, #8
 8005f5c:	444c      	add	r4, r9
 8005f5e:	1b2d      	subs	r5, r5, r4
 8005f60:	1963      	adds	r3, r4, r5
 8005f62:	42bb      	cmp	r3, r7
 8005f64:	db04      	blt.n	8005f70 <__s2b+0x78>
 8005f66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f6a:	2509      	movs	r5, #9
 8005f6c:	340a      	adds	r4, #10
 8005f6e:	e7f6      	b.n	8005f5e <__s2b+0x66>
 8005f70:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005f74:	4601      	mov	r1, r0
 8005f76:	220a      	movs	r2, #10
 8005f78:	4630      	mov	r0, r6
 8005f7a:	3b30      	subs	r3, #48	@ 0x30
 8005f7c:	f7ff ff76 	bl	8005e6c <__multadd>
 8005f80:	e7ee      	b.n	8005f60 <__s2b+0x68>
 8005f82:	bf00      	nop
 8005f84:	08007e79 	.word	0x08007e79
 8005f88:	08007f01 	.word	0x08007f01

08005f8c <__hi0bits>:
 8005f8c:	4603      	mov	r3, r0
 8005f8e:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8005f92:	bf3a      	itte	cc
 8005f94:	0403      	lslcc	r3, r0, #16
 8005f96:	2010      	movcc	r0, #16
 8005f98:	2000      	movcs	r0, #0
 8005f9a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005f9e:	bf3c      	itt	cc
 8005fa0:	021b      	lslcc	r3, r3, #8
 8005fa2:	3008      	addcc	r0, #8
 8005fa4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005fa8:	bf3c      	itt	cc
 8005faa:	011b      	lslcc	r3, r3, #4
 8005fac:	3004      	addcc	r0, #4
 8005fae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fb2:	bf3c      	itt	cc
 8005fb4:	009b      	lslcc	r3, r3, #2
 8005fb6:	3002      	addcc	r0, #2
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	db05      	blt.n	8005fc8 <__hi0bits+0x3c>
 8005fbc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8005fc0:	f100 0001 	add.w	r0, r0, #1
 8005fc4:	bf08      	it	eq
 8005fc6:	2020      	moveq	r0, #32
 8005fc8:	4770      	bx	lr

08005fca <__lo0bits>:
 8005fca:	6803      	ldr	r3, [r0, #0]
 8005fcc:	4602      	mov	r2, r0
 8005fce:	f013 0007 	ands.w	r0, r3, #7
 8005fd2:	d00b      	beq.n	8005fec <__lo0bits+0x22>
 8005fd4:	07d9      	lsls	r1, r3, #31
 8005fd6:	d421      	bmi.n	800601c <__lo0bits+0x52>
 8005fd8:	0798      	lsls	r0, r3, #30
 8005fda:	bf49      	itett	mi
 8005fdc:	085b      	lsrmi	r3, r3, #1
 8005fde:	089b      	lsrpl	r3, r3, #2
 8005fe0:	2001      	movmi	r0, #1
 8005fe2:	6013      	strmi	r3, [r2, #0]
 8005fe4:	bf5c      	itt	pl
 8005fe6:	2002      	movpl	r0, #2
 8005fe8:	6013      	strpl	r3, [r2, #0]
 8005fea:	4770      	bx	lr
 8005fec:	b299      	uxth	r1, r3
 8005fee:	b909      	cbnz	r1, 8005ff4 <__lo0bits+0x2a>
 8005ff0:	2010      	movs	r0, #16
 8005ff2:	0c1b      	lsrs	r3, r3, #16
 8005ff4:	b2d9      	uxtb	r1, r3
 8005ff6:	b909      	cbnz	r1, 8005ffc <__lo0bits+0x32>
 8005ff8:	3008      	adds	r0, #8
 8005ffa:	0a1b      	lsrs	r3, r3, #8
 8005ffc:	0719      	lsls	r1, r3, #28
 8005ffe:	bf04      	itt	eq
 8006000:	091b      	lsreq	r3, r3, #4
 8006002:	3004      	addeq	r0, #4
 8006004:	0799      	lsls	r1, r3, #30
 8006006:	bf04      	itt	eq
 8006008:	089b      	lsreq	r3, r3, #2
 800600a:	3002      	addeq	r0, #2
 800600c:	07d9      	lsls	r1, r3, #31
 800600e:	d403      	bmi.n	8006018 <__lo0bits+0x4e>
 8006010:	085b      	lsrs	r3, r3, #1
 8006012:	f100 0001 	add.w	r0, r0, #1
 8006016:	d003      	beq.n	8006020 <__lo0bits+0x56>
 8006018:	6013      	str	r3, [r2, #0]
 800601a:	4770      	bx	lr
 800601c:	2000      	movs	r0, #0
 800601e:	4770      	bx	lr
 8006020:	2020      	movs	r0, #32
 8006022:	4770      	bx	lr

08006024 <__i2b>:
 8006024:	b510      	push	{r4, lr}
 8006026:	460c      	mov	r4, r1
 8006028:	2101      	movs	r1, #1
 800602a:	f7ff febd 	bl	8005da8 <_Balloc>
 800602e:	4602      	mov	r2, r0
 8006030:	b928      	cbnz	r0, 800603e <__i2b+0x1a>
 8006032:	f240 1145 	movw	r1, #325	@ 0x145
 8006036:	4b04      	ldr	r3, [pc, #16]	@ (8006048 <__i2b+0x24>)
 8006038:	4804      	ldr	r0, [pc, #16]	@ (800604c <__i2b+0x28>)
 800603a:	f001 fab1 	bl	80075a0 <__assert_func>
 800603e:	2301      	movs	r3, #1
 8006040:	6144      	str	r4, [r0, #20]
 8006042:	6103      	str	r3, [r0, #16]
 8006044:	bd10      	pop	{r4, pc}
 8006046:	bf00      	nop
 8006048:	08007e79 	.word	0x08007e79
 800604c:	08007f01 	.word	0x08007f01

08006050 <__multiply>:
 8006050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006054:	4614      	mov	r4, r2
 8006056:	690a      	ldr	r2, [r1, #16]
 8006058:	6923      	ldr	r3, [r4, #16]
 800605a:	460f      	mov	r7, r1
 800605c:	429a      	cmp	r2, r3
 800605e:	bfa2      	ittt	ge
 8006060:	4623      	movge	r3, r4
 8006062:	460c      	movge	r4, r1
 8006064:	461f      	movge	r7, r3
 8006066:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800606a:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800606e:	68a3      	ldr	r3, [r4, #8]
 8006070:	6861      	ldr	r1, [r4, #4]
 8006072:	eb0a 0609 	add.w	r6, sl, r9
 8006076:	42b3      	cmp	r3, r6
 8006078:	b085      	sub	sp, #20
 800607a:	bfb8      	it	lt
 800607c:	3101      	addlt	r1, #1
 800607e:	f7ff fe93 	bl	8005da8 <_Balloc>
 8006082:	b930      	cbnz	r0, 8006092 <__multiply+0x42>
 8006084:	4602      	mov	r2, r0
 8006086:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800608a:	4b43      	ldr	r3, [pc, #268]	@ (8006198 <__multiply+0x148>)
 800608c:	4843      	ldr	r0, [pc, #268]	@ (800619c <__multiply+0x14c>)
 800608e:	f001 fa87 	bl	80075a0 <__assert_func>
 8006092:	f100 0514 	add.w	r5, r0, #20
 8006096:	462b      	mov	r3, r5
 8006098:	2200      	movs	r2, #0
 800609a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800609e:	4543      	cmp	r3, r8
 80060a0:	d321      	bcc.n	80060e6 <__multiply+0x96>
 80060a2:	f107 0114 	add.w	r1, r7, #20
 80060a6:	f104 0214 	add.w	r2, r4, #20
 80060aa:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80060ae:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80060b2:	9302      	str	r3, [sp, #8]
 80060b4:	1b13      	subs	r3, r2, r4
 80060b6:	3b15      	subs	r3, #21
 80060b8:	f023 0303 	bic.w	r3, r3, #3
 80060bc:	3304      	adds	r3, #4
 80060be:	f104 0715 	add.w	r7, r4, #21
 80060c2:	42ba      	cmp	r2, r7
 80060c4:	bf38      	it	cc
 80060c6:	2304      	movcc	r3, #4
 80060c8:	9301      	str	r3, [sp, #4]
 80060ca:	9b02      	ldr	r3, [sp, #8]
 80060cc:	9103      	str	r1, [sp, #12]
 80060ce:	428b      	cmp	r3, r1
 80060d0:	d80c      	bhi.n	80060ec <__multiply+0x9c>
 80060d2:	2e00      	cmp	r6, #0
 80060d4:	dd03      	ble.n	80060de <__multiply+0x8e>
 80060d6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d05a      	beq.n	8006194 <__multiply+0x144>
 80060de:	6106      	str	r6, [r0, #16]
 80060e0:	b005      	add	sp, #20
 80060e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060e6:	f843 2b04 	str.w	r2, [r3], #4
 80060ea:	e7d8      	b.n	800609e <__multiply+0x4e>
 80060ec:	f8b1 a000 	ldrh.w	sl, [r1]
 80060f0:	f1ba 0f00 	cmp.w	sl, #0
 80060f4:	d023      	beq.n	800613e <__multiply+0xee>
 80060f6:	46a9      	mov	r9, r5
 80060f8:	f04f 0c00 	mov.w	ip, #0
 80060fc:	f104 0e14 	add.w	lr, r4, #20
 8006100:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006104:	f8d9 3000 	ldr.w	r3, [r9]
 8006108:	fa1f fb87 	uxth.w	fp, r7
 800610c:	b29b      	uxth	r3, r3
 800610e:	fb0a 330b 	mla	r3, sl, fp, r3
 8006112:	4463      	add	r3, ip
 8006114:	f8d9 c000 	ldr.w	ip, [r9]
 8006118:	0c3f      	lsrs	r7, r7, #16
 800611a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800611e:	fb0a c707 	mla	r7, sl, r7, ip
 8006122:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8006126:	b29b      	uxth	r3, r3
 8006128:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800612c:	4572      	cmp	r2, lr
 800612e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006132:	f849 3b04 	str.w	r3, [r9], #4
 8006136:	d8e3      	bhi.n	8006100 <__multiply+0xb0>
 8006138:	9b01      	ldr	r3, [sp, #4]
 800613a:	f845 c003 	str.w	ip, [r5, r3]
 800613e:	9b03      	ldr	r3, [sp, #12]
 8006140:	3104      	adds	r1, #4
 8006142:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006146:	f1b9 0f00 	cmp.w	r9, #0
 800614a:	d021      	beq.n	8006190 <__multiply+0x140>
 800614c:	46ae      	mov	lr, r5
 800614e:	f04f 0a00 	mov.w	sl, #0
 8006152:	682b      	ldr	r3, [r5, #0]
 8006154:	f104 0c14 	add.w	ip, r4, #20
 8006158:	f8bc b000 	ldrh.w	fp, [ip]
 800615c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8006160:	b29b      	uxth	r3, r3
 8006162:	fb09 770b 	mla	r7, r9, fp, r7
 8006166:	4457      	add	r7, sl
 8006168:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800616c:	f84e 3b04 	str.w	r3, [lr], #4
 8006170:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006174:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006178:	f8be 3000 	ldrh.w	r3, [lr]
 800617c:	4562      	cmp	r2, ip
 800617e:	fb09 330a 	mla	r3, r9, sl, r3
 8006182:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8006186:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800618a:	d8e5      	bhi.n	8006158 <__multiply+0x108>
 800618c:	9f01      	ldr	r7, [sp, #4]
 800618e:	51eb      	str	r3, [r5, r7]
 8006190:	3504      	adds	r5, #4
 8006192:	e79a      	b.n	80060ca <__multiply+0x7a>
 8006194:	3e01      	subs	r6, #1
 8006196:	e79c      	b.n	80060d2 <__multiply+0x82>
 8006198:	08007e79 	.word	0x08007e79
 800619c:	08007f01 	.word	0x08007f01

080061a0 <__pow5mult>:
 80061a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80061a4:	4615      	mov	r5, r2
 80061a6:	f012 0203 	ands.w	r2, r2, #3
 80061aa:	4607      	mov	r7, r0
 80061ac:	460e      	mov	r6, r1
 80061ae:	d007      	beq.n	80061c0 <__pow5mult+0x20>
 80061b0:	4c25      	ldr	r4, [pc, #148]	@ (8006248 <__pow5mult+0xa8>)
 80061b2:	3a01      	subs	r2, #1
 80061b4:	2300      	movs	r3, #0
 80061b6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80061ba:	f7ff fe57 	bl	8005e6c <__multadd>
 80061be:	4606      	mov	r6, r0
 80061c0:	10ad      	asrs	r5, r5, #2
 80061c2:	d03d      	beq.n	8006240 <__pow5mult+0xa0>
 80061c4:	69fc      	ldr	r4, [r7, #28]
 80061c6:	b97c      	cbnz	r4, 80061e8 <__pow5mult+0x48>
 80061c8:	2010      	movs	r0, #16
 80061ca:	f7fe f8c3 	bl	8004354 <malloc>
 80061ce:	4602      	mov	r2, r0
 80061d0:	61f8      	str	r0, [r7, #28]
 80061d2:	b928      	cbnz	r0, 80061e0 <__pow5mult+0x40>
 80061d4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80061d8:	4b1c      	ldr	r3, [pc, #112]	@ (800624c <__pow5mult+0xac>)
 80061da:	481d      	ldr	r0, [pc, #116]	@ (8006250 <__pow5mult+0xb0>)
 80061dc:	f001 f9e0 	bl	80075a0 <__assert_func>
 80061e0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80061e4:	6004      	str	r4, [r0, #0]
 80061e6:	60c4      	str	r4, [r0, #12]
 80061e8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80061ec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80061f0:	b94c      	cbnz	r4, 8006206 <__pow5mult+0x66>
 80061f2:	f240 2171 	movw	r1, #625	@ 0x271
 80061f6:	4638      	mov	r0, r7
 80061f8:	f7ff ff14 	bl	8006024 <__i2b>
 80061fc:	2300      	movs	r3, #0
 80061fe:	4604      	mov	r4, r0
 8006200:	f8c8 0008 	str.w	r0, [r8, #8]
 8006204:	6003      	str	r3, [r0, #0]
 8006206:	f04f 0900 	mov.w	r9, #0
 800620a:	07eb      	lsls	r3, r5, #31
 800620c:	d50a      	bpl.n	8006224 <__pow5mult+0x84>
 800620e:	4631      	mov	r1, r6
 8006210:	4622      	mov	r2, r4
 8006212:	4638      	mov	r0, r7
 8006214:	f7ff ff1c 	bl	8006050 <__multiply>
 8006218:	4680      	mov	r8, r0
 800621a:	4631      	mov	r1, r6
 800621c:	4638      	mov	r0, r7
 800621e:	f7ff fe03 	bl	8005e28 <_Bfree>
 8006222:	4646      	mov	r6, r8
 8006224:	106d      	asrs	r5, r5, #1
 8006226:	d00b      	beq.n	8006240 <__pow5mult+0xa0>
 8006228:	6820      	ldr	r0, [r4, #0]
 800622a:	b938      	cbnz	r0, 800623c <__pow5mult+0x9c>
 800622c:	4622      	mov	r2, r4
 800622e:	4621      	mov	r1, r4
 8006230:	4638      	mov	r0, r7
 8006232:	f7ff ff0d 	bl	8006050 <__multiply>
 8006236:	6020      	str	r0, [r4, #0]
 8006238:	f8c0 9000 	str.w	r9, [r0]
 800623c:	4604      	mov	r4, r0
 800623e:	e7e4      	b.n	800620a <__pow5mult+0x6a>
 8006240:	4630      	mov	r0, r6
 8006242:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006246:	bf00      	nop
 8006248:	08007f5c 	.word	0x08007f5c
 800624c:	08007eea 	.word	0x08007eea
 8006250:	08007f01 	.word	0x08007f01

08006254 <__lshift>:
 8006254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006258:	460c      	mov	r4, r1
 800625a:	4607      	mov	r7, r0
 800625c:	4691      	mov	r9, r2
 800625e:	6923      	ldr	r3, [r4, #16]
 8006260:	6849      	ldr	r1, [r1, #4]
 8006262:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006266:	68a3      	ldr	r3, [r4, #8]
 8006268:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800626c:	f108 0601 	add.w	r6, r8, #1
 8006270:	42b3      	cmp	r3, r6
 8006272:	db0b      	blt.n	800628c <__lshift+0x38>
 8006274:	4638      	mov	r0, r7
 8006276:	f7ff fd97 	bl	8005da8 <_Balloc>
 800627a:	4605      	mov	r5, r0
 800627c:	b948      	cbnz	r0, 8006292 <__lshift+0x3e>
 800627e:	4602      	mov	r2, r0
 8006280:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006284:	4b27      	ldr	r3, [pc, #156]	@ (8006324 <__lshift+0xd0>)
 8006286:	4828      	ldr	r0, [pc, #160]	@ (8006328 <__lshift+0xd4>)
 8006288:	f001 f98a 	bl	80075a0 <__assert_func>
 800628c:	3101      	adds	r1, #1
 800628e:	005b      	lsls	r3, r3, #1
 8006290:	e7ee      	b.n	8006270 <__lshift+0x1c>
 8006292:	2300      	movs	r3, #0
 8006294:	f100 0114 	add.w	r1, r0, #20
 8006298:	f100 0210 	add.w	r2, r0, #16
 800629c:	4618      	mov	r0, r3
 800629e:	4553      	cmp	r3, sl
 80062a0:	db33      	blt.n	800630a <__lshift+0xb6>
 80062a2:	6920      	ldr	r0, [r4, #16]
 80062a4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80062a8:	f104 0314 	add.w	r3, r4, #20
 80062ac:	f019 091f 	ands.w	r9, r9, #31
 80062b0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80062b4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80062b8:	d02b      	beq.n	8006312 <__lshift+0xbe>
 80062ba:	468a      	mov	sl, r1
 80062bc:	2200      	movs	r2, #0
 80062be:	f1c9 0e20 	rsb	lr, r9, #32
 80062c2:	6818      	ldr	r0, [r3, #0]
 80062c4:	fa00 f009 	lsl.w	r0, r0, r9
 80062c8:	4310      	orrs	r0, r2
 80062ca:	f84a 0b04 	str.w	r0, [sl], #4
 80062ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80062d2:	459c      	cmp	ip, r3
 80062d4:	fa22 f20e 	lsr.w	r2, r2, lr
 80062d8:	d8f3      	bhi.n	80062c2 <__lshift+0x6e>
 80062da:	ebac 0304 	sub.w	r3, ip, r4
 80062de:	3b15      	subs	r3, #21
 80062e0:	f023 0303 	bic.w	r3, r3, #3
 80062e4:	3304      	adds	r3, #4
 80062e6:	f104 0015 	add.w	r0, r4, #21
 80062ea:	4584      	cmp	ip, r0
 80062ec:	bf38      	it	cc
 80062ee:	2304      	movcc	r3, #4
 80062f0:	50ca      	str	r2, [r1, r3]
 80062f2:	b10a      	cbz	r2, 80062f8 <__lshift+0xa4>
 80062f4:	f108 0602 	add.w	r6, r8, #2
 80062f8:	3e01      	subs	r6, #1
 80062fa:	4638      	mov	r0, r7
 80062fc:	4621      	mov	r1, r4
 80062fe:	612e      	str	r6, [r5, #16]
 8006300:	f7ff fd92 	bl	8005e28 <_Bfree>
 8006304:	4628      	mov	r0, r5
 8006306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800630a:	f842 0f04 	str.w	r0, [r2, #4]!
 800630e:	3301      	adds	r3, #1
 8006310:	e7c5      	b.n	800629e <__lshift+0x4a>
 8006312:	3904      	subs	r1, #4
 8006314:	f853 2b04 	ldr.w	r2, [r3], #4
 8006318:	459c      	cmp	ip, r3
 800631a:	f841 2f04 	str.w	r2, [r1, #4]!
 800631e:	d8f9      	bhi.n	8006314 <__lshift+0xc0>
 8006320:	e7ea      	b.n	80062f8 <__lshift+0xa4>
 8006322:	bf00      	nop
 8006324:	08007e79 	.word	0x08007e79
 8006328:	08007f01 	.word	0x08007f01

0800632c <__mcmp>:
 800632c:	4603      	mov	r3, r0
 800632e:	690a      	ldr	r2, [r1, #16]
 8006330:	6900      	ldr	r0, [r0, #16]
 8006332:	b530      	push	{r4, r5, lr}
 8006334:	1a80      	subs	r0, r0, r2
 8006336:	d10e      	bne.n	8006356 <__mcmp+0x2a>
 8006338:	3314      	adds	r3, #20
 800633a:	3114      	adds	r1, #20
 800633c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006340:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006344:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006348:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800634c:	4295      	cmp	r5, r2
 800634e:	d003      	beq.n	8006358 <__mcmp+0x2c>
 8006350:	d205      	bcs.n	800635e <__mcmp+0x32>
 8006352:	f04f 30ff 	mov.w	r0, #4294967295
 8006356:	bd30      	pop	{r4, r5, pc}
 8006358:	42a3      	cmp	r3, r4
 800635a:	d3f3      	bcc.n	8006344 <__mcmp+0x18>
 800635c:	e7fb      	b.n	8006356 <__mcmp+0x2a>
 800635e:	2001      	movs	r0, #1
 8006360:	e7f9      	b.n	8006356 <__mcmp+0x2a>
	...

08006364 <__mdiff>:
 8006364:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006368:	4689      	mov	r9, r1
 800636a:	4606      	mov	r6, r0
 800636c:	4611      	mov	r1, r2
 800636e:	4648      	mov	r0, r9
 8006370:	4614      	mov	r4, r2
 8006372:	f7ff ffdb 	bl	800632c <__mcmp>
 8006376:	1e05      	subs	r5, r0, #0
 8006378:	d112      	bne.n	80063a0 <__mdiff+0x3c>
 800637a:	4629      	mov	r1, r5
 800637c:	4630      	mov	r0, r6
 800637e:	f7ff fd13 	bl	8005da8 <_Balloc>
 8006382:	4602      	mov	r2, r0
 8006384:	b928      	cbnz	r0, 8006392 <__mdiff+0x2e>
 8006386:	f240 2137 	movw	r1, #567	@ 0x237
 800638a:	4b3e      	ldr	r3, [pc, #248]	@ (8006484 <__mdiff+0x120>)
 800638c:	483e      	ldr	r0, [pc, #248]	@ (8006488 <__mdiff+0x124>)
 800638e:	f001 f907 	bl	80075a0 <__assert_func>
 8006392:	2301      	movs	r3, #1
 8006394:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006398:	4610      	mov	r0, r2
 800639a:	b003      	add	sp, #12
 800639c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063a0:	bfbc      	itt	lt
 80063a2:	464b      	movlt	r3, r9
 80063a4:	46a1      	movlt	r9, r4
 80063a6:	4630      	mov	r0, r6
 80063a8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80063ac:	bfba      	itte	lt
 80063ae:	461c      	movlt	r4, r3
 80063b0:	2501      	movlt	r5, #1
 80063b2:	2500      	movge	r5, #0
 80063b4:	f7ff fcf8 	bl	8005da8 <_Balloc>
 80063b8:	4602      	mov	r2, r0
 80063ba:	b918      	cbnz	r0, 80063c4 <__mdiff+0x60>
 80063bc:	f240 2145 	movw	r1, #581	@ 0x245
 80063c0:	4b30      	ldr	r3, [pc, #192]	@ (8006484 <__mdiff+0x120>)
 80063c2:	e7e3      	b.n	800638c <__mdiff+0x28>
 80063c4:	f100 0b14 	add.w	fp, r0, #20
 80063c8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80063cc:	f109 0310 	add.w	r3, r9, #16
 80063d0:	60c5      	str	r5, [r0, #12]
 80063d2:	f04f 0c00 	mov.w	ip, #0
 80063d6:	f109 0514 	add.w	r5, r9, #20
 80063da:	46d9      	mov	r9, fp
 80063dc:	6926      	ldr	r6, [r4, #16]
 80063de:	f104 0e14 	add.w	lr, r4, #20
 80063e2:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80063e6:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80063ea:	9301      	str	r3, [sp, #4]
 80063ec:	9b01      	ldr	r3, [sp, #4]
 80063ee:	f85e 0b04 	ldr.w	r0, [lr], #4
 80063f2:	f853 af04 	ldr.w	sl, [r3, #4]!
 80063f6:	b281      	uxth	r1, r0
 80063f8:	9301      	str	r3, [sp, #4]
 80063fa:	fa1f f38a 	uxth.w	r3, sl
 80063fe:	1a5b      	subs	r3, r3, r1
 8006400:	0c00      	lsrs	r0, r0, #16
 8006402:	4463      	add	r3, ip
 8006404:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006408:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800640c:	b29b      	uxth	r3, r3
 800640e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006412:	4576      	cmp	r6, lr
 8006414:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006418:	f849 3b04 	str.w	r3, [r9], #4
 800641c:	d8e6      	bhi.n	80063ec <__mdiff+0x88>
 800641e:	1b33      	subs	r3, r6, r4
 8006420:	3b15      	subs	r3, #21
 8006422:	f023 0303 	bic.w	r3, r3, #3
 8006426:	3415      	adds	r4, #21
 8006428:	3304      	adds	r3, #4
 800642a:	42a6      	cmp	r6, r4
 800642c:	bf38      	it	cc
 800642e:	2304      	movcc	r3, #4
 8006430:	441d      	add	r5, r3
 8006432:	445b      	add	r3, fp
 8006434:	461e      	mov	r6, r3
 8006436:	462c      	mov	r4, r5
 8006438:	4544      	cmp	r4, r8
 800643a:	d30e      	bcc.n	800645a <__mdiff+0xf6>
 800643c:	f108 0103 	add.w	r1, r8, #3
 8006440:	1b49      	subs	r1, r1, r5
 8006442:	f021 0103 	bic.w	r1, r1, #3
 8006446:	3d03      	subs	r5, #3
 8006448:	45a8      	cmp	r8, r5
 800644a:	bf38      	it	cc
 800644c:	2100      	movcc	r1, #0
 800644e:	440b      	add	r3, r1
 8006450:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006454:	b199      	cbz	r1, 800647e <__mdiff+0x11a>
 8006456:	6117      	str	r7, [r2, #16]
 8006458:	e79e      	b.n	8006398 <__mdiff+0x34>
 800645a:	46e6      	mov	lr, ip
 800645c:	f854 1b04 	ldr.w	r1, [r4], #4
 8006460:	fa1f fc81 	uxth.w	ip, r1
 8006464:	44f4      	add	ip, lr
 8006466:	0c08      	lsrs	r0, r1, #16
 8006468:	4471      	add	r1, lr
 800646a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800646e:	b289      	uxth	r1, r1
 8006470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006474:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006478:	f846 1b04 	str.w	r1, [r6], #4
 800647c:	e7dc      	b.n	8006438 <__mdiff+0xd4>
 800647e:	3f01      	subs	r7, #1
 8006480:	e7e6      	b.n	8006450 <__mdiff+0xec>
 8006482:	bf00      	nop
 8006484:	08007e79 	.word	0x08007e79
 8006488:	08007f01 	.word	0x08007f01

0800648c <__ulp>:
 800648c:	4b0e      	ldr	r3, [pc, #56]	@ (80064c8 <__ulp+0x3c>)
 800648e:	400b      	ands	r3, r1
 8006490:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8006494:	2b00      	cmp	r3, #0
 8006496:	dc08      	bgt.n	80064aa <__ulp+0x1e>
 8006498:	425b      	negs	r3, r3
 800649a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800649e:	ea4f 5223 	mov.w	r2, r3, asr #20
 80064a2:	da04      	bge.n	80064ae <__ulp+0x22>
 80064a4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 80064a8:	4113      	asrs	r3, r2
 80064aa:	2200      	movs	r2, #0
 80064ac:	e008      	b.n	80064c0 <__ulp+0x34>
 80064ae:	f1a2 0314 	sub.w	r3, r2, #20
 80064b2:	2b1e      	cmp	r3, #30
 80064b4:	bfd6      	itet	le
 80064b6:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 80064ba:	2201      	movgt	r2, #1
 80064bc:	40da      	lsrle	r2, r3
 80064be:	2300      	movs	r3, #0
 80064c0:	4619      	mov	r1, r3
 80064c2:	4610      	mov	r0, r2
 80064c4:	4770      	bx	lr
 80064c6:	bf00      	nop
 80064c8:	7ff00000 	.word	0x7ff00000

080064cc <__b2d>:
 80064cc:	6902      	ldr	r2, [r0, #16]
 80064ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064d0:	f100 0614 	add.w	r6, r0, #20
 80064d4:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 80064d8:	f852 4c04 	ldr.w	r4, [r2, #-4]
 80064dc:	4f1e      	ldr	r7, [pc, #120]	@ (8006558 <__b2d+0x8c>)
 80064de:	4620      	mov	r0, r4
 80064e0:	f7ff fd54 	bl	8005f8c <__hi0bits>
 80064e4:	4603      	mov	r3, r0
 80064e6:	f1c0 0020 	rsb	r0, r0, #32
 80064ea:	2b0a      	cmp	r3, #10
 80064ec:	f1a2 0504 	sub.w	r5, r2, #4
 80064f0:	6008      	str	r0, [r1, #0]
 80064f2:	dc12      	bgt.n	800651a <__b2d+0x4e>
 80064f4:	42ae      	cmp	r6, r5
 80064f6:	bf2c      	ite	cs
 80064f8:	2200      	movcs	r2, #0
 80064fa:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 80064fe:	f1c3 0c0b 	rsb	ip, r3, #11
 8006502:	3315      	adds	r3, #21
 8006504:	fa24 fe0c 	lsr.w	lr, r4, ip
 8006508:	fa04 f303 	lsl.w	r3, r4, r3
 800650c:	fa22 f20c 	lsr.w	r2, r2, ip
 8006510:	ea4e 0107 	orr.w	r1, lr, r7
 8006514:	431a      	orrs	r2, r3
 8006516:	4610      	mov	r0, r2
 8006518:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800651a:	42ae      	cmp	r6, r5
 800651c:	bf36      	itet	cc
 800651e:	f1a2 0508 	subcc.w	r5, r2, #8
 8006522:	2200      	movcs	r2, #0
 8006524:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8006528:	3b0b      	subs	r3, #11
 800652a:	d012      	beq.n	8006552 <__b2d+0x86>
 800652c:	f1c3 0720 	rsb	r7, r3, #32
 8006530:	fa22 f107 	lsr.w	r1, r2, r7
 8006534:	409c      	lsls	r4, r3
 8006536:	430c      	orrs	r4, r1
 8006538:	42b5      	cmp	r5, r6
 800653a:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 800653e:	bf94      	ite	ls
 8006540:	2400      	movls	r4, #0
 8006542:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 8006546:	409a      	lsls	r2, r3
 8006548:	40fc      	lsrs	r4, r7
 800654a:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800654e:	4322      	orrs	r2, r4
 8006550:	e7e1      	b.n	8006516 <__b2d+0x4a>
 8006552:	ea44 0107 	orr.w	r1, r4, r7
 8006556:	e7de      	b.n	8006516 <__b2d+0x4a>
 8006558:	3ff00000 	.word	0x3ff00000

0800655c <__d2b>:
 800655c:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8006560:	2101      	movs	r1, #1
 8006562:	4690      	mov	r8, r2
 8006564:	4699      	mov	r9, r3
 8006566:	9e08      	ldr	r6, [sp, #32]
 8006568:	f7ff fc1e 	bl	8005da8 <_Balloc>
 800656c:	4604      	mov	r4, r0
 800656e:	b930      	cbnz	r0, 800657e <__d2b+0x22>
 8006570:	4602      	mov	r2, r0
 8006572:	f240 310f 	movw	r1, #783	@ 0x30f
 8006576:	4b23      	ldr	r3, [pc, #140]	@ (8006604 <__d2b+0xa8>)
 8006578:	4823      	ldr	r0, [pc, #140]	@ (8006608 <__d2b+0xac>)
 800657a:	f001 f811 	bl	80075a0 <__assert_func>
 800657e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006582:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006586:	b10d      	cbz	r5, 800658c <__d2b+0x30>
 8006588:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800658c:	9301      	str	r3, [sp, #4]
 800658e:	f1b8 0300 	subs.w	r3, r8, #0
 8006592:	d024      	beq.n	80065de <__d2b+0x82>
 8006594:	4668      	mov	r0, sp
 8006596:	9300      	str	r3, [sp, #0]
 8006598:	f7ff fd17 	bl	8005fca <__lo0bits>
 800659c:	e9dd 1200 	ldrd	r1, r2, [sp]
 80065a0:	b1d8      	cbz	r0, 80065da <__d2b+0x7e>
 80065a2:	f1c0 0320 	rsb	r3, r0, #32
 80065a6:	fa02 f303 	lsl.w	r3, r2, r3
 80065aa:	430b      	orrs	r3, r1
 80065ac:	40c2      	lsrs	r2, r0
 80065ae:	6163      	str	r3, [r4, #20]
 80065b0:	9201      	str	r2, [sp, #4]
 80065b2:	9b01      	ldr	r3, [sp, #4]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	bf0c      	ite	eq
 80065b8:	2201      	moveq	r2, #1
 80065ba:	2202      	movne	r2, #2
 80065bc:	61a3      	str	r3, [r4, #24]
 80065be:	6122      	str	r2, [r4, #16]
 80065c0:	b1ad      	cbz	r5, 80065ee <__d2b+0x92>
 80065c2:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80065c6:	4405      	add	r5, r0
 80065c8:	6035      	str	r5, [r6, #0]
 80065ca:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80065ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80065d0:	6018      	str	r0, [r3, #0]
 80065d2:	4620      	mov	r0, r4
 80065d4:	b002      	add	sp, #8
 80065d6:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 80065da:	6161      	str	r1, [r4, #20]
 80065dc:	e7e9      	b.n	80065b2 <__d2b+0x56>
 80065de:	a801      	add	r0, sp, #4
 80065e0:	f7ff fcf3 	bl	8005fca <__lo0bits>
 80065e4:	9b01      	ldr	r3, [sp, #4]
 80065e6:	2201      	movs	r2, #1
 80065e8:	6163      	str	r3, [r4, #20]
 80065ea:	3020      	adds	r0, #32
 80065ec:	e7e7      	b.n	80065be <__d2b+0x62>
 80065ee:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80065f2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80065f6:	6030      	str	r0, [r6, #0]
 80065f8:	6918      	ldr	r0, [r3, #16]
 80065fa:	f7ff fcc7 	bl	8005f8c <__hi0bits>
 80065fe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006602:	e7e4      	b.n	80065ce <__d2b+0x72>
 8006604:	08007e79 	.word	0x08007e79
 8006608:	08007f01 	.word	0x08007f01

0800660c <__ratio>:
 800660c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006610:	b085      	sub	sp, #20
 8006612:	e9cd 1000 	strd	r1, r0, [sp]
 8006616:	a902      	add	r1, sp, #8
 8006618:	f7ff ff58 	bl	80064cc <__b2d>
 800661c:	468b      	mov	fp, r1
 800661e:	4606      	mov	r6, r0
 8006620:	460f      	mov	r7, r1
 8006622:	9800      	ldr	r0, [sp, #0]
 8006624:	a903      	add	r1, sp, #12
 8006626:	f7ff ff51 	bl	80064cc <__b2d>
 800662a:	460d      	mov	r5, r1
 800662c:	9b01      	ldr	r3, [sp, #4]
 800662e:	4689      	mov	r9, r1
 8006630:	6919      	ldr	r1, [r3, #16]
 8006632:	9b00      	ldr	r3, [sp, #0]
 8006634:	4604      	mov	r4, r0
 8006636:	691b      	ldr	r3, [r3, #16]
 8006638:	4630      	mov	r0, r6
 800663a:	1ac9      	subs	r1, r1, r3
 800663c:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8006640:	1a9b      	subs	r3, r3, r2
 8006642:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8006646:	2b00      	cmp	r3, #0
 8006648:	bfcd      	iteet	gt
 800664a:	463a      	movgt	r2, r7
 800664c:	462a      	movle	r2, r5
 800664e:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8006652:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8006656:	bfd8      	it	le
 8006658:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800665c:	464b      	mov	r3, r9
 800665e:	4622      	mov	r2, r4
 8006660:	4659      	mov	r1, fp
 8006662:	f7fa f87d 	bl	8000760 <__aeabi_ddiv>
 8006666:	b005      	add	sp, #20
 8006668:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800666c <__copybits>:
 800666c:	3901      	subs	r1, #1
 800666e:	b570      	push	{r4, r5, r6, lr}
 8006670:	1149      	asrs	r1, r1, #5
 8006672:	6914      	ldr	r4, [r2, #16]
 8006674:	3101      	adds	r1, #1
 8006676:	f102 0314 	add.w	r3, r2, #20
 800667a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800667e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006682:	1f05      	subs	r5, r0, #4
 8006684:	42a3      	cmp	r3, r4
 8006686:	d30c      	bcc.n	80066a2 <__copybits+0x36>
 8006688:	1aa3      	subs	r3, r4, r2
 800668a:	3b11      	subs	r3, #17
 800668c:	f023 0303 	bic.w	r3, r3, #3
 8006690:	3211      	adds	r2, #17
 8006692:	42a2      	cmp	r2, r4
 8006694:	bf88      	it	hi
 8006696:	2300      	movhi	r3, #0
 8006698:	4418      	add	r0, r3
 800669a:	2300      	movs	r3, #0
 800669c:	4288      	cmp	r0, r1
 800669e:	d305      	bcc.n	80066ac <__copybits+0x40>
 80066a0:	bd70      	pop	{r4, r5, r6, pc}
 80066a2:	f853 6b04 	ldr.w	r6, [r3], #4
 80066a6:	f845 6f04 	str.w	r6, [r5, #4]!
 80066aa:	e7eb      	b.n	8006684 <__copybits+0x18>
 80066ac:	f840 3b04 	str.w	r3, [r0], #4
 80066b0:	e7f4      	b.n	800669c <__copybits+0x30>

080066b2 <__any_on>:
 80066b2:	f100 0214 	add.w	r2, r0, #20
 80066b6:	6900      	ldr	r0, [r0, #16]
 80066b8:	114b      	asrs	r3, r1, #5
 80066ba:	4298      	cmp	r0, r3
 80066bc:	b510      	push	{r4, lr}
 80066be:	db11      	blt.n	80066e4 <__any_on+0x32>
 80066c0:	dd0a      	ble.n	80066d8 <__any_on+0x26>
 80066c2:	f011 011f 	ands.w	r1, r1, #31
 80066c6:	d007      	beq.n	80066d8 <__any_on+0x26>
 80066c8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80066cc:	fa24 f001 	lsr.w	r0, r4, r1
 80066d0:	fa00 f101 	lsl.w	r1, r0, r1
 80066d4:	428c      	cmp	r4, r1
 80066d6:	d10b      	bne.n	80066f0 <__any_on+0x3e>
 80066d8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80066dc:	4293      	cmp	r3, r2
 80066de:	d803      	bhi.n	80066e8 <__any_on+0x36>
 80066e0:	2000      	movs	r0, #0
 80066e2:	bd10      	pop	{r4, pc}
 80066e4:	4603      	mov	r3, r0
 80066e6:	e7f7      	b.n	80066d8 <__any_on+0x26>
 80066e8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80066ec:	2900      	cmp	r1, #0
 80066ee:	d0f5      	beq.n	80066dc <__any_on+0x2a>
 80066f0:	2001      	movs	r0, #1
 80066f2:	e7f6      	b.n	80066e2 <__any_on+0x30>

080066f4 <_malloc_usable_size_r>:
 80066f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80066f8:	1f18      	subs	r0, r3, #4
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	bfbc      	itt	lt
 80066fe:	580b      	ldrlt	r3, [r1, r0]
 8006700:	18c0      	addlt	r0, r0, r3
 8006702:	4770      	bx	lr

08006704 <__ascii_wctomb>:
 8006704:	4603      	mov	r3, r0
 8006706:	4608      	mov	r0, r1
 8006708:	b141      	cbz	r1, 800671c <__ascii_wctomb+0x18>
 800670a:	2aff      	cmp	r2, #255	@ 0xff
 800670c:	d904      	bls.n	8006718 <__ascii_wctomb+0x14>
 800670e:	228a      	movs	r2, #138	@ 0x8a
 8006710:	f04f 30ff 	mov.w	r0, #4294967295
 8006714:	601a      	str	r2, [r3, #0]
 8006716:	4770      	bx	lr
 8006718:	2001      	movs	r0, #1
 800671a:	700a      	strb	r2, [r1, #0]
 800671c:	4770      	bx	lr

0800671e <__ssputs_r>:
 800671e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006722:	461f      	mov	r7, r3
 8006724:	688e      	ldr	r6, [r1, #8]
 8006726:	4682      	mov	sl, r0
 8006728:	42be      	cmp	r6, r7
 800672a:	460c      	mov	r4, r1
 800672c:	4690      	mov	r8, r2
 800672e:	680b      	ldr	r3, [r1, #0]
 8006730:	d82d      	bhi.n	800678e <__ssputs_r+0x70>
 8006732:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006736:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800673a:	d026      	beq.n	800678a <__ssputs_r+0x6c>
 800673c:	6965      	ldr	r5, [r4, #20]
 800673e:	6909      	ldr	r1, [r1, #16]
 8006740:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006744:	eba3 0901 	sub.w	r9, r3, r1
 8006748:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800674c:	1c7b      	adds	r3, r7, #1
 800674e:	444b      	add	r3, r9
 8006750:	106d      	asrs	r5, r5, #1
 8006752:	429d      	cmp	r5, r3
 8006754:	bf38      	it	cc
 8006756:	461d      	movcc	r5, r3
 8006758:	0553      	lsls	r3, r2, #21
 800675a:	d527      	bpl.n	80067ac <__ssputs_r+0x8e>
 800675c:	4629      	mov	r1, r5
 800675e:	f7fd fe2b 	bl	80043b8 <_malloc_r>
 8006762:	4606      	mov	r6, r0
 8006764:	b360      	cbz	r0, 80067c0 <__ssputs_r+0xa2>
 8006766:	464a      	mov	r2, r9
 8006768:	6921      	ldr	r1, [r4, #16]
 800676a:	f7fe ff74 	bl	8005656 <memcpy>
 800676e:	89a3      	ldrh	r3, [r4, #12]
 8006770:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006774:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006778:	81a3      	strh	r3, [r4, #12]
 800677a:	6126      	str	r6, [r4, #16]
 800677c:	444e      	add	r6, r9
 800677e:	6026      	str	r6, [r4, #0]
 8006780:	463e      	mov	r6, r7
 8006782:	6165      	str	r5, [r4, #20]
 8006784:	eba5 0509 	sub.w	r5, r5, r9
 8006788:	60a5      	str	r5, [r4, #8]
 800678a:	42be      	cmp	r6, r7
 800678c:	d900      	bls.n	8006790 <__ssputs_r+0x72>
 800678e:	463e      	mov	r6, r7
 8006790:	4632      	mov	r2, r6
 8006792:	4641      	mov	r1, r8
 8006794:	6820      	ldr	r0, [r4, #0]
 8006796:	f000 feda 	bl	800754e <memmove>
 800679a:	2000      	movs	r0, #0
 800679c:	68a3      	ldr	r3, [r4, #8]
 800679e:	1b9b      	subs	r3, r3, r6
 80067a0:	60a3      	str	r3, [r4, #8]
 80067a2:	6823      	ldr	r3, [r4, #0]
 80067a4:	4433      	add	r3, r6
 80067a6:	6023      	str	r3, [r4, #0]
 80067a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067ac:	462a      	mov	r2, r5
 80067ae:	f7fd fe97 	bl	80044e0 <_realloc_r>
 80067b2:	4606      	mov	r6, r0
 80067b4:	2800      	cmp	r0, #0
 80067b6:	d1e0      	bne.n	800677a <__ssputs_r+0x5c>
 80067b8:	4650      	mov	r0, sl
 80067ba:	6921      	ldr	r1, [r4, #16]
 80067bc:	f7fe ff60 	bl	8005680 <_free_r>
 80067c0:	230c      	movs	r3, #12
 80067c2:	f8ca 3000 	str.w	r3, [sl]
 80067c6:	89a3      	ldrh	r3, [r4, #12]
 80067c8:	f04f 30ff 	mov.w	r0, #4294967295
 80067cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80067d0:	81a3      	strh	r3, [r4, #12]
 80067d2:	e7e9      	b.n	80067a8 <__ssputs_r+0x8a>

080067d4 <_svfiprintf_r>:
 80067d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067d8:	4698      	mov	r8, r3
 80067da:	898b      	ldrh	r3, [r1, #12]
 80067dc:	4607      	mov	r7, r0
 80067de:	061b      	lsls	r3, r3, #24
 80067e0:	460d      	mov	r5, r1
 80067e2:	4614      	mov	r4, r2
 80067e4:	b09d      	sub	sp, #116	@ 0x74
 80067e6:	d510      	bpl.n	800680a <_svfiprintf_r+0x36>
 80067e8:	690b      	ldr	r3, [r1, #16]
 80067ea:	b973      	cbnz	r3, 800680a <_svfiprintf_r+0x36>
 80067ec:	2140      	movs	r1, #64	@ 0x40
 80067ee:	f7fd fde3 	bl	80043b8 <_malloc_r>
 80067f2:	6028      	str	r0, [r5, #0]
 80067f4:	6128      	str	r0, [r5, #16]
 80067f6:	b930      	cbnz	r0, 8006806 <_svfiprintf_r+0x32>
 80067f8:	230c      	movs	r3, #12
 80067fa:	603b      	str	r3, [r7, #0]
 80067fc:	f04f 30ff 	mov.w	r0, #4294967295
 8006800:	b01d      	add	sp, #116	@ 0x74
 8006802:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006806:	2340      	movs	r3, #64	@ 0x40
 8006808:	616b      	str	r3, [r5, #20]
 800680a:	2300      	movs	r3, #0
 800680c:	9309      	str	r3, [sp, #36]	@ 0x24
 800680e:	2320      	movs	r3, #32
 8006810:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006814:	2330      	movs	r3, #48	@ 0x30
 8006816:	f04f 0901 	mov.w	r9, #1
 800681a:	f8cd 800c 	str.w	r8, [sp, #12]
 800681e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80069b8 <_svfiprintf_r+0x1e4>
 8006822:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006826:	4623      	mov	r3, r4
 8006828:	469a      	mov	sl, r3
 800682a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800682e:	b10a      	cbz	r2, 8006834 <_svfiprintf_r+0x60>
 8006830:	2a25      	cmp	r2, #37	@ 0x25
 8006832:	d1f9      	bne.n	8006828 <_svfiprintf_r+0x54>
 8006834:	ebba 0b04 	subs.w	fp, sl, r4
 8006838:	d00b      	beq.n	8006852 <_svfiprintf_r+0x7e>
 800683a:	465b      	mov	r3, fp
 800683c:	4622      	mov	r2, r4
 800683e:	4629      	mov	r1, r5
 8006840:	4638      	mov	r0, r7
 8006842:	f7ff ff6c 	bl	800671e <__ssputs_r>
 8006846:	3001      	adds	r0, #1
 8006848:	f000 80a7 	beq.w	800699a <_svfiprintf_r+0x1c6>
 800684c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800684e:	445a      	add	r2, fp
 8006850:	9209      	str	r2, [sp, #36]	@ 0x24
 8006852:	f89a 3000 	ldrb.w	r3, [sl]
 8006856:	2b00      	cmp	r3, #0
 8006858:	f000 809f 	beq.w	800699a <_svfiprintf_r+0x1c6>
 800685c:	2300      	movs	r3, #0
 800685e:	f04f 32ff 	mov.w	r2, #4294967295
 8006862:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006866:	f10a 0a01 	add.w	sl, sl, #1
 800686a:	9304      	str	r3, [sp, #16]
 800686c:	9307      	str	r3, [sp, #28]
 800686e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006872:	931a      	str	r3, [sp, #104]	@ 0x68
 8006874:	4654      	mov	r4, sl
 8006876:	2205      	movs	r2, #5
 8006878:	f814 1b01 	ldrb.w	r1, [r4], #1
 800687c:	484e      	ldr	r0, [pc, #312]	@ (80069b8 <_svfiprintf_r+0x1e4>)
 800687e:	f000 fe80 	bl	8007582 <memchr>
 8006882:	9a04      	ldr	r2, [sp, #16]
 8006884:	b9d8      	cbnz	r0, 80068be <_svfiprintf_r+0xea>
 8006886:	06d0      	lsls	r0, r2, #27
 8006888:	bf44      	itt	mi
 800688a:	2320      	movmi	r3, #32
 800688c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006890:	0711      	lsls	r1, r2, #28
 8006892:	bf44      	itt	mi
 8006894:	232b      	movmi	r3, #43	@ 0x2b
 8006896:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800689a:	f89a 3000 	ldrb.w	r3, [sl]
 800689e:	2b2a      	cmp	r3, #42	@ 0x2a
 80068a0:	d015      	beq.n	80068ce <_svfiprintf_r+0xfa>
 80068a2:	4654      	mov	r4, sl
 80068a4:	2000      	movs	r0, #0
 80068a6:	f04f 0c0a 	mov.w	ip, #10
 80068aa:	9a07      	ldr	r2, [sp, #28]
 80068ac:	4621      	mov	r1, r4
 80068ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80068b2:	3b30      	subs	r3, #48	@ 0x30
 80068b4:	2b09      	cmp	r3, #9
 80068b6:	d94b      	bls.n	8006950 <_svfiprintf_r+0x17c>
 80068b8:	b1b0      	cbz	r0, 80068e8 <_svfiprintf_r+0x114>
 80068ba:	9207      	str	r2, [sp, #28]
 80068bc:	e014      	b.n	80068e8 <_svfiprintf_r+0x114>
 80068be:	eba0 0308 	sub.w	r3, r0, r8
 80068c2:	fa09 f303 	lsl.w	r3, r9, r3
 80068c6:	4313      	orrs	r3, r2
 80068c8:	46a2      	mov	sl, r4
 80068ca:	9304      	str	r3, [sp, #16]
 80068cc:	e7d2      	b.n	8006874 <_svfiprintf_r+0xa0>
 80068ce:	9b03      	ldr	r3, [sp, #12]
 80068d0:	1d19      	adds	r1, r3, #4
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	9103      	str	r1, [sp, #12]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	bfbb      	ittet	lt
 80068da:	425b      	neglt	r3, r3
 80068dc:	f042 0202 	orrlt.w	r2, r2, #2
 80068e0:	9307      	strge	r3, [sp, #28]
 80068e2:	9307      	strlt	r3, [sp, #28]
 80068e4:	bfb8      	it	lt
 80068e6:	9204      	strlt	r2, [sp, #16]
 80068e8:	7823      	ldrb	r3, [r4, #0]
 80068ea:	2b2e      	cmp	r3, #46	@ 0x2e
 80068ec:	d10a      	bne.n	8006904 <_svfiprintf_r+0x130>
 80068ee:	7863      	ldrb	r3, [r4, #1]
 80068f0:	2b2a      	cmp	r3, #42	@ 0x2a
 80068f2:	d132      	bne.n	800695a <_svfiprintf_r+0x186>
 80068f4:	9b03      	ldr	r3, [sp, #12]
 80068f6:	3402      	adds	r4, #2
 80068f8:	1d1a      	adds	r2, r3, #4
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	9203      	str	r2, [sp, #12]
 80068fe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006902:	9305      	str	r3, [sp, #20]
 8006904:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80069bc <_svfiprintf_r+0x1e8>
 8006908:	2203      	movs	r2, #3
 800690a:	4650      	mov	r0, sl
 800690c:	7821      	ldrb	r1, [r4, #0]
 800690e:	f000 fe38 	bl	8007582 <memchr>
 8006912:	b138      	cbz	r0, 8006924 <_svfiprintf_r+0x150>
 8006914:	2240      	movs	r2, #64	@ 0x40
 8006916:	9b04      	ldr	r3, [sp, #16]
 8006918:	eba0 000a 	sub.w	r0, r0, sl
 800691c:	4082      	lsls	r2, r0
 800691e:	4313      	orrs	r3, r2
 8006920:	3401      	adds	r4, #1
 8006922:	9304      	str	r3, [sp, #16]
 8006924:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006928:	2206      	movs	r2, #6
 800692a:	4825      	ldr	r0, [pc, #148]	@ (80069c0 <_svfiprintf_r+0x1ec>)
 800692c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006930:	f000 fe27 	bl	8007582 <memchr>
 8006934:	2800      	cmp	r0, #0
 8006936:	d036      	beq.n	80069a6 <_svfiprintf_r+0x1d2>
 8006938:	4b22      	ldr	r3, [pc, #136]	@ (80069c4 <_svfiprintf_r+0x1f0>)
 800693a:	bb1b      	cbnz	r3, 8006984 <_svfiprintf_r+0x1b0>
 800693c:	9b03      	ldr	r3, [sp, #12]
 800693e:	3307      	adds	r3, #7
 8006940:	f023 0307 	bic.w	r3, r3, #7
 8006944:	3308      	adds	r3, #8
 8006946:	9303      	str	r3, [sp, #12]
 8006948:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800694a:	4433      	add	r3, r6
 800694c:	9309      	str	r3, [sp, #36]	@ 0x24
 800694e:	e76a      	b.n	8006826 <_svfiprintf_r+0x52>
 8006950:	460c      	mov	r4, r1
 8006952:	2001      	movs	r0, #1
 8006954:	fb0c 3202 	mla	r2, ip, r2, r3
 8006958:	e7a8      	b.n	80068ac <_svfiprintf_r+0xd8>
 800695a:	2300      	movs	r3, #0
 800695c:	f04f 0c0a 	mov.w	ip, #10
 8006960:	4619      	mov	r1, r3
 8006962:	3401      	adds	r4, #1
 8006964:	9305      	str	r3, [sp, #20]
 8006966:	4620      	mov	r0, r4
 8006968:	f810 2b01 	ldrb.w	r2, [r0], #1
 800696c:	3a30      	subs	r2, #48	@ 0x30
 800696e:	2a09      	cmp	r2, #9
 8006970:	d903      	bls.n	800697a <_svfiprintf_r+0x1a6>
 8006972:	2b00      	cmp	r3, #0
 8006974:	d0c6      	beq.n	8006904 <_svfiprintf_r+0x130>
 8006976:	9105      	str	r1, [sp, #20]
 8006978:	e7c4      	b.n	8006904 <_svfiprintf_r+0x130>
 800697a:	4604      	mov	r4, r0
 800697c:	2301      	movs	r3, #1
 800697e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006982:	e7f0      	b.n	8006966 <_svfiprintf_r+0x192>
 8006984:	ab03      	add	r3, sp, #12
 8006986:	9300      	str	r3, [sp, #0]
 8006988:	462a      	mov	r2, r5
 800698a:	4638      	mov	r0, r7
 800698c:	4b0e      	ldr	r3, [pc, #56]	@ (80069c8 <_svfiprintf_r+0x1f4>)
 800698e:	a904      	add	r1, sp, #16
 8006990:	f3af 8000 	nop.w
 8006994:	1c42      	adds	r2, r0, #1
 8006996:	4606      	mov	r6, r0
 8006998:	d1d6      	bne.n	8006948 <_svfiprintf_r+0x174>
 800699a:	89ab      	ldrh	r3, [r5, #12]
 800699c:	065b      	lsls	r3, r3, #25
 800699e:	f53f af2d 	bmi.w	80067fc <_svfiprintf_r+0x28>
 80069a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80069a4:	e72c      	b.n	8006800 <_svfiprintf_r+0x2c>
 80069a6:	ab03      	add	r3, sp, #12
 80069a8:	9300      	str	r3, [sp, #0]
 80069aa:	462a      	mov	r2, r5
 80069ac:	4638      	mov	r0, r7
 80069ae:	4b06      	ldr	r3, [pc, #24]	@ (80069c8 <_svfiprintf_r+0x1f4>)
 80069b0:	a904      	add	r1, sp, #16
 80069b2:	f000 fa47 	bl	8006e44 <_printf_i>
 80069b6:	e7ed      	b.n	8006994 <_svfiprintf_r+0x1c0>
 80069b8:	08008058 	.word	0x08008058
 80069bc:	0800805e 	.word	0x0800805e
 80069c0:	08008062 	.word	0x08008062
 80069c4:	00000000 	.word	0x00000000
 80069c8:	0800671f 	.word	0x0800671f

080069cc <_sungetc_r>:
 80069cc:	b538      	push	{r3, r4, r5, lr}
 80069ce:	1c4b      	adds	r3, r1, #1
 80069d0:	4614      	mov	r4, r2
 80069d2:	d103      	bne.n	80069dc <_sungetc_r+0x10>
 80069d4:	f04f 35ff 	mov.w	r5, #4294967295
 80069d8:	4628      	mov	r0, r5
 80069da:	bd38      	pop	{r3, r4, r5, pc}
 80069dc:	8993      	ldrh	r3, [r2, #12]
 80069de:	b2cd      	uxtb	r5, r1
 80069e0:	f023 0320 	bic.w	r3, r3, #32
 80069e4:	8193      	strh	r3, [r2, #12]
 80069e6:	6853      	ldr	r3, [r2, #4]
 80069e8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80069ea:	b18a      	cbz	r2, 8006a10 <_sungetc_r+0x44>
 80069ec:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80069ee:	429a      	cmp	r2, r3
 80069f0:	dd08      	ble.n	8006a04 <_sungetc_r+0x38>
 80069f2:	6823      	ldr	r3, [r4, #0]
 80069f4:	1e5a      	subs	r2, r3, #1
 80069f6:	6022      	str	r2, [r4, #0]
 80069f8:	f803 5c01 	strb.w	r5, [r3, #-1]
 80069fc:	6863      	ldr	r3, [r4, #4]
 80069fe:	3301      	adds	r3, #1
 8006a00:	6063      	str	r3, [r4, #4]
 8006a02:	e7e9      	b.n	80069d8 <_sungetc_r+0xc>
 8006a04:	4621      	mov	r1, r4
 8006a06:	f000 fd6a 	bl	80074de <__submore>
 8006a0a:	2800      	cmp	r0, #0
 8006a0c:	d0f1      	beq.n	80069f2 <_sungetc_r+0x26>
 8006a0e:	e7e1      	b.n	80069d4 <_sungetc_r+0x8>
 8006a10:	6921      	ldr	r1, [r4, #16]
 8006a12:	6822      	ldr	r2, [r4, #0]
 8006a14:	b141      	cbz	r1, 8006a28 <_sungetc_r+0x5c>
 8006a16:	4291      	cmp	r1, r2
 8006a18:	d206      	bcs.n	8006a28 <_sungetc_r+0x5c>
 8006a1a:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8006a1e:	42a9      	cmp	r1, r5
 8006a20:	d102      	bne.n	8006a28 <_sungetc_r+0x5c>
 8006a22:	3a01      	subs	r2, #1
 8006a24:	6022      	str	r2, [r4, #0]
 8006a26:	e7ea      	b.n	80069fe <_sungetc_r+0x32>
 8006a28:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 8006a2c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006a30:	6363      	str	r3, [r4, #52]	@ 0x34
 8006a32:	2303      	movs	r3, #3
 8006a34:	63a3      	str	r3, [r4, #56]	@ 0x38
 8006a36:	4623      	mov	r3, r4
 8006a38:	f803 5f46 	strb.w	r5, [r3, #70]!
 8006a3c:	6023      	str	r3, [r4, #0]
 8006a3e:	2301      	movs	r3, #1
 8006a40:	e7de      	b.n	8006a00 <_sungetc_r+0x34>

08006a42 <__ssrefill_r>:
 8006a42:	b510      	push	{r4, lr}
 8006a44:	460c      	mov	r4, r1
 8006a46:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8006a48:	b169      	cbz	r1, 8006a66 <__ssrefill_r+0x24>
 8006a4a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006a4e:	4299      	cmp	r1, r3
 8006a50:	d001      	beq.n	8006a56 <__ssrefill_r+0x14>
 8006a52:	f7fe fe15 	bl	8005680 <_free_r>
 8006a56:	2000      	movs	r0, #0
 8006a58:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006a5a:	6360      	str	r0, [r4, #52]	@ 0x34
 8006a5c:	6063      	str	r3, [r4, #4]
 8006a5e:	b113      	cbz	r3, 8006a66 <__ssrefill_r+0x24>
 8006a60:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8006a62:	6023      	str	r3, [r4, #0]
 8006a64:	bd10      	pop	{r4, pc}
 8006a66:	6923      	ldr	r3, [r4, #16]
 8006a68:	f04f 30ff 	mov.w	r0, #4294967295
 8006a6c:	6023      	str	r3, [r4, #0]
 8006a6e:	2300      	movs	r3, #0
 8006a70:	6063      	str	r3, [r4, #4]
 8006a72:	89a3      	ldrh	r3, [r4, #12]
 8006a74:	f043 0320 	orr.w	r3, r3, #32
 8006a78:	81a3      	strh	r3, [r4, #12]
 8006a7a:	e7f3      	b.n	8006a64 <__ssrefill_r+0x22>

08006a7c <__ssvfiscanf_r>:
 8006a7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a80:	460c      	mov	r4, r1
 8006a82:	2100      	movs	r1, #0
 8006a84:	4606      	mov	r6, r0
 8006a86:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8006a8a:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8006a8e:	49aa      	ldr	r1, [pc, #680]	@ (8006d38 <__ssvfiscanf_r+0x2bc>)
 8006a90:	f10d 0804 	add.w	r8, sp, #4
 8006a94:	91a0      	str	r1, [sp, #640]	@ 0x280
 8006a96:	49a9      	ldr	r1, [pc, #676]	@ (8006d3c <__ssvfiscanf_r+0x2c0>)
 8006a98:	4fa9      	ldr	r7, [pc, #676]	@ (8006d40 <__ssvfiscanf_r+0x2c4>)
 8006a9a:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8006a9e:	91a1      	str	r1, [sp, #644]	@ 0x284
 8006aa0:	9300      	str	r3, [sp, #0]
 8006aa2:	7813      	ldrb	r3, [r2, #0]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	f000 8159 	beq.w	8006d5c <__ssvfiscanf_r+0x2e0>
 8006aaa:	5cf9      	ldrb	r1, [r7, r3]
 8006aac:	1c55      	adds	r5, r2, #1
 8006aae:	f011 0108 	ands.w	r1, r1, #8
 8006ab2:	d019      	beq.n	8006ae8 <__ssvfiscanf_r+0x6c>
 8006ab4:	6863      	ldr	r3, [r4, #4]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	dd0f      	ble.n	8006ada <__ssvfiscanf_r+0x5e>
 8006aba:	6823      	ldr	r3, [r4, #0]
 8006abc:	781a      	ldrb	r2, [r3, #0]
 8006abe:	5cba      	ldrb	r2, [r7, r2]
 8006ac0:	0712      	lsls	r2, r2, #28
 8006ac2:	d401      	bmi.n	8006ac8 <__ssvfiscanf_r+0x4c>
 8006ac4:	462a      	mov	r2, r5
 8006ac6:	e7ec      	b.n	8006aa2 <__ssvfiscanf_r+0x26>
 8006ac8:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8006aca:	3301      	adds	r3, #1
 8006acc:	3201      	adds	r2, #1
 8006ace:	9245      	str	r2, [sp, #276]	@ 0x114
 8006ad0:	6862      	ldr	r2, [r4, #4]
 8006ad2:	6023      	str	r3, [r4, #0]
 8006ad4:	3a01      	subs	r2, #1
 8006ad6:	6062      	str	r2, [r4, #4]
 8006ad8:	e7ec      	b.n	8006ab4 <__ssvfiscanf_r+0x38>
 8006ada:	4621      	mov	r1, r4
 8006adc:	4630      	mov	r0, r6
 8006ade:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8006ae0:	4798      	blx	r3
 8006ae2:	2800      	cmp	r0, #0
 8006ae4:	d0e9      	beq.n	8006aba <__ssvfiscanf_r+0x3e>
 8006ae6:	e7ed      	b.n	8006ac4 <__ssvfiscanf_r+0x48>
 8006ae8:	2b25      	cmp	r3, #37	@ 0x25
 8006aea:	d012      	beq.n	8006b12 <__ssvfiscanf_r+0x96>
 8006aec:	4699      	mov	r9, r3
 8006aee:	6863      	ldr	r3, [r4, #4]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	f340 8094 	ble.w	8006c1e <__ssvfiscanf_r+0x1a2>
 8006af6:	6822      	ldr	r2, [r4, #0]
 8006af8:	7813      	ldrb	r3, [r2, #0]
 8006afa:	454b      	cmp	r3, r9
 8006afc:	f040 812e 	bne.w	8006d5c <__ssvfiscanf_r+0x2e0>
 8006b00:	6863      	ldr	r3, [r4, #4]
 8006b02:	3201      	adds	r2, #1
 8006b04:	3b01      	subs	r3, #1
 8006b06:	6063      	str	r3, [r4, #4]
 8006b08:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8006b0a:	6022      	str	r2, [r4, #0]
 8006b0c:	3301      	adds	r3, #1
 8006b0e:	9345      	str	r3, [sp, #276]	@ 0x114
 8006b10:	e7d8      	b.n	8006ac4 <__ssvfiscanf_r+0x48>
 8006b12:	9141      	str	r1, [sp, #260]	@ 0x104
 8006b14:	9143      	str	r1, [sp, #268]	@ 0x10c
 8006b16:	7853      	ldrb	r3, [r2, #1]
 8006b18:	2b2a      	cmp	r3, #42	@ 0x2a
 8006b1a:	bf04      	itt	eq
 8006b1c:	2310      	moveq	r3, #16
 8006b1e:	1c95      	addeq	r5, r2, #2
 8006b20:	f04f 020a 	mov.w	r2, #10
 8006b24:	bf08      	it	eq
 8006b26:	9341      	streq	r3, [sp, #260]	@ 0x104
 8006b28:	46a9      	mov	r9, r5
 8006b2a:	f819 1b01 	ldrb.w	r1, [r9], #1
 8006b2e:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8006b32:	2b09      	cmp	r3, #9
 8006b34:	d91e      	bls.n	8006b74 <__ssvfiscanf_r+0xf8>
 8006b36:	f8df a20c 	ldr.w	sl, [pc, #524]	@ 8006d44 <__ssvfiscanf_r+0x2c8>
 8006b3a:	2203      	movs	r2, #3
 8006b3c:	4650      	mov	r0, sl
 8006b3e:	f000 fd20 	bl	8007582 <memchr>
 8006b42:	b138      	cbz	r0, 8006b54 <__ssvfiscanf_r+0xd8>
 8006b44:	2301      	movs	r3, #1
 8006b46:	464d      	mov	r5, r9
 8006b48:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8006b4a:	eba0 000a 	sub.w	r0, r0, sl
 8006b4e:	4083      	lsls	r3, r0
 8006b50:	4313      	orrs	r3, r2
 8006b52:	9341      	str	r3, [sp, #260]	@ 0x104
 8006b54:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006b58:	2b78      	cmp	r3, #120	@ 0x78
 8006b5a:	d806      	bhi.n	8006b6a <__ssvfiscanf_r+0xee>
 8006b5c:	2b57      	cmp	r3, #87	@ 0x57
 8006b5e:	d810      	bhi.n	8006b82 <__ssvfiscanf_r+0x106>
 8006b60:	2b25      	cmp	r3, #37	@ 0x25
 8006b62:	d0c3      	beq.n	8006aec <__ssvfiscanf_r+0x70>
 8006b64:	d856      	bhi.n	8006c14 <__ssvfiscanf_r+0x198>
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d064      	beq.n	8006c34 <__ssvfiscanf_r+0x1b8>
 8006b6a:	2303      	movs	r3, #3
 8006b6c:	9347      	str	r3, [sp, #284]	@ 0x11c
 8006b6e:	230a      	movs	r3, #10
 8006b70:	9342      	str	r3, [sp, #264]	@ 0x108
 8006b72:	e077      	b.n	8006c64 <__ssvfiscanf_r+0x1e8>
 8006b74:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8006b76:	464d      	mov	r5, r9
 8006b78:	fb02 1103 	mla	r1, r2, r3, r1
 8006b7c:	3930      	subs	r1, #48	@ 0x30
 8006b7e:	9143      	str	r1, [sp, #268]	@ 0x10c
 8006b80:	e7d2      	b.n	8006b28 <__ssvfiscanf_r+0xac>
 8006b82:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8006b86:	2a20      	cmp	r2, #32
 8006b88:	d8ef      	bhi.n	8006b6a <__ssvfiscanf_r+0xee>
 8006b8a:	a101      	add	r1, pc, #4	@ (adr r1, 8006b90 <__ssvfiscanf_r+0x114>)
 8006b8c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006b90:	08006c43 	.word	0x08006c43
 8006b94:	08006b6b 	.word	0x08006b6b
 8006b98:	08006b6b 	.word	0x08006b6b
 8006b9c:	08006c9d 	.word	0x08006c9d
 8006ba0:	08006b6b 	.word	0x08006b6b
 8006ba4:	08006b6b 	.word	0x08006b6b
 8006ba8:	08006b6b 	.word	0x08006b6b
 8006bac:	08006b6b 	.word	0x08006b6b
 8006bb0:	08006b6b 	.word	0x08006b6b
 8006bb4:	08006b6b 	.word	0x08006b6b
 8006bb8:	08006b6b 	.word	0x08006b6b
 8006bbc:	08006cb3 	.word	0x08006cb3
 8006bc0:	08006c99 	.word	0x08006c99
 8006bc4:	08006c1b 	.word	0x08006c1b
 8006bc8:	08006c1b 	.word	0x08006c1b
 8006bcc:	08006c1b 	.word	0x08006c1b
 8006bd0:	08006b6b 	.word	0x08006b6b
 8006bd4:	08006c55 	.word	0x08006c55
 8006bd8:	08006b6b 	.word	0x08006b6b
 8006bdc:	08006b6b 	.word	0x08006b6b
 8006be0:	08006b6b 	.word	0x08006b6b
 8006be4:	08006b6b 	.word	0x08006b6b
 8006be8:	08006cc3 	.word	0x08006cc3
 8006bec:	08006c5d 	.word	0x08006c5d
 8006bf0:	08006c3b 	.word	0x08006c3b
 8006bf4:	08006b6b 	.word	0x08006b6b
 8006bf8:	08006b6b 	.word	0x08006b6b
 8006bfc:	08006cbf 	.word	0x08006cbf
 8006c00:	08006b6b 	.word	0x08006b6b
 8006c04:	08006c99 	.word	0x08006c99
 8006c08:	08006b6b 	.word	0x08006b6b
 8006c0c:	08006b6b 	.word	0x08006b6b
 8006c10:	08006c43 	.word	0x08006c43
 8006c14:	3b45      	subs	r3, #69	@ 0x45
 8006c16:	2b02      	cmp	r3, #2
 8006c18:	d8a7      	bhi.n	8006b6a <__ssvfiscanf_r+0xee>
 8006c1a:	2305      	movs	r3, #5
 8006c1c:	e021      	b.n	8006c62 <__ssvfiscanf_r+0x1e6>
 8006c1e:	4621      	mov	r1, r4
 8006c20:	4630      	mov	r0, r6
 8006c22:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8006c24:	4798      	blx	r3
 8006c26:	2800      	cmp	r0, #0
 8006c28:	f43f af65 	beq.w	8006af6 <__ssvfiscanf_r+0x7a>
 8006c2c:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8006c2e:	2800      	cmp	r0, #0
 8006c30:	f040 808c 	bne.w	8006d4c <__ssvfiscanf_r+0x2d0>
 8006c34:	f04f 30ff 	mov.w	r0, #4294967295
 8006c38:	e08c      	b.n	8006d54 <__ssvfiscanf_r+0x2d8>
 8006c3a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8006c3c:	f042 0220 	orr.w	r2, r2, #32
 8006c40:	9241      	str	r2, [sp, #260]	@ 0x104
 8006c42:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8006c44:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006c48:	9241      	str	r2, [sp, #260]	@ 0x104
 8006c4a:	2210      	movs	r2, #16
 8006c4c:	2b6e      	cmp	r3, #110	@ 0x6e
 8006c4e:	9242      	str	r2, [sp, #264]	@ 0x108
 8006c50:	d902      	bls.n	8006c58 <__ssvfiscanf_r+0x1dc>
 8006c52:	e005      	b.n	8006c60 <__ssvfiscanf_r+0x1e4>
 8006c54:	2300      	movs	r3, #0
 8006c56:	9342      	str	r3, [sp, #264]	@ 0x108
 8006c58:	2303      	movs	r3, #3
 8006c5a:	e002      	b.n	8006c62 <__ssvfiscanf_r+0x1e6>
 8006c5c:	2308      	movs	r3, #8
 8006c5e:	9342      	str	r3, [sp, #264]	@ 0x108
 8006c60:	2304      	movs	r3, #4
 8006c62:	9347      	str	r3, [sp, #284]	@ 0x11c
 8006c64:	6863      	ldr	r3, [r4, #4]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	dd39      	ble.n	8006cde <__ssvfiscanf_r+0x262>
 8006c6a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8006c6c:	0659      	lsls	r1, r3, #25
 8006c6e:	d404      	bmi.n	8006c7a <__ssvfiscanf_r+0x1fe>
 8006c70:	6823      	ldr	r3, [r4, #0]
 8006c72:	781a      	ldrb	r2, [r3, #0]
 8006c74:	5cba      	ldrb	r2, [r7, r2]
 8006c76:	0712      	lsls	r2, r2, #28
 8006c78:	d438      	bmi.n	8006cec <__ssvfiscanf_r+0x270>
 8006c7a:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8006c7c:	2b02      	cmp	r3, #2
 8006c7e:	dc47      	bgt.n	8006d10 <__ssvfiscanf_r+0x294>
 8006c80:	466b      	mov	r3, sp
 8006c82:	4622      	mov	r2, r4
 8006c84:	4630      	mov	r0, r6
 8006c86:	a941      	add	r1, sp, #260	@ 0x104
 8006c88:	f000 f9fc 	bl	8007084 <_scanf_chars>
 8006c8c:	2801      	cmp	r0, #1
 8006c8e:	d065      	beq.n	8006d5c <__ssvfiscanf_r+0x2e0>
 8006c90:	2802      	cmp	r0, #2
 8006c92:	f47f af17 	bne.w	8006ac4 <__ssvfiscanf_r+0x48>
 8006c96:	e7c9      	b.n	8006c2c <__ssvfiscanf_r+0x1b0>
 8006c98:	220a      	movs	r2, #10
 8006c9a:	e7d7      	b.n	8006c4c <__ssvfiscanf_r+0x1d0>
 8006c9c:	4629      	mov	r1, r5
 8006c9e:	4640      	mov	r0, r8
 8006ca0:	f000 fbe4 	bl	800746c <__sccl>
 8006ca4:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8006ca6:	4605      	mov	r5, r0
 8006ca8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006cac:	9341      	str	r3, [sp, #260]	@ 0x104
 8006cae:	2301      	movs	r3, #1
 8006cb0:	e7d7      	b.n	8006c62 <__ssvfiscanf_r+0x1e6>
 8006cb2:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8006cb4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006cb8:	9341      	str	r3, [sp, #260]	@ 0x104
 8006cba:	2300      	movs	r3, #0
 8006cbc:	e7d1      	b.n	8006c62 <__ssvfiscanf_r+0x1e6>
 8006cbe:	2302      	movs	r3, #2
 8006cc0:	e7cf      	b.n	8006c62 <__ssvfiscanf_r+0x1e6>
 8006cc2:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8006cc4:	06c3      	lsls	r3, r0, #27
 8006cc6:	f53f aefd 	bmi.w	8006ac4 <__ssvfiscanf_r+0x48>
 8006cca:	9b00      	ldr	r3, [sp, #0]
 8006ccc:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8006cce:	1d19      	adds	r1, r3, #4
 8006cd0:	9100      	str	r1, [sp, #0]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	07c0      	lsls	r0, r0, #31
 8006cd6:	bf4c      	ite	mi
 8006cd8:	801a      	strhmi	r2, [r3, #0]
 8006cda:	601a      	strpl	r2, [r3, #0]
 8006cdc:	e6f2      	b.n	8006ac4 <__ssvfiscanf_r+0x48>
 8006cde:	4621      	mov	r1, r4
 8006ce0:	4630      	mov	r0, r6
 8006ce2:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8006ce4:	4798      	blx	r3
 8006ce6:	2800      	cmp	r0, #0
 8006ce8:	d0bf      	beq.n	8006c6a <__ssvfiscanf_r+0x1ee>
 8006cea:	e79f      	b.n	8006c2c <__ssvfiscanf_r+0x1b0>
 8006cec:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8006cee:	3201      	adds	r2, #1
 8006cf0:	9245      	str	r2, [sp, #276]	@ 0x114
 8006cf2:	6862      	ldr	r2, [r4, #4]
 8006cf4:	3a01      	subs	r2, #1
 8006cf6:	2a00      	cmp	r2, #0
 8006cf8:	6062      	str	r2, [r4, #4]
 8006cfa:	dd02      	ble.n	8006d02 <__ssvfiscanf_r+0x286>
 8006cfc:	3301      	adds	r3, #1
 8006cfe:	6023      	str	r3, [r4, #0]
 8006d00:	e7b6      	b.n	8006c70 <__ssvfiscanf_r+0x1f4>
 8006d02:	4621      	mov	r1, r4
 8006d04:	4630      	mov	r0, r6
 8006d06:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8006d08:	4798      	blx	r3
 8006d0a:	2800      	cmp	r0, #0
 8006d0c:	d0b0      	beq.n	8006c70 <__ssvfiscanf_r+0x1f4>
 8006d0e:	e78d      	b.n	8006c2c <__ssvfiscanf_r+0x1b0>
 8006d10:	2b04      	cmp	r3, #4
 8006d12:	dc06      	bgt.n	8006d22 <__ssvfiscanf_r+0x2a6>
 8006d14:	466b      	mov	r3, sp
 8006d16:	4622      	mov	r2, r4
 8006d18:	4630      	mov	r0, r6
 8006d1a:	a941      	add	r1, sp, #260	@ 0x104
 8006d1c:	f000 fa0c 	bl	8007138 <_scanf_i>
 8006d20:	e7b4      	b.n	8006c8c <__ssvfiscanf_r+0x210>
 8006d22:	4b09      	ldr	r3, [pc, #36]	@ (8006d48 <__ssvfiscanf_r+0x2cc>)
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	f43f aecd 	beq.w	8006ac4 <__ssvfiscanf_r+0x48>
 8006d2a:	466b      	mov	r3, sp
 8006d2c:	4622      	mov	r2, r4
 8006d2e:	4630      	mov	r0, r6
 8006d30:	a941      	add	r1, sp, #260	@ 0x104
 8006d32:	f3af 8000 	nop.w
 8006d36:	e7a9      	b.n	8006c8c <__ssvfiscanf_r+0x210>
 8006d38:	080069cd 	.word	0x080069cd
 8006d3c:	08006a43 	.word	0x08006a43
 8006d40:	08007d71 	.word	0x08007d71
 8006d44:	0800805e 	.word	0x0800805e
 8006d48:	00000000 	.word	0x00000000
 8006d4c:	89a3      	ldrh	r3, [r4, #12]
 8006d4e:	065b      	lsls	r3, r3, #25
 8006d50:	f53f af70 	bmi.w	8006c34 <__ssvfiscanf_r+0x1b8>
 8006d54:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8006d58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d5c:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8006d5e:	e7f9      	b.n	8006d54 <__ssvfiscanf_r+0x2d8>

08006d60 <_printf_common>:
 8006d60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d64:	4616      	mov	r6, r2
 8006d66:	4698      	mov	r8, r3
 8006d68:	688a      	ldr	r2, [r1, #8]
 8006d6a:	690b      	ldr	r3, [r1, #16]
 8006d6c:	4607      	mov	r7, r0
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	bfb8      	it	lt
 8006d72:	4613      	movlt	r3, r2
 8006d74:	6033      	str	r3, [r6, #0]
 8006d76:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006d7a:	460c      	mov	r4, r1
 8006d7c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006d80:	b10a      	cbz	r2, 8006d86 <_printf_common+0x26>
 8006d82:	3301      	adds	r3, #1
 8006d84:	6033      	str	r3, [r6, #0]
 8006d86:	6823      	ldr	r3, [r4, #0]
 8006d88:	0699      	lsls	r1, r3, #26
 8006d8a:	bf42      	ittt	mi
 8006d8c:	6833      	ldrmi	r3, [r6, #0]
 8006d8e:	3302      	addmi	r3, #2
 8006d90:	6033      	strmi	r3, [r6, #0]
 8006d92:	6825      	ldr	r5, [r4, #0]
 8006d94:	f015 0506 	ands.w	r5, r5, #6
 8006d98:	d106      	bne.n	8006da8 <_printf_common+0x48>
 8006d9a:	f104 0a19 	add.w	sl, r4, #25
 8006d9e:	68e3      	ldr	r3, [r4, #12]
 8006da0:	6832      	ldr	r2, [r6, #0]
 8006da2:	1a9b      	subs	r3, r3, r2
 8006da4:	42ab      	cmp	r3, r5
 8006da6:	dc2b      	bgt.n	8006e00 <_printf_common+0xa0>
 8006da8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006dac:	6822      	ldr	r2, [r4, #0]
 8006dae:	3b00      	subs	r3, #0
 8006db0:	bf18      	it	ne
 8006db2:	2301      	movne	r3, #1
 8006db4:	0692      	lsls	r2, r2, #26
 8006db6:	d430      	bmi.n	8006e1a <_printf_common+0xba>
 8006db8:	4641      	mov	r1, r8
 8006dba:	4638      	mov	r0, r7
 8006dbc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006dc0:	47c8      	blx	r9
 8006dc2:	3001      	adds	r0, #1
 8006dc4:	d023      	beq.n	8006e0e <_printf_common+0xae>
 8006dc6:	6823      	ldr	r3, [r4, #0]
 8006dc8:	6922      	ldr	r2, [r4, #16]
 8006dca:	f003 0306 	and.w	r3, r3, #6
 8006dce:	2b04      	cmp	r3, #4
 8006dd0:	bf14      	ite	ne
 8006dd2:	2500      	movne	r5, #0
 8006dd4:	6833      	ldreq	r3, [r6, #0]
 8006dd6:	f04f 0600 	mov.w	r6, #0
 8006dda:	bf08      	it	eq
 8006ddc:	68e5      	ldreq	r5, [r4, #12]
 8006dde:	f104 041a 	add.w	r4, r4, #26
 8006de2:	bf08      	it	eq
 8006de4:	1aed      	subeq	r5, r5, r3
 8006de6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006dea:	bf08      	it	eq
 8006dec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006df0:	4293      	cmp	r3, r2
 8006df2:	bfc4      	itt	gt
 8006df4:	1a9b      	subgt	r3, r3, r2
 8006df6:	18ed      	addgt	r5, r5, r3
 8006df8:	42b5      	cmp	r5, r6
 8006dfa:	d11a      	bne.n	8006e32 <_printf_common+0xd2>
 8006dfc:	2000      	movs	r0, #0
 8006dfe:	e008      	b.n	8006e12 <_printf_common+0xb2>
 8006e00:	2301      	movs	r3, #1
 8006e02:	4652      	mov	r2, sl
 8006e04:	4641      	mov	r1, r8
 8006e06:	4638      	mov	r0, r7
 8006e08:	47c8      	blx	r9
 8006e0a:	3001      	adds	r0, #1
 8006e0c:	d103      	bne.n	8006e16 <_printf_common+0xb6>
 8006e0e:	f04f 30ff 	mov.w	r0, #4294967295
 8006e12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e16:	3501      	adds	r5, #1
 8006e18:	e7c1      	b.n	8006d9e <_printf_common+0x3e>
 8006e1a:	2030      	movs	r0, #48	@ 0x30
 8006e1c:	18e1      	adds	r1, r4, r3
 8006e1e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006e22:	1c5a      	adds	r2, r3, #1
 8006e24:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006e28:	4422      	add	r2, r4
 8006e2a:	3302      	adds	r3, #2
 8006e2c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006e30:	e7c2      	b.n	8006db8 <_printf_common+0x58>
 8006e32:	2301      	movs	r3, #1
 8006e34:	4622      	mov	r2, r4
 8006e36:	4641      	mov	r1, r8
 8006e38:	4638      	mov	r0, r7
 8006e3a:	47c8      	blx	r9
 8006e3c:	3001      	adds	r0, #1
 8006e3e:	d0e6      	beq.n	8006e0e <_printf_common+0xae>
 8006e40:	3601      	adds	r6, #1
 8006e42:	e7d9      	b.n	8006df8 <_printf_common+0x98>

08006e44 <_printf_i>:
 8006e44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006e48:	7e0f      	ldrb	r7, [r1, #24]
 8006e4a:	4691      	mov	r9, r2
 8006e4c:	2f78      	cmp	r7, #120	@ 0x78
 8006e4e:	4680      	mov	r8, r0
 8006e50:	460c      	mov	r4, r1
 8006e52:	469a      	mov	sl, r3
 8006e54:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006e56:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006e5a:	d807      	bhi.n	8006e6c <_printf_i+0x28>
 8006e5c:	2f62      	cmp	r7, #98	@ 0x62
 8006e5e:	d80a      	bhi.n	8006e76 <_printf_i+0x32>
 8006e60:	2f00      	cmp	r7, #0
 8006e62:	f000 80d3 	beq.w	800700c <_printf_i+0x1c8>
 8006e66:	2f58      	cmp	r7, #88	@ 0x58
 8006e68:	f000 80ba 	beq.w	8006fe0 <_printf_i+0x19c>
 8006e6c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006e70:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006e74:	e03a      	b.n	8006eec <_printf_i+0xa8>
 8006e76:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006e7a:	2b15      	cmp	r3, #21
 8006e7c:	d8f6      	bhi.n	8006e6c <_printf_i+0x28>
 8006e7e:	a101      	add	r1, pc, #4	@ (adr r1, 8006e84 <_printf_i+0x40>)
 8006e80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006e84:	08006edd 	.word	0x08006edd
 8006e88:	08006ef1 	.word	0x08006ef1
 8006e8c:	08006e6d 	.word	0x08006e6d
 8006e90:	08006e6d 	.word	0x08006e6d
 8006e94:	08006e6d 	.word	0x08006e6d
 8006e98:	08006e6d 	.word	0x08006e6d
 8006e9c:	08006ef1 	.word	0x08006ef1
 8006ea0:	08006e6d 	.word	0x08006e6d
 8006ea4:	08006e6d 	.word	0x08006e6d
 8006ea8:	08006e6d 	.word	0x08006e6d
 8006eac:	08006e6d 	.word	0x08006e6d
 8006eb0:	08006ff3 	.word	0x08006ff3
 8006eb4:	08006f1b 	.word	0x08006f1b
 8006eb8:	08006fad 	.word	0x08006fad
 8006ebc:	08006e6d 	.word	0x08006e6d
 8006ec0:	08006e6d 	.word	0x08006e6d
 8006ec4:	08007015 	.word	0x08007015
 8006ec8:	08006e6d 	.word	0x08006e6d
 8006ecc:	08006f1b 	.word	0x08006f1b
 8006ed0:	08006e6d 	.word	0x08006e6d
 8006ed4:	08006e6d 	.word	0x08006e6d
 8006ed8:	08006fb5 	.word	0x08006fb5
 8006edc:	6833      	ldr	r3, [r6, #0]
 8006ede:	1d1a      	adds	r2, r3, #4
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	6032      	str	r2, [r6, #0]
 8006ee4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006ee8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006eec:	2301      	movs	r3, #1
 8006eee:	e09e      	b.n	800702e <_printf_i+0x1ea>
 8006ef0:	6833      	ldr	r3, [r6, #0]
 8006ef2:	6820      	ldr	r0, [r4, #0]
 8006ef4:	1d19      	adds	r1, r3, #4
 8006ef6:	6031      	str	r1, [r6, #0]
 8006ef8:	0606      	lsls	r6, r0, #24
 8006efa:	d501      	bpl.n	8006f00 <_printf_i+0xbc>
 8006efc:	681d      	ldr	r5, [r3, #0]
 8006efe:	e003      	b.n	8006f08 <_printf_i+0xc4>
 8006f00:	0645      	lsls	r5, r0, #25
 8006f02:	d5fb      	bpl.n	8006efc <_printf_i+0xb8>
 8006f04:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006f08:	2d00      	cmp	r5, #0
 8006f0a:	da03      	bge.n	8006f14 <_printf_i+0xd0>
 8006f0c:	232d      	movs	r3, #45	@ 0x2d
 8006f0e:	426d      	negs	r5, r5
 8006f10:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006f14:	230a      	movs	r3, #10
 8006f16:	4859      	ldr	r0, [pc, #356]	@ (800707c <_printf_i+0x238>)
 8006f18:	e011      	b.n	8006f3e <_printf_i+0xfa>
 8006f1a:	6821      	ldr	r1, [r4, #0]
 8006f1c:	6833      	ldr	r3, [r6, #0]
 8006f1e:	0608      	lsls	r0, r1, #24
 8006f20:	f853 5b04 	ldr.w	r5, [r3], #4
 8006f24:	d402      	bmi.n	8006f2c <_printf_i+0xe8>
 8006f26:	0649      	lsls	r1, r1, #25
 8006f28:	bf48      	it	mi
 8006f2a:	b2ad      	uxthmi	r5, r5
 8006f2c:	2f6f      	cmp	r7, #111	@ 0x6f
 8006f2e:	6033      	str	r3, [r6, #0]
 8006f30:	bf14      	ite	ne
 8006f32:	230a      	movne	r3, #10
 8006f34:	2308      	moveq	r3, #8
 8006f36:	4851      	ldr	r0, [pc, #324]	@ (800707c <_printf_i+0x238>)
 8006f38:	2100      	movs	r1, #0
 8006f3a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006f3e:	6866      	ldr	r6, [r4, #4]
 8006f40:	2e00      	cmp	r6, #0
 8006f42:	bfa8      	it	ge
 8006f44:	6821      	ldrge	r1, [r4, #0]
 8006f46:	60a6      	str	r6, [r4, #8]
 8006f48:	bfa4      	itt	ge
 8006f4a:	f021 0104 	bicge.w	r1, r1, #4
 8006f4e:	6021      	strge	r1, [r4, #0]
 8006f50:	b90d      	cbnz	r5, 8006f56 <_printf_i+0x112>
 8006f52:	2e00      	cmp	r6, #0
 8006f54:	d04b      	beq.n	8006fee <_printf_i+0x1aa>
 8006f56:	4616      	mov	r6, r2
 8006f58:	fbb5 f1f3 	udiv	r1, r5, r3
 8006f5c:	fb03 5711 	mls	r7, r3, r1, r5
 8006f60:	5dc7      	ldrb	r7, [r0, r7]
 8006f62:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006f66:	462f      	mov	r7, r5
 8006f68:	42bb      	cmp	r3, r7
 8006f6a:	460d      	mov	r5, r1
 8006f6c:	d9f4      	bls.n	8006f58 <_printf_i+0x114>
 8006f6e:	2b08      	cmp	r3, #8
 8006f70:	d10b      	bne.n	8006f8a <_printf_i+0x146>
 8006f72:	6823      	ldr	r3, [r4, #0]
 8006f74:	07df      	lsls	r7, r3, #31
 8006f76:	d508      	bpl.n	8006f8a <_printf_i+0x146>
 8006f78:	6923      	ldr	r3, [r4, #16]
 8006f7a:	6861      	ldr	r1, [r4, #4]
 8006f7c:	4299      	cmp	r1, r3
 8006f7e:	bfde      	ittt	le
 8006f80:	2330      	movle	r3, #48	@ 0x30
 8006f82:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006f86:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006f8a:	1b92      	subs	r2, r2, r6
 8006f8c:	6122      	str	r2, [r4, #16]
 8006f8e:	464b      	mov	r3, r9
 8006f90:	4621      	mov	r1, r4
 8006f92:	4640      	mov	r0, r8
 8006f94:	f8cd a000 	str.w	sl, [sp]
 8006f98:	aa03      	add	r2, sp, #12
 8006f9a:	f7ff fee1 	bl	8006d60 <_printf_common>
 8006f9e:	3001      	adds	r0, #1
 8006fa0:	d14a      	bne.n	8007038 <_printf_i+0x1f4>
 8006fa2:	f04f 30ff 	mov.w	r0, #4294967295
 8006fa6:	b004      	add	sp, #16
 8006fa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fac:	6823      	ldr	r3, [r4, #0]
 8006fae:	f043 0320 	orr.w	r3, r3, #32
 8006fb2:	6023      	str	r3, [r4, #0]
 8006fb4:	2778      	movs	r7, #120	@ 0x78
 8006fb6:	4832      	ldr	r0, [pc, #200]	@ (8007080 <_printf_i+0x23c>)
 8006fb8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006fbc:	6823      	ldr	r3, [r4, #0]
 8006fbe:	6831      	ldr	r1, [r6, #0]
 8006fc0:	061f      	lsls	r7, r3, #24
 8006fc2:	f851 5b04 	ldr.w	r5, [r1], #4
 8006fc6:	d402      	bmi.n	8006fce <_printf_i+0x18a>
 8006fc8:	065f      	lsls	r7, r3, #25
 8006fca:	bf48      	it	mi
 8006fcc:	b2ad      	uxthmi	r5, r5
 8006fce:	6031      	str	r1, [r6, #0]
 8006fd0:	07d9      	lsls	r1, r3, #31
 8006fd2:	bf44      	itt	mi
 8006fd4:	f043 0320 	orrmi.w	r3, r3, #32
 8006fd8:	6023      	strmi	r3, [r4, #0]
 8006fda:	b11d      	cbz	r5, 8006fe4 <_printf_i+0x1a0>
 8006fdc:	2310      	movs	r3, #16
 8006fde:	e7ab      	b.n	8006f38 <_printf_i+0xf4>
 8006fe0:	4826      	ldr	r0, [pc, #152]	@ (800707c <_printf_i+0x238>)
 8006fe2:	e7e9      	b.n	8006fb8 <_printf_i+0x174>
 8006fe4:	6823      	ldr	r3, [r4, #0]
 8006fe6:	f023 0320 	bic.w	r3, r3, #32
 8006fea:	6023      	str	r3, [r4, #0]
 8006fec:	e7f6      	b.n	8006fdc <_printf_i+0x198>
 8006fee:	4616      	mov	r6, r2
 8006ff0:	e7bd      	b.n	8006f6e <_printf_i+0x12a>
 8006ff2:	6833      	ldr	r3, [r6, #0]
 8006ff4:	6825      	ldr	r5, [r4, #0]
 8006ff6:	1d18      	adds	r0, r3, #4
 8006ff8:	6961      	ldr	r1, [r4, #20]
 8006ffa:	6030      	str	r0, [r6, #0]
 8006ffc:	062e      	lsls	r6, r5, #24
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	d501      	bpl.n	8007006 <_printf_i+0x1c2>
 8007002:	6019      	str	r1, [r3, #0]
 8007004:	e002      	b.n	800700c <_printf_i+0x1c8>
 8007006:	0668      	lsls	r0, r5, #25
 8007008:	d5fb      	bpl.n	8007002 <_printf_i+0x1be>
 800700a:	8019      	strh	r1, [r3, #0]
 800700c:	2300      	movs	r3, #0
 800700e:	4616      	mov	r6, r2
 8007010:	6123      	str	r3, [r4, #16]
 8007012:	e7bc      	b.n	8006f8e <_printf_i+0x14a>
 8007014:	6833      	ldr	r3, [r6, #0]
 8007016:	2100      	movs	r1, #0
 8007018:	1d1a      	adds	r2, r3, #4
 800701a:	6032      	str	r2, [r6, #0]
 800701c:	681e      	ldr	r6, [r3, #0]
 800701e:	6862      	ldr	r2, [r4, #4]
 8007020:	4630      	mov	r0, r6
 8007022:	f000 faae 	bl	8007582 <memchr>
 8007026:	b108      	cbz	r0, 800702c <_printf_i+0x1e8>
 8007028:	1b80      	subs	r0, r0, r6
 800702a:	6060      	str	r0, [r4, #4]
 800702c:	6863      	ldr	r3, [r4, #4]
 800702e:	6123      	str	r3, [r4, #16]
 8007030:	2300      	movs	r3, #0
 8007032:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007036:	e7aa      	b.n	8006f8e <_printf_i+0x14a>
 8007038:	4632      	mov	r2, r6
 800703a:	4649      	mov	r1, r9
 800703c:	4640      	mov	r0, r8
 800703e:	6923      	ldr	r3, [r4, #16]
 8007040:	47d0      	blx	sl
 8007042:	3001      	adds	r0, #1
 8007044:	d0ad      	beq.n	8006fa2 <_printf_i+0x15e>
 8007046:	6823      	ldr	r3, [r4, #0]
 8007048:	079b      	lsls	r3, r3, #30
 800704a:	d413      	bmi.n	8007074 <_printf_i+0x230>
 800704c:	68e0      	ldr	r0, [r4, #12]
 800704e:	9b03      	ldr	r3, [sp, #12]
 8007050:	4298      	cmp	r0, r3
 8007052:	bfb8      	it	lt
 8007054:	4618      	movlt	r0, r3
 8007056:	e7a6      	b.n	8006fa6 <_printf_i+0x162>
 8007058:	2301      	movs	r3, #1
 800705a:	4632      	mov	r2, r6
 800705c:	4649      	mov	r1, r9
 800705e:	4640      	mov	r0, r8
 8007060:	47d0      	blx	sl
 8007062:	3001      	adds	r0, #1
 8007064:	d09d      	beq.n	8006fa2 <_printf_i+0x15e>
 8007066:	3501      	adds	r5, #1
 8007068:	68e3      	ldr	r3, [r4, #12]
 800706a:	9903      	ldr	r1, [sp, #12]
 800706c:	1a5b      	subs	r3, r3, r1
 800706e:	42ab      	cmp	r3, r5
 8007070:	dcf2      	bgt.n	8007058 <_printf_i+0x214>
 8007072:	e7eb      	b.n	800704c <_printf_i+0x208>
 8007074:	2500      	movs	r5, #0
 8007076:	f104 0619 	add.w	r6, r4, #25
 800707a:	e7f5      	b.n	8007068 <_printf_i+0x224>
 800707c:	08008069 	.word	0x08008069
 8007080:	0800807a 	.word	0x0800807a

08007084 <_scanf_chars>:
 8007084:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007088:	4615      	mov	r5, r2
 800708a:	688a      	ldr	r2, [r1, #8]
 800708c:	4680      	mov	r8, r0
 800708e:	460c      	mov	r4, r1
 8007090:	b932      	cbnz	r2, 80070a0 <_scanf_chars+0x1c>
 8007092:	698a      	ldr	r2, [r1, #24]
 8007094:	2a00      	cmp	r2, #0
 8007096:	bf14      	ite	ne
 8007098:	f04f 32ff 	movne.w	r2, #4294967295
 800709c:	2201      	moveq	r2, #1
 800709e:	608a      	str	r2, [r1, #8]
 80070a0:	2700      	movs	r7, #0
 80070a2:	6822      	ldr	r2, [r4, #0]
 80070a4:	f8df 908c 	ldr.w	r9, [pc, #140]	@ 8007134 <_scanf_chars+0xb0>
 80070a8:	06d1      	lsls	r1, r2, #27
 80070aa:	bf5f      	itttt	pl
 80070ac:	681a      	ldrpl	r2, [r3, #0]
 80070ae:	1d11      	addpl	r1, r2, #4
 80070b0:	6019      	strpl	r1, [r3, #0]
 80070b2:	6816      	ldrpl	r6, [r2, #0]
 80070b4:	69a0      	ldr	r0, [r4, #24]
 80070b6:	b188      	cbz	r0, 80070dc <_scanf_chars+0x58>
 80070b8:	2801      	cmp	r0, #1
 80070ba:	d107      	bne.n	80070cc <_scanf_chars+0x48>
 80070bc:	682b      	ldr	r3, [r5, #0]
 80070be:	781a      	ldrb	r2, [r3, #0]
 80070c0:	6963      	ldr	r3, [r4, #20]
 80070c2:	5c9b      	ldrb	r3, [r3, r2]
 80070c4:	b953      	cbnz	r3, 80070dc <_scanf_chars+0x58>
 80070c6:	2f00      	cmp	r7, #0
 80070c8:	d031      	beq.n	800712e <_scanf_chars+0xaa>
 80070ca:	e022      	b.n	8007112 <_scanf_chars+0x8e>
 80070cc:	2802      	cmp	r0, #2
 80070ce:	d120      	bne.n	8007112 <_scanf_chars+0x8e>
 80070d0:	682b      	ldr	r3, [r5, #0]
 80070d2:	781b      	ldrb	r3, [r3, #0]
 80070d4:	f819 3003 	ldrb.w	r3, [r9, r3]
 80070d8:	071b      	lsls	r3, r3, #28
 80070da:	d41a      	bmi.n	8007112 <_scanf_chars+0x8e>
 80070dc:	6823      	ldr	r3, [r4, #0]
 80070de:	3701      	adds	r7, #1
 80070e0:	06da      	lsls	r2, r3, #27
 80070e2:	bf5e      	ittt	pl
 80070e4:	682b      	ldrpl	r3, [r5, #0]
 80070e6:	781b      	ldrbpl	r3, [r3, #0]
 80070e8:	f806 3b01 	strbpl.w	r3, [r6], #1
 80070ec:	682a      	ldr	r2, [r5, #0]
 80070ee:	686b      	ldr	r3, [r5, #4]
 80070f0:	3201      	adds	r2, #1
 80070f2:	602a      	str	r2, [r5, #0]
 80070f4:	68a2      	ldr	r2, [r4, #8]
 80070f6:	3b01      	subs	r3, #1
 80070f8:	3a01      	subs	r2, #1
 80070fa:	606b      	str	r3, [r5, #4]
 80070fc:	60a2      	str	r2, [r4, #8]
 80070fe:	b142      	cbz	r2, 8007112 <_scanf_chars+0x8e>
 8007100:	2b00      	cmp	r3, #0
 8007102:	dcd7      	bgt.n	80070b4 <_scanf_chars+0x30>
 8007104:	4629      	mov	r1, r5
 8007106:	4640      	mov	r0, r8
 8007108:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800710c:	4798      	blx	r3
 800710e:	2800      	cmp	r0, #0
 8007110:	d0d0      	beq.n	80070b4 <_scanf_chars+0x30>
 8007112:	6823      	ldr	r3, [r4, #0]
 8007114:	f013 0310 	ands.w	r3, r3, #16
 8007118:	d105      	bne.n	8007126 <_scanf_chars+0xa2>
 800711a:	68e2      	ldr	r2, [r4, #12]
 800711c:	3201      	adds	r2, #1
 800711e:	60e2      	str	r2, [r4, #12]
 8007120:	69a2      	ldr	r2, [r4, #24]
 8007122:	b102      	cbz	r2, 8007126 <_scanf_chars+0xa2>
 8007124:	7033      	strb	r3, [r6, #0]
 8007126:	2000      	movs	r0, #0
 8007128:	6923      	ldr	r3, [r4, #16]
 800712a:	443b      	add	r3, r7
 800712c:	6123      	str	r3, [r4, #16]
 800712e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007132:	bf00      	nop
 8007134:	08007d71 	.word	0x08007d71

08007138 <_scanf_i>:
 8007138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800713c:	460c      	mov	r4, r1
 800713e:	4698      	mov	r8, r3
 8007140:	4b72      	ldr	r3, [pc, #456]	@ (800730c <_scanf_i+0x1d4>)
 8007142:	b087      	sub	sp, #28
 8007144:	4682      	mov	sl, r0
 8007146:	4616      	mov	r6, r2
 8007148:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800714c:	ab03      	add	r3, sp, #12
 800714e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8007152:	4b6f      	ldr	r3, [pc, #444]	@ (8007310 <_scanf_i+0x1d8>)
 8007154:	69a1      	ldr	r1, [r4, #24]
 8007156:	4a6f      	ldr	r2, [pc, #444]	@ (8007314 <_scanf_i+0x1dc>)
 8007158:	4627      	mov	r7, r4
 800715a:	2903      	cmp	r1, #3
 800715c:	bf08      	it	eq
 800715e:	461a      	moveq	r2, r3
 8007160:	68a3      	ldr	r3, [r4, #8]
 8007162:	9201      	str	r2, [sp, #4]
 8007164:	1e5a      	subs	r2, r3, #1
 8007166:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800716a:	bf81      	itttt	hi
 800716c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8007170:	eb03 0905 	addhi.w	r9, r3, r5
 8007174:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8007178:	60a3      	strhi	r3, [r4, #8]
 800717a:	f857 3b1c 	ldr.w	r3, [r7], #28
 800717e:	bf98      	it	ls
 8007180:	f04f 0900 	movls.w	r9, #0
 8007184:	463d      	mov	r5, r7
 8007186:	f04f 0b00 	mov.w	fp, #0
 800718a:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800718e:	6023      	str	r3, [r4, #0]
 8007190:	6831      	ldr	r1, [r6, #0]
 8007192:	ab03      	add	r3, sp, #12
 8007194:	2202      	movs	r2, #2
 8007196:	7809      	ldrb	r1, [r1, #0]
 8007198:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800719c:	f000 f9f1 	bl	8007582 <memchr>
 80071a0:	b328      	cbz	r0, 80071ee <_scanf_i+0xb6>
 80071a2:	f1bb 0f01 	cmp.w	fp, #1
 80071a6:	d159      	bne.n	800725c <_scanf_i+0x124>
 80071a8:	6862      	ldr	r2, [r4, #4]
 80071aa:	b92a      	cbnz	r2, 80071b8 <_scanf_i+0x80>
 80071ac:	2108      	movs	r1, #8
 80071ae:	6822      	ldr	r2, [r4, #0]
 80071b0:	6061      	str	r1, [r4, #4]
 80071b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80071b6:	6022      	str	r2, [r4, #0]
 80071b8:	6822      	ldr	r2, [r4, #0]
 80071ba:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 80071be:	6022      	str	r2, [r4, #0]
 80071c0:	68a2      	ldr	r2, [r4, #8]
 80071c2:	1e51      	subs	r1, r2, #1
 80071c4:	60a1      	str	r1, [r4, #8]
 80071c6:	b192      	cbz	r2, 80071ee <_scanf_i+0xb6>
 80071c8:	6832      	ldr	r2, [r6, #0]
 80071ca:	1c51      	adds	r1, r2, #1
 80071cc:	6031      	str	r1, [r6, #0]
 80071ce:	7812      	ldrb	r2, [r2, #0]
 80071d0:	f805 2b01 	strb.w	r2, [r5], #1
 80071d4:	6872      	ldr	r2, [r6, #4]
 80071d6:	3a01      	subs	r2, #1
 80071d8:	2a00      	cmp	r2, #0
 80071da:	6072      	str	r2, [r6, #4]
 80071dc:	dc07      	bgt.n	80071ee <_scanf_i+0xb6>
 80071de:	4631      	mov	r1, r6
 80071e0:	4650      	mov	r0, sl
 80071e2:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 80071e6:	4790      	blx	r2
 80071e8:	2800      	cmp	r0, #0
 80071ea:	f040 8085 	bne.w	80072f8 <_scanf_i+0x1c0>
 80071ee:	f10b 0b01 	add.w	fp, fp, #1
 80071f2:	f1bb 0f03 	cmp.w	fp, #3
 80071f6:	d1cb      	bne.n	8007190 <_scanf_i+0x58>
 80071f8:	6863      	ldr	r3, [r4, #4]
 80071fa:	b90b      	cbnz	r3, 8007200 <_scanf_i+0xc8>
 80071fc:	230a      	movs	r3, #10
 80071fe:	6063      	str	r3, [r4, #4]
 8007200:	6863      	ldr	r3, [r4, #4]
 8007202:	4945      	ldr	r1, [pc, #276]	@ (8007318 <_scanf_i+0x1e0>)
 8007204:	6960      	ldr	r0, [r4, #20]
 8007206:	1ac9      	subs	r1, r1, r3
 8007208:	f000 f930 	bl	800746c <__sccl>
 800720c:	f04f 0b00 	mov.w	fp, #0
 8007210:	68a3      	ldr	r3, [r4, #8]
 8007212:	6822      	ldr	r2, [r4, #0]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d03d      	beq.n	8007294 <_scanf_i+0x15c>
 8007218:	6831      	ldr	r1, [r6, #0]
 800721a:	6960      	ldr	r0, [r4, #20]
 800721c:	f891 c000 	ldrb.w	ip, [r1]
 8007220:	f810 000c 	ldrb.w	r0, [r0, ip]
 8007224:	2800      	cmp	r0, #0
 8007226:	d035      	beq.n	8007294 <_scanf_i+0x15c>
 8007228:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800722c:	d124      	bne.n	8007278 <_scanf_i+0x140>
 800722e:	0510      	lsls	r0, r2, #20
 8007230:	d522      	bpl.n	8007278 <_scanf_i+0x140>
 8007232:	f10b 0b01 	add.w	fp, fp, #1
 8007236:	f1b9 0f00 	cmp.w	r9, #0
 800723a:	d003      	beq.n	8007244 <_scanf_i+0x10c>
 800723c:	3301      	adds	r3, #1
 800723e:	f109 39ff 	add.w	r9, r9, #4294967295
 8007242:	60a3      	str	r3, [r4, #8]
 8007244:	6873      	ldr	r3, [r6, #4]
 8007246:	3b01      	subs	r3, #1
 8007248:	2b00      	cmp	r3, #0
 800724a:	6073      	str	r3, [r6, #4]
 800724c:	dd1b      	ble.n	8007286 <_scanf_i+0x14e>
 800724e:	6833      	ldr	r3, [r6, #0]
 8007250:	3301      	adds	r3, #1
 8007252:	6033      	str	r3, [r6, #0]
 8007254:	68a3      	ldr	r3, [r4, #8]
 8007256:	3b01      	subs	r3, #1
 8007258:	60a3      	str	r3, [r4, #8]
 800725a:	e7d9      	b.n	8007210 <_scanf_i+0xd8>
 800725c:	f1bb 0f02 	cmp.w	fp, #2
 8007260:	d1ae      	bne.n	80071c0 <_scanf_i+0x88>
 8007262:	6822      	ldr	r2, [r4, #0]
 8007264:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8007268:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800726c:	d1bf      	bne.n	80071ee <_scanf_i+0xb6>
 800726e:	2110      	movs	r1, #16
 8007270:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007274:	6061      	str	r1, [r4, #4]
 8007276:	e7a2      	b.n	80071be <_scanf_i+0x86>
 8007278:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800727c:	6022      	str	r2, [r4, #0]
 800727e:	780b      	ldrb	r3, [r1, #0]
 8007280:	f805 3b01 	strb.w	r3, [r5], #1
 8007284:	e7de      	b.n	8007244 <_scanf_i+0x10c>
 8007286:	4631      	mov	r1, r6
 8007288:	4650      	mov	r0, sl
 800728a:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800728e:	4798      	blx	r3
 8007290:	2800      	cmp	r0, #0
 8007292:	d0df      	beq.n	8007254 <_scanf_i+0x11c>
 8007294:	6823      	ldr	r3, [r4, #0]
 8007296:	05d9      	lsls	r1, r3, #23
 8007298:	d50d      	bpl.n	80072b6 <_scanf_i+0x17e>
 800729a:	42bd      	cmp	r5, r7
 800729c:	d909      	bls.n	80072b2 <_scanf_i+0x17a>
 800729e:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80072a2:	4632      	mov	r2, r6
 80072a4:	4650      	mov	r0, sl
 80072a6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80072aa:	f105 39ff 	add.w	r9, r5, #4294967295
 80072ae:	4798      	blx	r3
 80072b0:	464d      	mov	r5, r9
 80072b2:	42bd      	cmp	r5, r7
 80072b4:	d028      	beq.n	8007308 <_scanf_i+0x1d0>
 80072b6:	6822      	ldr	r2, [r4, #0]
 80072b8:	f012 0210 	ands.w	r2, r2, #16
 80072bc:	d113      	bne.n	80072e6 <_scanf_i+0x1ae>
 80072be:	702a      	strb	r2, [r5, #0]
 80072c0:	4639      	mov	r1, r7
 80072c2:	6863      	ldr	r3, [r4, #4]
 80072c4:	4650      	mov	r0, sl
 80072c6:	9e01      	ldr	r6, [sp, #4]
 80072c8:	47b0      	blx	r6
 80072ca:	f8d8 3000 	ldr.w	r3, [r8]
 80072ce:	6821      	ldr	r1, [r4, #0]
 80072d0:	1d1a      	adds	r2, r3, #4
 80072d2:	f8c8 2000 	str.w	r2, [r8]
 80072d6:	f011 0f20 	tst.w	r1, #32
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	d00f      	beq.n	80072fe <_scanf_i+0x1c6>
 80072de:	6018      	str	r0, [r3, #0]
 80072e0:	68e3      	ldr	r3, [r4, #12]
 80072e2:	3301      	adds	r3, #1
 80072e4:	60e3      	str	r3, [r4, #12]
 80072e6:	2000      	movs	r0, #0
 80072e8:	6923      	ldr	r3, [r4, #16]
 80072ea:	1bed      	subs	r5, r5, r7
 80072ec:	445d      	add	r5, fp
 80072ee:	442b      	add	r3, r5
 80072f0:	6123      	str	r3, [r4, #16]
 80072f2:	b007      	add	sp, #28
 80072f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072f8:	f04f 0b00 	mov.w	fp, #0
 80072fc:	e7ca      	b.n	8007294 <_scanf_i+0x15c>
 80072fe:	07ca      	lsls	r2, r1, #31
 8007300:	bf4c      	ite	mi
 8007302:	8018      	strhmi	r0, [r3, #0]
 8007304:	6018      	strpl	r0, [r3, #0]
 8007306:	e7eb      	b.n	80072e0 <_scanf_i+0x1a8>
 8007308:	2001      	movs	r0, #1
 800730a:	e7f2      	b.n	80072f2 <_scanf_i+0x1ba>
 800730c:	08007cfc 	.word	0x08007cfc
 8007310:	0800523d 	.word	0x0800523d
 8007314:	080076e1 	.word	0x080076e1
 8007318:	0800809b 	.word	0x0800809b

0800731c <__sflush_r>:
 800731c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007322:	0716      	lsls	r6, r2, #28
 8007324:	4605      	mov	r5, r0
 8007326:	460c      	mov	r4, r1
 8007328:	d454      	bmi.n	80073d4 <__sflush_r+0xb8>
 800732a:	684b      	ldr	r3, [r1, #4]
 800732c:	2b00      	cmp	r3, #0
 800732e:	dc02      	bgt.n	8007336 <__sflush_r+0x1a>
 8007330:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007332:	2b00      	cmp	r3, #0
 8007334:	dd48      	ble.n	80073c8 <__sflush_r+0xac>
 8007336:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007338:	2e00      	cmp	r6, #0
 800733a:	d045      	beq.n	80073c8 <__sflush_r+0xac>
 800733c:	2300      	movs	r3, #0
 800733e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007342:	682f      	ldr	r7, [r5, #0]
 8007344:	6a21      	ldr	r1, [r4, #32]
 8007346:	602b      	str	r3, [r5, #0]
 8007348:	d030      	beq.n	80073ac <__sflush_r+0x90>
 800734a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800734c:	89a3      	ldrh	r3, [r4, #12]
 800734e:	0759      	lsls	r1, r3, #29
 8007350:	d505      	bpl.n	800735e <__sflush_r+0x42>
 8007352:	6863      	ldr	r3, [r4, #4]
 8007354:	1ad2      	subs	r2, r2, r3
 8007356:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007358:	b10b      	cbz	r3, 800735e <__sflush_r+0x42>
 800735a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800735c:	1ad2      	subs	r2, r2, r3
 800735e:	2300      	movs	r3, #0
 8007360:	4628      	mov	r0, r5
 8007362:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007364:	6a21      	ldr	r1, [r4, #32]
 8007366:	47b0      	blx	r6
 8007368:	1c43      	adds	r3, r0, #1
 800736a:	89a3      	ldrh	r3, [r4, #12]
 800736c:	d106      	bne.n	800737c <__sflush_r+0x60>
 800736e:	6829      	ldr	r1, [r5, #0]
 8007370:	291d      	cmp	r1, #29
 8007372:	d82b      	bhi.n	80073cc <__sflush_r+0xb0>
 8007374:	4a28      	ldr	r2, [pc, #160]	@ (8007418 <__sflush_r+0xfc>)
 8007376:	410a      	asrs	r2, r1
 8007378:	07d6      	lsls	r6, r2, #31
 800737a:	d427      	bmi.n	80073cc <__sflush_r+0xb0>
 800737c:	2200      	movs	r2, #0
 800737e:	6062      	str	r2, [r4, #4]
 8007380:	6922      	ldr	r2, [r4, #16]
 8007382:	04d9      	lsls	r1, r3, #19
 8007384:	6022      	str	r2, [r4, #0]
 8007386:	d504      	bpl.n	8007392 <__sflush_r+0x76>
 8007388:	1c42      	adds	r2, r0, #1
 800738a:	d101      	bne.n	8007390 <__sflush_r+0x74>
 800738c:	682b      	ldr	r3, [r5, #0]
 800738e:	b903      	cbnz	r3, 8007392 <__sflush_r+0x76>
 8007390:	6560      	str	r0, [r4, #84]	@ 0x54
 8007392:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007394:	602f      	str	r7, [r5, #0]
 8007396:	b1b9      	cbz	r1, 80073c8 <__sflush_r+0xac>
 8007398:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800739c:	4299      	cmp	r1, r3
 800739e:	d002      	beq.n	80073a6 <__sflush_r+0x8a>
 80073a0:	4628      	mov	r0, r5
 80073a2:	f7fe f96d 	bl	8005680 <_free_r>
 80073a6:	2300      	movs	r3, #0
 80073a8:	6363      	str	r3, [r4, #52]	@ 0x34
 80073aa:	e00d      	b.n	80073c8 <__sflush_r+0xac>
 80073ac:	2301      	movs	r3, #1
 80073ae:	4628      	mov	r0, r5
 80073b0:	47b0      	blx	r6
 80073b2:	4602      	mov	r2, r0
 80073b4:	1c50      	adds	r0, r2, #1
 80073b6:	d1c9      	bne.n	800734c <__sflush_r+0x30>
 80073b8:	682b      	ldr	r3, [r5, #0]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d0c6      	beq.n	800734c <__sflush_r+0x30>
 80073be:	2b1d      	cmp	r3, #29
 80073c0:	d001      	beq.n	80073c6 <__sflush_r+0xaa>
 80073c2:	2b16      	cmp	r3, #22
 80073c4:	d11d      	bne.n	8007402 <__sflush_r+0xe6>
 80073c6:	602f      	str	r7, [r5, #0]
 80073c8:	2000      	movs	r0, #0
 80073ca:	e021      	b.n	8007410 <__sflush_r+0xf4>
 80073cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80073d0:	b21b      	sxth	r3, r3
 80073d2:	e01a      	b.n	800740a <__sflush_r+0xee>
 80073d4:	690f      	ldr	r7, [r1, #16]
 80073d6:	2f00      	cmp	r7, #0
 80073d8:	d0f6      	beq.n	80073c8 <__sflush_r+0xac>
 80073da:	0793      	lsls	r3, r2, #30
 80073dc:	bf18      	it	ne
 80073de:	2300      	movne	r3, #0
 80073e0:	680e      	ldr	r6, [r1, #0]
 80073e2:	bf08      	it	eq
 80073e4:	694b      	ldreq	r3, [r1, #20]
 80073e6:	1bf6      	subs	r6, r6, r7
 80073e8:	600f      	str	r7, [r1, #0]
 80073ea:	608b      	str	r3, [r1, #8]
 80073ec:	2e00      	cmp	r6, #0
 80073ee:	ddeb      	ble.n	80073c8 <__sflush_r+0xac>
 80073f0:	4633      	mov	r3, r6
 80073f2:	463a      	mov	r2, r7
 80073f4:	4628      	mov	r0, r5
 80073f6:	6a21      	ldr	r1, [r4, #32]
 80073f8:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80073fc:	47e0      	blx	ip
 80073fe:	2800      	cmp	r0, #0
 8007400:	dc07      	bgt.n	8007412 <__sflush_r+0xf6>
 8007402:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007406:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800740a:	f04f 30ff 	mov.w	r0, #4294967295
 800740e:	81a3      	strh	r3, [r4, #12]
 8007410:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007412:	4407      	add	r7, r0
 8007414:	1a36      	subs	r6, r6, r0
 8007416:	e7e9      	b.n	80073ec <__sflush_r+0xd0>
 8007418:	dfbffffe 	.word	0xdfbffffe

0800741c <_fflush_r>:
 800741c:	b538      	push	{r3, r4, r5, lr}
 800741e:	690b      	ldr	r3, [r1, #16]
 8007420:	4605      	mov	r5, r0
 8007422:	460c      	mov	r4, r1
 8007424:	b913      	cbnz	r3, 800742c <_fflush_r+0x10>
 8007426:	2500      	movs	r5, #0
 8007428:	4628      	mov	r0, r5
 800742a:	bd38      	pop	{r3, r4, r5, pc}
 800742c:	b118      	cbz	r0, 8007436 <_fflush_r+0x1a>
 800742e:	6a03      	ldr	r3, [r0, #32]
 8007430:	b90b      	cbnz	r3, 8007436 <_fflush_r+0x1a>
 8007432:	f7fd ff9b 	bl	800536c <__sinit>
 8007436:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d0f3      	beq.n	8007426 <_fflush_r+0xa>
 800743e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007440:	07d0      	lsls	r0, r2, #31
 8007442:	d404      	bmi.n	800744e <_fflush_r+0x32>
 8007444:	0599      	lsls	r1, r3, #22
 8007446:	d402      	bmi.n	800744e <_fflush_r+0x32>
 8007448:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800744a:	f7fe f902 	bl	8005652 <__retarget_lock_acquire_recursive>
 800744e:	4628      	mov	r0, r5
 8007450:	4621      	mov	r1, r4
 8007452:	f7ff ff63 	bl	800731c <__sflush_r>
 8007456:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007458:	4605      	mov	r5, r0
 800745a:	07da      	lsls	r2, r3, #31
 800745c:	d4e4      	bmi.n	8007428 <_fflush_r+0xc>
 800745e:	89a3      	ldrh	r3, [r4, #12]
 8007460:	059b      	lsls	r3, r3, #22
 8007462:	d4e1      	bmi.n	8007428 <_fflush_r+0xc>
 8007464:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007466:	f7fe f8f5 	bl	8005654 <__retarget_lock_release_recursive>
 800746a:	e7dd      	b.n	8007428 <_fflush_r+0xc>

0800746c <__sccl>:
 800746c:	b570      	push	{r4, r5, r6, lr}
 800746e:	780b      	ldrb	r3, [r1, #0]
 8007470:	4604      	mov	r4, r0
 8007472:	2b5e      	cmp	r3, #94	@ 0x5e
 8007474:	bf0b      	itete	eq
 8007476:	784b      	ldrbeq	r3, [r1, #1]
 8007478:	1c4a      	addne	r2, r1, #1
 800747a:	1c8a      	addeq	r2, r1, #2
 800747c:	2100      	movne	r1, #0
 800747e:	bf08      	it	eq
 8007480:	2101      	moveq	r1, #1
 8007482:	3801      	subs	r0, #1
 8007484:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8007488:	f800 1f01 	strb.w	r1, [r0, #1]!
 800748c:	42a8      	cmp	r0, r5
 800748e:	d1fb      	bne.n	8007488 <__sccl+0x1c>
 8007490:	b90b      	cbnz	r3, 8007496 <__sccl+0x2a>
 8007492:	1e50      	subs	r0, r2, #1
 8007494:	bd70      	pop	{r4, r5, r6, pc}
 8007496:	f081 0101 	eor.w	r1, r1, #1
 800749a:	4610      	mov	r0, r2
 800749c:	54e1      	strb	r1, [r4, r3]
 800749e:	4602      	mov	r2, r0
 80074a0:	f812 5b01 	ldrb.w	r5, [r2], #1
 80074a4:	2d2d      	cmp	r5, #45	@ 0x2d
 80074a6:	d005      	beq.n	80074b4 <__sccl+0x48>
 80074a8:	2d5d      	cmp	r5, #93	@ 0x5d
 80074aa:	d016      	beq.n	80074da <__sccl+0x6e>
 80074ac:	2d00      	cmp	r5, #0
 80074ae:	d0f1      	beq.n	8007494 <__sccl+0x28>
 80074b0:	462b      	mov	r3, r5
 80074b2:	e7f2      	b.n	800749a <__sccl+0x2e>
 80074b4:	7846      	ldrb	r6, [r0, #1]
 80074b6:	2e5d      	cmp	r6, #93	@ 0x5d
 80074b8:	d0fa      	beq.n	80074b0 <__sccl+0x44>
 80074ba:	42b3      	cmp	r3, r6
 80074bc:	dcf8      	bgt.n	80074b0 <__sccl+0x44>
 80074be:	461a      	mov	r2, r3
 80074c0:	3002      	adds	r0, #2
 80074c2:	3201      	adds	r2, #1
 80074c4:	4296      	cmp	r6, r2
 80074c6:	54a1      	strb	r1, [r4, r2]
 80074c8:	dcfb      	bgt.n	80074c2 <__sccl+0x56>
 80074ca:	1af2      	subs	r2, r6, r3
 80074cc:	3a01      	subs	r2, #1
 80074ce:	42b3      	cmp	r3, r6
 80074d0:	bfa8      	it	ge
 80074d2:	2200      	movge	r2, #0
 80074d4:	1c5d      	adds	r5, r3, #1
 80074d6:	18ab      	adds	r3, r5, r2
 80074d8:	e7e1      	b.n	800749e <__sccl+0x32>
 80074da:	4610      	mov	r0, r2
 80074dc:	e7da      	b.n	8007494 <__sccl+0x28>

080074de <__submore>:
 80074de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074e2:	460c      	mov	r4, r1
 80074e4:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80074e6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80074ea:	4299      	cmp	r1, r3
 80074ec:	d11b      	bne.n	8007526 <__submore+0x48>
 80074ee:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80074f2:	f7fc ff61 	bl	80043b8 <_malloc_r>
 80074f6:	b918      	cbnz	r0, 8007500 <__submore+0x22>
 80074f8:	f04f 30ff 	mov.w	r0, #4294967295
 80074fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007500:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007504:	63a3      	str	r3, [r4, #56]	@ 0x38
 8007506:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800750a:	6360      	str	r0, [r4, #52]	@ 0x34
 800750c:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8007510:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8007514:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8007518:	7043      	strb	r3, [r0, #1]
 800751a:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800751e:	7003      	strb	r3, [r0, #0]
 8007520:	6020      	str	r0, [r4, #0]
 8007522:	2000      	movs	r0, #0
 8007524:	e7ea      	b.n	80074fc <__submore+0x1e>
 8007526:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8007528:	0077      	lsls	r7, r6, #1
 800752a:	463a      	mov	r2, r7
 800752c:	f7fc ffd8 	bl	80044e0 <_realloc_r>
 8007530:	4605      	mov	r5, r0
 8007532:	2800      	cmp	r0, #0
 8007534:	d0e0      	beq.n	80074f8 <__submore+0x1a>
 8007536:	eb00 0806 	add.w	r8, r0, r6
 800753a:	4601      	mov	r1, r0
 800753c:	4632      	mov	r2, r6
 800753e:	4640      	mov	r0, r8
 8007540:	f7fe f889 	bl	8005656 <memcpy>
 8007544:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8007548:	f8c4 8000 	str.w	r8, [r4]
 800754c:	e7e9      	b.n	8007522 <__submore+0x44>

0800754e <memmove>:
 800754e:	4288      	cmp	r0, r1
 8007550:	b510      	push	{r4, lr}
 8007552:	eb01 0402 	add.w	r4, r1, r2
 8007556:	d902      	bls.n	800755e <memmove+0x10>
 8007558:	4284      	cmp	r4, r0
 800755a:	4623      	mov	r3, r4
 800755c:	d807      	bhi.n	800756e <memmove+0x20>
 800755e:	1e43      	subs	r3, r0, #1
 8007560:	42a1      	cmp	r1, r4
 8007562:	d008      	beq.n	8007576 <memmove+0x28>
 8007564:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007568:	f803 2f01 	strb.w	r2, [r3, #1]!
 800756c:	e7f8      	b.n	8007560 <memmove+0x12>
 800756e:	4601      	mov	r1, r0
 8007570:	4402      	add	r2, r0
 8007572:	428a      	cmp	r2, r1
 8007574:	d100      	bne.n	8007578 <memmove+0x2a>
 8007576:	bd10      	pop	{r4, pc}
 8007578:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800757c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007580:	e7f7      	b.n	8007572 <memmove+0x24>

08007582 <memchr>:
 8007582:	4603      	mov	r3, r0
 8007584:	b510      	push	{r4, lr}
 8007586:	b2c9      	uxtb	r1, r1
 8007588:	4402      	add	r2, r0
 800758a:	4293      	cmp	r3, r2
 800758c:	4618      	mov	r0, r3
 800758e:	d101      	bne.n	8007594 <memchr+0x12>
 8007590:	2000      	movs	r0, #0
 8007592:	e003      	b.n	800759c <memchr+0x1a>
 8007594:	7804      	ldrb	r4, [r0, #0]
 8007596:	3301      	adds	r3, #1
 8007598:	428c      	cmp	r4, r1
 800759a:	d1f6      	bne.n	800758a <memchr+0x8>
 800759c:	bd10      	pop	{r4, pc}
	...

080075a0 <__assert_func>:
 80075a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80075a2:	4614      	mov	r4, r2
 80075a4:	461a      	mov	r2, r3
 80075a6:	4b09      	ldr	r3, [pc, #36]	@ (80075cc <__assert_func+0x2c>)
 80075a8:	4605      	mov	r5, r0
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	68d8      	ldr	r0, [r3, #12]
 80075ae:	b954      	cbnz	r4, 80075c6 <__assert_func+0x26>
 80075b0:	4b07      	ldr	r3, [pc, #28]	@ (80075d0 <__assert_func+0x30>)
 80075b2:	461c      	mov	r4, r3
 80075b4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80075b8:	9100      	str	r1, [sp, #0]
 80075ba:	462b      	mov	r3, r5
 80075bc:	4905      	ldr	r1, [pc, #20]	@ (80075d4 <__assert_func+0x34>)
 80075be:	f000 f891 	bl	80076e4 <fiprintf>
 80075c2:	f000 f8a1 	bl	8007708 <abort>
 80075c6:	4b04      	ldr	r3, [pc, #16]	@ (80075d8 <__assert_func+0x38>)
 80075c8:	e7f4      	b.n	80075b4 <__assert_func+0x14>
 80075ca:	bf00      	nop
 80075cc:	200001a0 	.word	0x200001a0
 80075d0:	080080e1 	.word	0x080080e1
 80075d4:	080080b3 	.word	0x080080b3
 80075d8:	080080a6 	.word	0x080080a6

080075dc <_calloc_r>:
 80075dc:	b570      	push	{r4, r5, r6, lr}
 80075de:	fba1 5402 	umull	r5, r4, r1, r2
 80075e2:	b93c      	cbnz	r4, 80075f4 <_calloc_r+0x18>
 80075e4:	4629      	mov	r1, r5
 80075e6:	f7fc fee7 	bl	80043b8 <_malloc_r>
 80075ea:	4606      	mov	r6, r0
 80075ec:	b928      	cbnz	r0, 80075fa <_calloc_r+0x1e>
 80075ee:	2600      	movs	r6, #0
 80075f0:	4630      	mov	r0, r6
 80075f2:	bd70      	pop	{r4, r5, r6, pc}
 80075f4:	220c      	movs	r2, #12
 80075f6:	6002      	str	r2, [r0, #0]
 80075f8:	e7f9      	b.n	80075ee <_calloc_r+0x12>
 80075fa:	462a      	mov	r2, r5
 80075fc:	4621      	mov	r1, r4
 80075fe:	f7fd ff7a 	bl	80054f6 <memset>
 8007602:	e7f5      	b.n	80075f0 <_calloc_r+0x14>

08007604 <_strtoul_l.constprop.0>:
 8007604:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007608:	4686      	mov	lr, r0
 800760a:	460d      	mov	r5, r1
 800760c:	4e33      	ldr	r6, [pc, #204]	@ (80076dc <_strtoul_l.constprop.0+0xd8>)
 800760e:	4628      	mov	r0, r5
 8007610:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007614:	5d37      	ldrb	r7, [r6, r4]
 8007616:	f017 0708 	ands.w	r7, r7, #8
 800761a:	d1f8      	bne.n	800760e <_strtoul_l.constprop.0+0xa>
 800761c:	2c2d      	cmp	r4, #45	@ 0x2d
 800761e:	d12f      	bne.n	8007680 <_strtoul_l.constprop.0+0x7c>
 8007620:	2701      	movs	r7, #1
 8007622:	782c      	ldrb	r4, [r5, #0]
 8007624:	1c85      	adds	r5, r0, #2
 8007626:	f033 0010 	bics.w	r0, r3, #16
 800762a:	d109      	bne.n	8007640 <_strtoul_l.constprop.0+0x3c>
 800762c:	2c30      	cmp	r4, #48	@ 0x30
 800762e:	d12c      	bne.n	800768a <_strtoul_l.constprop.0+0x86>
 8007630:	7828      	ldrb	r0, [r5, #0]
 8007632:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8007636:	2858      	cmp	r0, #88	@ 0x58
 8007638:	d127      	bne.n	800768a <_strtoul_l.constprop.0+0x86>
 800763a:	2310      	movs	r3, #16
 800763c:	786c      	ldrb	r4, [r5, #1]
 800763e:	3502      	adds	r5, #2
 8007640:	f04f 38ff 	mov.w	r8, #4294967295
 8007644:	fbb8 f8f3 	udiv	r8, r8, r3
 8007648:	2600      	movs	r6, #0
 800764a:	fb03 f908 	mul.w	r9, r3, r8
 800764e:	4630      	mov	r0, r6
 8007650:	ea6f 0909 	mvn.w	r9, r9
 8007654:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8007658:	f1bc 0f09 	cmp.w	ip, #9
 800765c:	d81c      	bhi.n	8007698 <_strtoul_l.constprop.0+0x94>
 800765e:	4664      	mov	r4, ip
 8007660:	42a3      	cmp	r3, r4
 8007662:	dd2a      	ble.n	80076ba <_strtoul_l.constprop.0+0xb6>
 8007664:	f1b6 3fff 	cmp.w	r6, #4294967295
 8007668:	d007      	beq.n	800767a <_strtoul_l.constprop.0+0x76>
 800766a:	4580      	cmp	r8, r0
 800766c:	d322      	bcc.n	80076b4 <_strtoul_l.constprop.0+0xb0>
 800766e:	d101      	bne.n	8007674 <_strtoul_l.constprop.0+0x70>
 8007670:	45a1      	cmp	r9, r4
 8007672:	db1f      	blt.n	80076b4 <_strtoul_l.constprop.0+0xb0>
 8007674:	2601      	movs	r6, #1
 8007676:	fb00 4003 	mla	r0, r0, r3, r4
 800767a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800767e:	e7e9      	b.n	8007654 <_strtoul_l.constprop.0+0x50>
 8007680:	2c2b      	cmp	r4, #43	@ 0x2b
 8007682:	bf04      	itt	eq
 8007684:	782c      	ldrbeq	r4, [r5, #0]
 8007686:	1c85      	addeq	r5, r0, #2
 8007688:	e7cd      	b.n	8007626 <_strtoul_l.constprop.0+0x22>
 800768a:	2b00      	cmp	r3, #0
 800768c:	d1d8      	bne.n	8007640 <_strtoul_l.constprop.0+0x3c>
 800768e:	2c30      	cmp	r4, #48	@ 0x30
 8007690:	bf0c      	ite	eq
 8007692:	2308      	moveq	r3, #8
 8007694:	230a      	movne	r3, #10
 8007696:	e7d3      	b.n	8007640 <_strtoul_l.constprop.0+0x3c>
 8007698:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800769c:	f1bc 0f19 	cmp.w	ip, #25
 80076a0:	d801      	bhi.n	80076a6 <_strtoul_l.constprop.0+0xa2>
 80076a2:	3c37      	subs	r4, #55	@ 0x37
 80076a4:	e7dc      	b.n	8007660 <_strtoul_l.constprop.0+0x5c>
 80076a6:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 80076aa:	f1bc 0f19 	cmp.w	ip, #25
 80076ae:	d804      	bhi.n	80076ba <_strtoul_l.constprop.0+0xb6>
 80076b0:	3c57      	subs	r4, #87	@ 0x57
 80076b2:	e7d5      	b.n	8007660 <_strtoul_l.constprop.0+0x5c>
 80076b4:	f04f 36ff 	mov.w	r6, #4294967295
 80076b8:	e7df      	b.n	800767a <_strtoul_l.constprop.0+0x76>
 80076ba:	1c73      	adds	r3, r6, #1
 80076bc:	d106      	bne.n	80076cc <_strtoul_l.constprop.0+0xc8>
 80076be:	2322      	movs	r3, #34	@ 0x22
 80076c0:	4630      	mov	r0, r6
 80076c2:	f8ce 3000 	str.w	r3, [lr]
 80076c6:	b932      	cbnz	r2, 80076d6 <_strtoul_l.constprop.0+0xd2>
 80076c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80076cc:	b107      	cbz	r7, 80076d0 <_strtoul_l.constprop.0+0xcc>
 80076ce:	4240      	negs	r0, r0
 80076d0:	2a00      	cmp	r2, #0
 80076d2:	d0f9      	beq.n	80076c8 <_strtoul_l.constprop.0+0xc4>
 80076d4:	b106      	cbz	r6, 80076d8 <_strtoul_l.constprop.0+0xd4>
 80076d6:	1e69      	subs	r1, r5, #1
 80076d8:	6011      	str	r1, [r2, #0]
 80076da:	e7f5      	b.n	80076c8 <_strtoul_l.constprop.0+0xc4>
 80076dc:	08007d71 	.word	0x08007d71

080076e0 <_strtoul_r>:
 80076e0:	f7ff bf90 	b.w	8007604 <_strtoul_l.constprop.0>

080076e4 <fiprintf>:
 80076e4:	b40e      	push	{r1, r2, r3}
 80076e6:	b503      	push	{r0, r1, lr}
 80076e8:	4601      	mov	r1, r0
 80076ea:	ab03      	add	r3, sp, #12
 80076ec:	4805      	ldr	r0, [pc, #20]	@ (8007704 <fiprintf+0x20>)
 80076ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80076f2:	6800      	ldr	r0, [r0, #0]
 80076f4:	9301      	str	r3, [sp, #4]
 80076f6:	f000 f835 	bl	8007764 <_vfiprintf_r>
 80076fa:	b002      	add	sp, #8
 80076fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8007700:	b003      	add	sp, #12
 8007702:	4770      	bx	lr
 8007704:	200001a0 	.word	0x200001a0

08007708 <abort>:
 8007708:	2006      	movs	r0, #6
 800770a:	b508      	push	{r3, lr}
 800770c:	f000 f9fe 	bl	8007b0c <raise>
 8007710:	2001      	movs	r0, #1
 8007712:	f7fc fd4a 	bl	80041aa <_exit>

08007716 <__sfputc_r>:
 8007716:	6893      	ldr	r3, [r2, #8]
 8007718:	b410      	push	{r4}
 800771a:	3b01      	subs	r3, #1
 800771c:	2b00      	cmp	r3, #0
 800771e:	6093      	str	r3, [r2, #8]
 8007720:	da07      	bge.n	8007732 <__sfputc_r+0x1c>
 8007722:	6994      	ldr	r4, [r2, #24]
 8007724:	42a3      	cmp	r3, r4
 8007726:	db01      	blt.n	800772c <__sfputc_r+0x16>
 8007728:	290a      	cmp	r1, #10
 800772a:	d102      	bne.n	8007732 <__sfputc_r+0x1c>
 800772c:	bc10      	pop	{r4}
 800772e:	f000 b931 	b.w	8007994 <__swbuf_r>
 8007732:	6813      	ldr	r3, [r2, #0]
 8007734:	1c58      	adds	r0, r3, #1
 8007736:	6010      	str	r0, [r2, #0]
 8007738:	7019      	strb	r1, [r3, #0]
 800773a:	4608      	mov	r0, r1
 800773c:	bc10      	pop	{r4}
 800773e:	4770      	bx	lr

08007740 <__sfputs_r>:
 8007740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007742:	4606      	mov	r6, r0
 8007744:	460f      	mov	r7, r1
 8007746:	4614      	mov	r4, r2
 8007748:	18d5      	adds	r5, r2, r3
 800774a:	42ac      	cmp	r4, r5
 800774c:	d101      	bne.n	8007752 <__sfputs_r+0x12>
 800774e:	2000      	movs	r0, #0
 8007750:	e007      	b.n	8007762 <__sfputs_r+0x22>
 8007752:	463a      	mov	r2, r7
 8007754:	4630      	mov	r0, r6
 8007756:	f814 1b01 	ldrb.w	r1, [r4], #1
 800775a:	f7ff ffdc 	bl	8007716 <__sfputc_r>
 800775e:	1c43      	adds	r3, r0, #1
 8007760:	d1f3      	bne.n	800774a <__sfputs_r+0xa>
 8007762:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007764 <_vfiprintf_r>:
 8007764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007768:	460d      	mov	r5, r1
 800776a:	4614      	mov	r4, r2
 800776c:	4698      	mov	r8, r3
 800776e:	4606      	mov	r6, r0
 8007770:	b09d      	sub	sp, #116	@ 0x74
 8007772:	b118      	cbz	r0, 800777c <_vfiprintf_r+0x18>
 8007774:	6a03      	ldr	r3, [r0, #32]
 8007776:	b90b      	cbnz	r3, 800777c <_vfiprintf_r+0x18>
 8007778:	f7fd fdf8 	bl	800536c <__sinit>
 800777c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800777e:	07d9      	lsls	r1, r3, #31
 8007780:	d405      	bmi.n	800778e <_vfiprintf_r+0x2a>
 8007782:	89ab      	ldrh	r3, [r5, #12]
 8007784:	059a      	lsls	r2, r3, #22
 8007786:	d402      	bmi.n	800778e <_vfiprintf_r+0x2a>
 8007788:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800778a:	f7fd ff62 	bl	8005652 <__retarget_lock_acquire_recursive>
 800778e:	89ab      	ldrh	r3, [r5, #12]
 8007790:	071b      	lsls	r3, r3, #28
 8007792:	d501      	bpl.n	8007798 <_vfiprintf_r+0x34>
 8007794:	692b      	ldr	r3, [r5, #16]
 8007796:	b99b      	cbnz	r3, 80077c0 <_vfiprintf_r+0x5c>
 8007798:	4629      	mov	r1, r5
 800779a:	4630      	mov	r0, r6
 800779c:	f000 f938 	bl	8007a10 <__swsetup_r>
 80077a0:	b170      	cbz	r0, 80077c0 <_vfiprintf_r+0x5c>
 80077a2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80077a4:	07dc      	lsls	r4, r3, #31
 80077a6:	d504      	bpl.n	80077b2 <_vfiprintf_r+0x4e>
 80077a8:	f04f 30ff 	mov.w	r0, #4294967295
 80077ac:	b01d      	add	sp, #116	@ 0x74
 80077ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80077b2:	89ab      	ldrh	r3, [r5, #12]
 80077b4:	0598      	lsls	r0, r3, #22
 80077b6:	d4f7      	bmi.n	80077a8 <_vfiprintf_r+0x44>
 80077b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80077ba:	f7fd ff4b 	bl	8005654 <__retarget_lock_release_recursive>
 80077be:	e7f3      	b.n	80077a8 <_vfiprintf_r+0x44>
 80077c0:	2300      	movs	r3, #0
 80077c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80077c4:	2320      	movs	r3, #32
 80077c6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80077ca:	2330      	movs	r3, #48	@ 0x30
 80077cc:	f04f 0901 	mov.w	r9, #1
 80077d0:	f8cd 800c 	str.w	r8, [sp, #12]
 80077d4:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8007980 <_vfiprintf_r+0x21c>
 80077d8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80077dc:	4623      	mov	r3, r4
 80077de:	469a      	mov	sl, r3
 80077e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80077e4:	b10a      	cbz	r2, 80077ea <_vfiprintf_r+0x86>
 80077e6:	2a25      	cmp	r2, #37	@ 0x25
 80077e8:	d1f9      	bne.n	80077de <_vfiprintf_r+0x7a>
 80077ea:	ebba 0b04 	subs.w	fp, sl, r4
 80077ee:	d00b      	beq.n	8007808 <_vfiprintf_r+0xa4>
 80077f0:	465b      	mov	r3, fp
 80077f2:	4622      	mov	r2, r4
 80077f4:	4629      	mov	r1, r5
 80077f6:	4630      	mov	r0, r6
 80077f8:	f7ff ffa2 	bl	8007740 <__sfputs_r>
 80077fc:	3001      	adds	r0, #1
 80077fe:	f000 80a7 	beq.w	8007950 <_vfiprintf_r+0x1ec>
 8007802:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007804:	445a      	add	r2, fp
 8007806:	9209      	str	r2, [sp, #36]	@ 0x24
 8007808:	f89a 3000 	ldrb.w	r3, [sl]
 800780c:	2b00      	cmp	r3, #0
 800780e:	f000 809f 	beq.w	8007950 <_vfiprintf_r+0x1ec>
 8007812:	2300      	movs	r3, #0
 8007814:	f04f 32ff 	mov.w	r2, #4294967295
 8007818:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800781c:	f10a 0a01 	add.w	sl, sl, #1
 8007820:	9304      	str	r3, [sp, #16]
 8007822:	9307      	str	r3, [sp, #28]
 8007824:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007828:	931a      	str	r3, [sp, #104]	@ 0x68
 800782a:	4654      	mov	r4, sl
 800782c:	2205      	movs	r2, #5
 800782e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007832:	4853      	ldr	r0, [pc, #332]	@ (8007980 <_vfiprintf_r+0x21c>)
 8007834:	f7ff fea5 	bl	8007582 <memchr>
 8007838:	9a04      	ldr	r2, [sp, #16]
 800783a:	b9d8      	cbnz	r0, 8007874 <_vfiprintf_r+0x110>
 800783c:	06d1      	lsls	r1, r2, #27
 800783e:	bf44      	itt	mi
 8007840:	2320      	movmi	r3, #32
 8007842:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007846:	0713      	lsls	r3, r2, #28
 8007848:	bf44      	itt	mi
 800784a:	232b      	movmi	r3, #43	@ 0x2b
 800784c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007850:	f89a 3000 	ldrb.w	r3, [sl]
 8007854:	2b2a      	cmp	r3, #42	@ 0x2a
 8007856:	d015      	beq.n	8007884 <_vfiprintf_r+0x120>
 8007858:	4654      	mov	r4, sl
 800785a:	2000      	movs	r0, #0
 800785c:	f04f 0c0a 	mov.w	ip, #10
 8007860:	9a07      	ldr	r2, [sp, #28]
 8007862:	4621      	mov	r1, r4
 8007864:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007868:	3b30      	subs	r3, #48	@ 0x30
 800786a:	2b09      	cmp	r3, #9
 800786c:	d94b      	bls.n	8007906 <_vfiprintf_r+0x1a2>
 800786e:	b1b0      	cbz	r0, 800789e <_vfiprintf_r+0x13a>
 8007870:	9207      	str	r2, [sp, #28]
 8007872:	e014      	b.n	800789e <_vfiprintf_r+0x13a>
 8007874:	eba0 0308 	sub.w	r3, r0, r8
 8007878:	fa09 f303 	lsl.w	r3, r9, r3
 800787c:	4313      	orrs	r3, r2
 800787e:	46a2      	mov	sl, r4
 8007880:	9304      	str	r3, [sp, #16]
 8007882:	e7d2      	b.n	800782a <_vfiprintf_r+0xc6>
 8007884:	9b03      	ldr	r3, [sp, #12]
 8007886:	1d19      	adds	r1, r3, #4
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	9103      	str	r1, [sp, #12]
 800788c:	2b00      	cmp	r3, #0
 800788e:	bfbb      	ittet	lt
 8007890:	425b      	neglt	r3, r3
 8007892:	f042 0202 	orrlt.w	r2, r2, #2
 8007896:	9307      	strge	r3, [sp, #28]
 8007898:	9307      	strlt	r3, [sp, #28]
 800789a:	bfb8      	it	lt
 800789c:	9204      	strlt	r2, [sp, #16]
 800789e:	7823      	ldrb	r3, [r4, #0]
 80078a0:	2b2e      	cmp	r3, #46	@ 0x2e
 80078a2:	d10a      	bne.n	80078ba <_vfiprintf_r+0x156>
 80078a4:	7863      	ldrb	r3, [r4, #1]
 80078a6:	2b2a      	cmp	r3, #42	@ 0x2a
 80078a8:	d132      	bne.n	8007910 <_vfiprintf_r+0x1ac>
 80078aa:	9b03      	ldr	r3, [sp, #12]
 80078ac:	3402      	adds	r4, #2
 80078ae:	1d1a      	adds	r2, r3, #4
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	9203      	str	r2, [sp, #12]
 80078b4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80078b8:	9305      	str	r3, [sp, #20]
 80078ba:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8007984 <_vfiprintf_r+0x220>
 80078be:	2203      	movs	r2, #3
 80078c0:	4650      	mov	r0, sl
 80078c2:	7821      	ldrb	r1, [r4, #0]
 80078c4:	f7ff fe5d 	bl	8007582 <memchr>
 80078c8:	b138      	cbz	r0, 80078da <_vfiprintf_r+0x176>
 80078ca:	2240      	movs	r2, #64	@ 0x40
 80078cc:	9b04      	ldr	r3, [sp, #16]
 80078ce:	eba0 000a 	sub.w	r0, r0, sl
 80078d2:	4082      	lsls	r2, r0
 80078d4:	4313      	orrs	r3, r2
 80078d6:	3401      	adds	r4, #1
 80078d8:	9304      	str	r3, [sp, #16]
 80078da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078de:	2206      	movs	r2, #6
 80078e0:	4829      	ldr	r0, [pc, #164]	@ (8007988 <_vfiprintf_r+0x224>)
 80078e2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80078e6:	f7ff fe4c 	bl	8007582 <memchr>
 80078ea:	2800      	cmp	r0, #0
 80078ec:	d03f      	beq.n	800796e <_vfiprintf_r+0x20a>
 80078ee:	4b27      	ldr	r3, [pc, #156]	@ (800798c <_vfiprintf_r+0x228>)
 80078f0:	bb1b      	cbnz	r3, 800793a <_vfiprintf_r+0x1d6>
 80078f2:	9b03      	ldr	r3, [sp, #12]
 80078f4:	3307      	adds	r3, #7
 80078f6:	f023 0307 	bic.w	r3, r3, #7
 80078fa:	3308      	adds	r3, #8
 80078fc:	9303      	str	r3, [sp, #12]
 80078fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007900:	443b      	add	r3, r7
 8007902:	9309      	str	r3, [sp, #36]	@ 0x24
 8007904:	e76a      	b.n	80077dc <_vfiprintf_r+0x78>
 8007906:	460c      	mov	r4, r1
 8007908:	2001      	movs	r0, #1
 800790a:	fb0c 3202 	mla	r2, ip, r2, r3
 800790e:	e7a8      	b.n	8007862 <_vfiprintf_r+0xfe>
 8007910:	2300      	movs	r3, #0
 8007912:	f04f 0c0a 	mov.w	ip, #10
 8007916:	4619      	mov	r1, r3
 8007918:	3401      	adds	r4, #1
 800791a:	9305      	str	r3, [sp, #20]
 800791c:	4620      	mov	r0, r4
 800791e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007922:	3a30      	subs	r2, #48	@ 0x30
 8007924:	2a09      	cmp	r2, #9
 8007926:	d903      	bls.n	8007930 <_vfiprintf_r+0x1cc>
 8007928:	2b00      	cmp	r3, #0
 800792a:	d0c6      	beq.n	80078ba <_vfiprintf_r+0x156>
 800792c:	9105      	str	r1, [sp, #20]
 800792e:	e7c4      	b.n	80078ba <_vfiprintf_r+0x156>
 8007930:	4604      	mov	r4, r0
 8007932:	2301      	movs	r3, #1
 8007934:	fb0c 2101 	mla	r1, ip, r1, r2
 8007938:	e7f0      	b.n	800791c <_vfiprintf_r+0x1b8>
 800793a:	ab03      	add	r3, sp, #12
 800793c:	9300      	str	r3, [sp, #0]
 800793e:	462a      	mov	r2, r5
 8007940:	4630      	mov	r0, r6
 8007942:	4b13      	ldr	r3, [pc, #76]	@ (8007990 <_vfiprintf_r+0x22c>)
 8007944:	a904      	add	r1, sp, #16
 8007946:	f3af 8000 	nop.w
 800794a:	4607      	mov	r7, r0
 800794c:	1c78      	adds	r0, r7, #1
 800794e:	d1d6      	bne.n	80078fe <_vfiprintf_r+0x19a>
 8007950:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007952:	07d9      	lsls	r1, r3, #31
 8007954:	d405      	bmi.n	8007962 <_vfiprintf_r+0x1fe>
 8007956:	89ab      	ldrh	r3, [r5, #12]
 8007958:	059a      	lsls	r2, r3, #22
 800795a:	d402      	bmi.n	8007962 <_vfiprintf_r+0x1fe>
 800795c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800795e:	f7fd fe79 	bl	8005654 <__retarget_lock_release_recursive>
 8007962:	89ab      	ldrh	r3, [r5, #12]
 8007964:	065b      	lsls	r3, r3, #25
 8007966:	f53f af1f 	bmi.w	80077a8 <_vfiprintf_r+0x44>
 800796a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800796c:	e71e      	b.n	80077ac <_vfiprintf_r+0x48>
 800796e:	ab03      	add	r3, sp, #12
 8007970:	9300      	str	r3, [sp, #0]
 8007972:	462a      	mov	r2, r5
 8007974:	4630      	mov	r0, r6
 8007976:	4b06      	ldr	r3, [pc, #24]	@ (8007990 <_vfiprintf_r+0x22c>)
 8007978:	a904      	add	r1, sp, #16
 800797a:	f7ff fa63 	bl	8006e44 <_printf_i>
 800797e:	e7e4      	b.n	800794a <_vfiprintf_r+0x1e6>
 8007980:	08008058 	.word	0x08008058
 8007984:	0800805e 	.word	0x0800805e
 8007988:	08008062 	.word	0x08008062
 800798c:	00000000 	.word	0x00000000
 8007990:	08007741 	.word	0x08007741

08007994 <__swbuf_r>:
 8007994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007996:	460e      	mov	r6, r1
 8007998:	4614      	mov	r4, r2
 800799a:	4605      	mov	r5, r0
 800799c:	b118      	cbz	r0, 80079a6 <__swbuf_r+0x12>
 800799e:	6a03      	ldr	r3, [r0, #32]
 80079a0:	b90b      	cbnz	r3, 80079a6 <__swbuf_r+0x12>
 80079a2:	f7fd fce3 	bl	800536c <__sinit>
 80079a6:	69a3      	ldr	r3, [r4, #24]
 80079a8:	60a3      	str	r3, [r4, #8]
 80079aa:	89a3      	ldrh	r3, [r4, #12]
 80079ac:	071a      	lsls	r2, r3, #28
 80079ae:	d501      	bpl.n	80079b4 <__swbuf_r+0x20>
 80079b0:	6923      	ldr	r3, [r4, #16]
 80079b2:	b943      	cbnz	r3, 80079c6 <__swbuf_r+0x32>
 80079b4:	4621      	mov	r1, r4
 80079b6:	4628      	mov	r0, r5
 80079b8:	f000 f82a 	bl	8007a10 <__swsetup_r>
 80079bc:	b118      	cbz	r0, 80079c6 <__swbuf_r+0x32>
 80079be:	f04f 37ff 	mov.w	r7, #4294967295
 80079c2:	4638      	mov	r0, r7
 80079c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80079c6:	6823      	ldr	r3, [r4, #0]
 80079c8:	6922      	ldr	r2, [r4, #16]
 80079ca:	b2f6      	uxtb	r6, r6
 80079cc:	1a98      	subs	r0, r3, r2
 80079ce:	6963      	ldr	r3, [r4, #20]
 80079d0:	4637      	mov	r7, r6
 80079d2:	4283      	cmp	r3, r0
 80079d4:	dc05      	bgt.n	80079e2 <__swbuf_r+0x4e>
 80079d6:	4621      	mov	r1, r4
 80079d8:	4628      	mov	r0, r5
 80079da:	f7ff fd1f 	bl	800741c <_fflush_r>
 80079de:	2800      	cmp	r0, #0
 80079e0:	d1ed      	bne.n	80079be <__swbuf_r+0x2a>
 80079e2:	68a3      	ldr	r3, [r4, #8]
 80079e4:	3b01      	subs	r3, #1
 80079e6:	60a3      	str	r3, [r4, #8]
 80079e8:	6823      	ldr	r3, [r4, #0]
 80079ea:	1c5a      	adds	r2, r3, #1
 80079ec:	6022      	str	r2, [r4, #0]
 80079ee:	701e      	strb	r6, [r3, #0]
 80079f0:	6962      	ldr	r2, [r4, #20]
 80079f2:	1c43      	adds	r3, r0, #1
 80079f4:	429a      	cmp	r2, r3
 80079f6:	d004      	beq.n	8007a02 <__swbuf_r+0x6e>
 80079f8:	89a3      	ldrh	r3, [r4, #12]
 80079fa:	07db      	lsls	r3, r3, #31
 80079fc:	d5e1      	bpl.n	80079c2 <__swbuf_r+0x2e>
 80079fe:	2e0a      	cmp	r6, #10
 8007a00:	d1df      	bne.n	80079c2 <__swbuf_r+0x2e>
 8007a02:	4621      	mov	r1, r4
 8007a04:	4628      	mov	r0, r5
 8007a06:	f7ff fd09 	bl	800741c <_fflush_r>
 8007a0a:	2800      	cmp	r0, #0
 8007a0c:	d0d9      	beq.n	80079c2 <__swbuf_r+0x2e>
 8007a0e:	e7d6      	b.n	80079be <__swbuf_r+0x2a>

08007a10 <__swsetup_r>:
 8007a10:	b538      	push	{r3, r4, r5, lr}
 8007a12:	4b29      	ldr	r3, [pc, #164]	@ (8007ab8 <__swsetup_r+0xa8>)
 8007a14:	4605      	mov	r5, r0
 8007a16:	6818      	ldr	r0, [r3, #0]
 8007a18:	460c      	mov	r4, r1
 8007a1a:	b118      	cbz	r0, 8007a24 <__swsetup_r+0x14>
 8007a1c:	6a03      	ldr	r3, [r0, #32]
 8007a1e:	b90b      	cbnz	r3, 8007a24 <__swsetup_r+0x14>
 8007a20:	f7fd fca4 	bl	800536c <__sinit>
 8007a24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a28:	0719      	lsls	r1, r3, #28
 8007a2a:	d422      	bmi.n	8007a72 <__swsetup_r+0x62>
 8007a2c:	06da      	lsls	r2, r3, #27
 8007a2e:	d407      	bmi.n	8007a40 <__swsetup_r+0x30>
 8007a30:	2209      	movs	r2, #9
 8007a32:	602a      	str	r2, [r5, #0]
 8007a34:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007a38:	f04f 30ff 	mov.w	r0, #4294967295
 8007a3c:	81a3      	strh	r3, [r4, #12]
 8007a3e:	e033      	b.n	8007aa8 <__swsetup_r+0x98>
 8007a40:	0758      	lsls	r0, r3, #29
 8007a42:	d512      	bpl.n	8007a6a <__swsetup_r+0x5a>
 8007a44:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007a46:	b141      	cbz	r1, 8007a5a <__swsetup_r+0x4a>
 8007a48:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007a4c:	4299      	cmp	r1, r3
 8007a4e:	d002      	beq.n	8007a56 <__swsetup_r+0x46>
 8007a50:	4628      	mov	r0, r5
 8007a52:	f7fd fe15 	bl	8005680 <_free_r>
 8007a56:	2300      	movs	r3, #0
 8007a58:	6363      	str	r3, [r4, #52]	@ 0x34
 8007a5a:	89a3      	ldrh	r3, [r4, #12]
 8007a5c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007a60:	81a3      	strh	r3, [r4, #12]
 8007a62:	2300      	movs	r3, #0
 8007a64:	6063      	str	r3, [r4, #4]
 8007a66:	6923      	ldr	r3, [r4, #16]
 8007a68:	6023      	str	r3, [r4, #0]
 8007a6a:	89a3      	ldrh	r3, [r4, #12]
 8007a6c:	f043 0308 	orr.w	r3, r3, #8
 8007a70:	81a3      	strh	r3, [r4, #12]
 8007a72:	6923      	ldr	r3, [r4, #16]
 8007a74:	b94b      	cbnz	r3, 8007a8a <__swsetup_r+0x7a>
 8007a76:	89a3      	ldrh	r3, [r4, #12]
 8007a78:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007a7c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007a80:	d003      	beq.n	8007a8a <__swsetup_r+0x7a>
 8007a82:	4621      	mov	r1, r4
 8007a84:	4628      	mov	r0, r5
 8007a86:	f000 f882 	bl	8007b8e <__smakebuf_r>
 8007a8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a8e:	f013 0201 	ands.w	r2, r3, #1
 8007a92:	d00a      	beq.n	8007aaa <__swsetup_r+0x9a>
 8007a94:	2200      	movs	r2, #0
 8007a96:	60a2      	str	r2, [r4, #8]
 8007a98:	6962      	ldr	r2, [r4, #20]
 8007a9a:	4252      	negs	r2, r2
 8007a9c:	61a2      	str	r2, [r4, #24]
 8007a9e:	6922      	ldr	r2, [r4, #16]
 8007aa0:	b942      	cbnz	r2, 8007ab4 <__swsetup_r+0xa4>
 8007aa2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007aa6:	d1c5      	bne.n	8007a34 <__swsetup_r+0x24>
 8007aa8:	bd38      	pop	{r3, r4, r5, pc}
 8007aaa:	0799      	lsls	r1, r3, #30
 8007aac:	bf58      	it	pl
 8007aae:	6962      	ldrpl	r2, [r4, #20]
 8007ab0:	60a2      	str	r2, [r4, #8]
 8007ab2:	e7f4      	b.n	8007a9e <__swsetup_r+0x8e>
 8007ab4:	2000      	movs	r0, #0
 8007ab6:	e7f7      	b.n	8007aa8 <__swsetup_r+0x98>
 8007ab8:	200001a0 	.word	0x200001a0

08007abc <_raise_r>:
 8007abc:	291f      	cmp	r1, #31
 8007abe:	b538      	push	{r3, r4, r5, lr}
 8007ac0:	4605      	mov	r5, r0
 8007ac2:	460c      	mov	r4, r1
 8007ac4:	d904      	bls.n	8007ad0 <_raise_r+0x14>
 8007ac6:	2316      	movs	r3, #22
 8007ac8:	6003      	str	r3, [r0, #0]
 8007aca:	f04f 30ff 	mov.w	r0, #4294967295
 8007ace:	bd38      	pop	{r3, r4, r5, pc}
 8007ad0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007ad2:	b112      	cbz	r2, 8007ada <_raise_r+0x1e>
 8007ad4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007ad8:	b94b      	cbnz	r3, 8007aee <_raise_r+0x32>
 8007ada:	4628      	mov	r0, r5
 8007adc:	f000 f830 	bl	8007b40 <_getpid_r>
 8007ae0:	4622      	mov	r2, r4
 8007ae2:	4601      	mov	r1, r0
 8007ae4:	4628      	mov	r0, r5
 8007ae6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007aea:	f000 b817 	b.w	8007b1c <_kill_r>
 8007aee:	2b01      	cmp	r3, #1
 8007af0:	d00a      	beq.n	8007b08 <_raise_r+0x4c>
 8007af2:	1c59      	adds	r1, r3, #1
 8007af4:	d103      	bne.n	8007afe <_raise_r+0x42>
 8007af6:	2316      	movs	r3, #22
 8007af8:	6003      	str	r3, [r0, #0]
 8007afa:	2001      	movs	r0, #1
 8007afc:	e7e7      	b.n	8007ace <_raise_r+0x12>
 8007afe:	2100      	movs	r1, #0
 8007b00:	4620      	mov	r0, r4
 8007b02:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007b06:	4798      	blx	r3
 8007b08:	2000      	movs	r0, #0
 8007b0a:	e7e0      	b.n	8007ace <_raise_r+0x12>

08007b0c <raise>:
 8007b0c:	4b02      	ldr	r3, [pc, #8]	@ (8007b18 <raise+0xc>)
 8007b0e:	4601      	mov	r1, r0
 8007b10:	6818      	ldr	r0, [r3, #0]
 8007b12:	f7ff bfd3 	b.w	8007abc <_raise_r>
 8007b16:	bf00      	nop
 8007b18:	200001a0 	.word	0x200001a0

08007b1c <_kill_r>:
 8007b1c:	b538      	push	{r3, r4, r5, lr}
 8007b1e:	2300      	movs	r3, #0
 8007b20:	4d06      	ldr	r5, [pc, #24]	@ (8007b3c <_kill_r+0x20>)
 8007b22:	4604      	mov	r4, r0
 8007b24:	4608      	mov	r0, r1
 8007b26:	4611      	mov	r1, r2
 8007b28:	602b      	str	r3, [r5, #0]
 8007b2a:	f7fc fb2e 	bl	800418a <_kill>
 8007b2e:	1c43      	adds	r3, r0, #1
 8007b30:	d102      	bne.n	8007b38 <_kill_r+0x1c>
 8007b32:	682b      	ldr	r3, [r5, #0]
 8007b34:	b103      	cbz	r3, 8007b38 <_kill_r+0x1c>
 8007b36:	6023      	str	r3, [r4, #0]
 8007b38:	bd38      	pop	{r3, r4, r5, pc}
 8007b3a:	bf00      	nop
 8007b3c:	200003e4 	.word	0x200003e4

08007b40 <_getpid_r>:
 8007b40:	f7fc bb1c 	b.w	800417c <_getpid>

08007b44 <__swhatbuf_r>:
 8007b44:	b570      	push	{r4, r5, r6, lr}
 8007b46:	460c      	mov	r4, r1
 8007b48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b4c:	4615      	mov	r5, r2
 8007b4e:	2900      	cmp	r1, #0
 8007b50:	461e      	mov	r6, r3
 8007b52:	b096      	sub	sp, #88	@ 0x58
 8007b54:	da0c      	bge.n	8007b70 <__swhatbuf_r+0x2c>
 8007b56:	89a3      	ldrh	r3, [r4, #12]
 8007b58:	2100      	movs	r1, #0
 8007b5a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007b5e:	bf14      	ite	ne
 8007b60:	2340      	movne	r3, #64	@ 0x40
 8007b62:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007b66:	2000      	movs	r0, #0
 8007b68:	6031      	str	r1, [r6, #0]
 8007b6a:	602b      	str	r3, [r5, #0]
 8007b6c:	b016      	add	sp, #88	@ 0x58
 8007b6e:	bd70      	pop	{r4, r5, r6, pc}
 8007b70:	466a      	mov	r2, sp
 8007b72:	f000 f849 	bl	8007c08 <_fstat_r>
 8007b76:	2800      	cmp	r0, #0
 8007b78:	dbed      	blt.n	8007b56 <__swhatbuf_r+0x12>
 8007b7a:	9901      	ldr	r1, [sp, #4]
 8007b7c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007b80:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007b84:	4259      	negs	r1, r3
 8007b86:	4159      	adcs	r1, r3
 8007b88:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007b8c:	e7eb      	b.n	8007b66 <__swhatbuf_r+0x22>

08007b8e <__smakebuf_r>:
 8007b8e:	898b      	ldrh	r3, [r1, #12]
 8007b90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007b92:	079d      	lsls	r5, r3, #30
 8007b94:	4606      	mov	r6, r0
 8007b96:	460c      	mov	r4, r1
 8007b98:	d507      	bpl.n	8007baa <__smakebuf_r+0x1c>
 8007b9a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007b9e:	6023      	str	r3, [r4, #0]
 8007ba0:	6123      	str	r3, [r4, #16]
 8007ba2:	2301      	movs	r3, #1
 8007ba4:	6163      	str	r3, [r4, #20]
 8007ba6:	b003      	add	sp, #12
 8007ba8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007baa:	466a      	mov	r2, sp
 8007bac:	ab01      	add	r3, sp, #4
 8007bae:	f7ff ffc9 	bl	8007b44 <__swhatbuf_r>
 8007bb2:	9f00      	ldr	r7, [sp, #0]
 8007bb4:	4605      	mov	r5, r0
 8007bb6:	4639      	mov	r1, r7
 8007bb8:	4630      	mov	r0, r6
 8007bba:	f7fc fbfd 	bl	80043b8 <_malloc_r>
 8007bbe:	b948      	cbnz	r0, 8007bd4 <__smakebuf_r+0x46>
 8007bc0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007bc4:	059a      	lsls	r2, r3, #22
 8007bc6:	d4ee      	bmi.n	8007ba6 <__smakebuf_r+0x18>
 8007bc8:	f023 0303 	bic.w	r3, r3, #3
 8007bcc:	f043 0302 	orr.w	r3, r3, #2
 8007bd0:	81a3      	strh	r3, [r4, #12]
 8007bd2:	e7e2      	b.n	8007b9a <__smakebuf_r+0xc>
 8007bd4:	89a3      	ldrh	r3, [r4, #12]
 8007bd6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007bda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007bde:	81a3      	strh	r3, [r4, #12]
 8007be0:	9b01      	ldr	r3, [sp, #4]
 8007be2:	6020      	str	r0, [r4, #0]
 8007be4:	b15b      	cbz	r3, 8007bfe <__smakebuf_r+0x70>
 8007be6:	4630      	mov	r0, r6
 8007be8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007bec:	f000 f81e 	bl	8007c2c <_isatty_r>
 8007bf0:	b128      	cbz	r0, 8007bfe <__smakebuf_r+0x70>
 8007bf2:	89a3      	ldrh	r3, [r4, #12]
 8007bf4:	f023 0303 	bic.w	r3, r3, #3
 8007bf8:	f043 0301 	orr.w	r3, r3, #1
 8007bfc:	81a3      	strh	r3, [r4, #12]
 8007bfe:	89a3      	ldrh	r3, [r4, #12]
 8007c00:	431d      	orrs	r5, r3
 8007c02:	81a5      	strh	r5, [r4, #12]
 8007c04:	e7cf      	b.n	8007ba6 <__smakebuf_r+0x18>
	...

08007c08 <_fstat_r>:
 8007c08:	b538      	push	{r3, r4, r5, lr}
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	4d06      	ldr	r5, [pc, #24]	@ (8007c28 <_fstat_r+0x20>)
 8007c0e:	4604      	mov	r4, r0
 8007c10:	4608      	mov	r0, r1
 8007c12:	4611      	mov	r1, r2
 8007c14:	602b      	str	r3, [r5, #0]
 8007c16:	f7fc fb17 	bl	8004248 <_fstat>
 8007c1a:	1c43      	adds	r3, r0, #1
 8007c1c:	d102      	bne.n	8007c24 <_fstat_r+0x1c>
 8007c1e:	682b      	ldr	r3, [r5, #0]
 8007c20:	b103      	cbz	r3, 8007c24 <_fstat_r+0x1c>
 8007c22:	6023      	str	r3, [r4, #0]
 8007c24:	bd38      	pop	{r3, r4, r5, pc}
 8007c26:	bf00      	nop
 8007c28:	200003e4 	.word	0x200003e4

08007c2c <_isatty_r>:
 8007c2c:	b538      	push	{r3, r4, r5, lr}
 8007c2e:	2300      	movs	r3, #0
 8007c30:	4d05      	ldr	r5, [pc, #20]	@ (8007c48 <_isatty_r+0x1c>)
 8007c32:	4604      	mov	r4, r0
 8007c34:	4608      	mov	r0, r1
 8007c36:	602b      	str	r3, [r5, #0]
 8007c38:	f7fc fb15 	bl	8004266 <_isatty>
 8007c3c:	1c43      	adds	r3, r0, #1
 8007c3e:	d102      	bne.n	8007c46 <_isatty_r+0x1a>
 8007c40:	682b      	ldr	r3, [r5, #0]
 8007c42:	b103      	cbz	r3, 8007c46 <_isatty_r+0x1a>
 8007c44:	6023      	str	r3, [r4, #0]
 8007c46:	bd38      	pop	{r3, r4, r5, pc}
 8007c48:	200003e4 	.word	0x200003e4

08007c4c <_init>:
 8007c4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c4e:	bf00      	nop
 8007c50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c52:	bc08      	pop	{r3}
 8007c54:	469e      	mov	lr, r3
 8007c56:	4770      	bx	lr

08007c58 <_fini>:
 8007c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c5a:	bf00      	nop
 8007c5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c5e:	bc08      	pop	{r3}
 8007c60:	469e      	mov	lr, r3
 8007c62:	4770      	bx	lr

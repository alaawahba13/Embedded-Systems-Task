
HiringTask.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001ed0  08000130  08000130  00001130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  08002000  08002000  00003000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002050  08002050  0000406c  2**0
                  CONTENTS
  4 .ARM          00000000  08002050  08002050  0000406c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002050  08002050  0000406c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002050  08002050  00003050  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002054  08002054  00003054  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08002058  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001f0  2000006c  080020c4  0000406c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000025c  080020c4  0000425c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000406c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002a2a  00000000  00000000  00004095  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001012  00000000  00000000  00006abf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000003b0  00000000  00000000  00007ad8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000296  00000000  00000000  00007e88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002ff5  00000000  00000000  0000811e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006052  00000000  00000000  0000b113  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000b638  00000000  00000000  00011165  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0001c79d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000110c  00000000  00000000  0001c7e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  0001d8ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	@ (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	@ (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	@ (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	2000006c 	.word	0x2000006c
 800014c:	00000000 	.word	0x00000000
 8000150:	08001fe8 	.word	0x08001fe8

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	@ (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	@ (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	@ (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000070 	.word	0x20000070
 800016c:	08001fe8 	.word	0x08001fe8

08000170 <lcd_init>:
	GPIO_WritePin(LCD_CONTROL_PORT, REGISTER_SELECT, PIN_LOW);
	// STEP THREE
	lcd_kick();
}

void lcd_init() {
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
	 * 7. Send command 8BIT or 4BIT
	 * 8. Go to Entry Mode
	 */

	// you must wait for the hardware to initialize
	STK_init();
 8000174:	f001 f802 	bl	800117c <STK_init>

	STK_delayMs(20);
 8000178:	2014      	movs	r0, #20
 800017a:	f001 f823 	bl	80011c4 <STK_delayMs>
	pinConfig.MODE = MODE_OUTPUT_PP;
	pinConfig.Output_Speed = SPEED_10M;
	GPIO_init(LCD_PORT, &pinConfig);
#endif

	pinConfig.Pin_Number = D4;
 800017e:	4b37      	ldr	r3, [pc, #220]	@ (800025c <lcd_init+0xec>)
 8000180:	2210      	movs	r2, #16
 8000182:	801a      	strh	r2, [r3, #0]
	pinConfig.MODE = MODE_OUTPUT_PP;
 8000184:	4b35      	ldr	r3, [pc, #212]	@ (800025c <lcd_init+0xec>)
 8000186:	2204      	movs	r2, #4
 8000188:	709a      	strb	r2, [r3, #2]
	pinConfig.Output_Speed = SPEED_10M;
 800018a:	4b34      	ldr	r3, [pc, #208]	@ (800025c <lcd_init+0xec>)
 800018c:	2201      	movs	r2, #1
 800018e:	70da      	strb	r2, [r3, #3]
	GPIO_init(LCD_PORT, &pinConfig);
 8000190:	4932      	ldr	r1, [pc, #200]	@ (800025c <lcd_init+0xec>)
 8000192:	4833      	ldr	r0, [pc, #204]	@ (8000260 <lcd_init+0xf0>)
 8000194:	f000 fda8 	bl	8000ce8 <GPIO_init>

	pinConfig.Pin_Number = D5;
 8000198:	4b30      	ldr	r3, [pc, #192]	@ (800025c <lcd_init+0xec>)
 800019a:	2220      	movs	r2, #32
 800019c:	801a      	strh	r2, [r3, #0]
	pinConfig.MODE = MODE_OUTPUT_PP;
 800019e:	4b2f      	ldr	r3, [pc, #188]	@ (800025c <lcd_init+0xec>)
 80001a0:	2204      	movs	r2, #4
 80001a2:	709a      	strb	r2, [r3, #2]
	pinConfig.Output_Speed = SPEED_10M;
 80001a4:	4b2d      	ldr	r3, [pc, #180]	@ (800025c <lcd_init+0xec>)
 80001a6:	2201      	movs	r2, #1
 80001a8:	70da      	strb	r2, [r3, #3]
	GPIO_init(LCD_PORT, &pinConfig);
 80001aa:	492c      	ldr	r1, [pc, #176]	@ (800025c <lcd_init+0xec>)
 80001ac:	482c      	ldr	r0, [pc, #176]	@ (8000260 <lcd_init+0xf0>)
 80001ae:	f000 fd9b 	bl	8000ce8 <GPIO_init>

	pinConfig.Pin_Number = D6;
 80001b2:	4b2a      	ldr	r3, [pc, #168]	@ (800025c <lcd_init+0xec>)
 80001b4:	2240      	movs	r2, #64	@ 0x40
 80001b6:	801a      	strh	r2, [r3, #0]
	pinConfig.MODE = MODE_OUTPUT_PP;
 80001b8:	4b28      	ldr	r3, [pc, #160]	@ (800025c <lcd_init+0xec>)
 80001ba:	2204      	movs	r2, #4
 80001bc:	709a      	strb	r2, [r3, #2]
	pinConfig.Output_Speed = SPEED_10M;
 80001be:	4b27      	ldr	r3, [pc, #156]	@ (800025c <lcd_init+0xec>)
 80001c0:	2201      	movs	r2, #1
 80001c2:	70da      	strb	r2, [r3, #3]
	GPIO_init(LCD_PORT, &pinConfig);
 80001c4:	4925      	ldr	r1, [pc, #148]	@ (800025c <lcd_init+0xec>)
 80001c6:	4826      	ldr	r0, [pc, #152]	@ (8000260 <lcd_init+0xf0>)
 80001c8:	f000 fd8e 	bl	8000ce8 <GPIO_init>

	pinConfig.Pin_Number = D7;
 80001cc:	4b23      	ldr	r3, [pc, #140]	@ (800025c <lcd_init+0xec>)
 80001ce:	2280      	movs	r2, #128	@ 0x80
 80001d0:	801a      	strh	r2, [r3, #0]
	pinConfig.MODE = MODE_OUTPUT_PP;
 80001d2:	4b22      	ldr	r3, [pc, #136]	@ (800025c <lcd_init+0xec>)
 80001d4:	2204      	movs	r2, #4
 80001d6:	709a      	strb	r2, [r3, #2]
	pinConfig.Output_Speed = SPEED_10M;
 80001d8:	4b20      	ldr	r3, [pc, #128]	@ (800025c <lcd_init+0xec>)
 80001da:	2201      	movs	r2, #1
 80001dc:	70da      	strb	r2, [r3, #3]
	GPIO_init(LCD_PORT, &pinConfig);
 80001de:	491f      	ldr	r1, [pc, #124]	@ (800025c <lcd_init+0xec>)
 80001e0:	481f      	ldr	r0, [pc, #124]	@ (8000260 <lcd_init+0xf0>)
 80001e2:	f000 fd81 	bl	8000ce8 <GPIO_init>

	// set three control pins as output and write 0
	pinConfig.MODE = MODE_OUTPUT_PP;
 80001e6:	4b1d      	ldr	r3, [pc, #116]	@ (800025c <lcd_init+0xec>)
 80001e8:	2204      	movs	r2, #4
 80001ea:	709a      	strb	r2, [r3, #2]
	pinConfig.Pin_Number = ENABLE_SWITCH;
 80001ec:	4b1b      	ldr	r3, [pc, #108]	@ (800025c <lcd_init+0xec>)
 80001ee:	2204      	movs	r2, #4
 80001f0:	801a      	strh	r2, [r3, #0]
	pinConfig.Output_Speed = SPEED_10M;
 80001f2:	4b1a      	ldr	r3, [pc, #104]	@ (800025c <lcd_init+0xec>)
 80001f4:	2201      	movs	r2, #1
 80001f6:	70da      	strb	r2, [r3, #3]
	GPIO_init(LCD_CONTROL_PORT, &pinConfig);
 80001f8:	4918      	ldr	r1, [pc, #96]	@ (800025c <lcd_init+0xec>)
 80001fa:	4819      	ldr	r0, [pc, #100]	@ (8000260 <lcd_init+0xf0>)
 80001fc:	f000 fd74 	bl	8000ce8 <GPIO_init>
	GPIO_WritePin(LCD_CONTROL_PORT, ENABLE_SWITCH, PIN_LOW);
 8000200:	2200      	movs	r2, #0
 8000202:	2104      	movs	r1, #4
 8000204:	4816      	ldr	r0, [pc, #88]	@ (8000260 <lcd_init+0xf0>)
 8000206:	f000 fdeb 	bl	8000de0 <GPIO_WritePin>

	pinConfig.MODE = MODE_OUTPUT_PP;
 800020a:	4b14      	ldr	r3, [pc, #80]	@ (800025c <lcd_init+0xec>)
 800020c:	2204      	movs	r2, #4
 800020e:	709a      	strb	r2, [r3, #2]
	pinConfig.Pin_Number = REGISTER_SELECT;
 8000210:	4b12      	ldr	r3, [pc, #72]	@ (800025c <lcd_init+0xec>)
 8000212:	2208      	movs	r2, #8
 8000214:	801a      	strh	r2, [r3, #0]
	pinConfig.Output_Speed = SPEED_10M;
 8000216:	4b11      	ldr	r3, [pc, #68]	@ (800025c <lcd_init+0xec>)
 8000218:	2201      	movs	r2, #1
 800021a:	70da      	strb	r2, [r3, #3]
	GPIO_init(LCD_CONTROL_PORT, &pinConfig);
 800021c:	490f      	ldr	r1, [pc, #60]	@ (800025c <lcd_init+0xec>)
 800021e:	4810      	ldr	r0, [pc, #64]	@ (8000260 <lcd_init+0xf0>)
 8000220:	f000 fd62 	bl	8000ce8 <GPIO_init>
	GPIO_WritePin(LCD_CONTROL_PORT, REGISTER_SELECT, PIN_LOW);
 8000224:	2200      	movs	r2, #0
 8000226:	2108      	movs	r1, #8
 8000228:	480d      	ldr	r0, [pc, #52]	@ (8000260 <lcd_init+0xf0>)
 800022a:	f000 fdd9 	bl	8000de0 <GPIO_WritePin>

	STK_delayMs(15);
 800022e:	200f      	movs	r0, #15
 8000230:	f000 ffc8 	bl	80011c4 <STK_delayMs>
	lcd_Clear_Screen();
 8000234:	f000 f964 	bl	8000500 <lcd_Clear_Screen>
#ifdef EIGHT_BIT_MODE
	lcd_Send_Command(FUNCTION_8BIT_2LINES);
#endif
#ifdef FOUR_BIT_MODE
	// Command that initializes LCD as four bit mode
	lcd_Send_Command(0x02);
 8000238:	2002      	movs	r0, #2
 800023a:	f000 f813 	bl	8000264 <lcd_Send_Command>
	lcd_Send_Command(FUNCTION_4BIT_2LINES);
 800023e:	2028      	movs	r0, #40	@ 0x28
 8000240:	f000 f810 	bl	8000264 <lcd_Send_Command>
#endif
	lcd_Send_Command(ENTRY_MODE);
 8000244:	2006      	movs	r0, #6
 8000246:	f000 f80d 	bl	8000264 <lcd_Send_Command>
	lcd_Send_Command(CURSOR_FIRST_LINE);
 800024a:	2080      	movs	r0, #128	@ 0x80
 800024c:	f000 f80a 	bl	8000264 <lcd_Send_Command>
	lcd_Send_Command(DISPLAY_ON_CURSOR_BLINK);
 8000250:	200f      	movs	r0, #15
 8000252:	f000 f807 	bl	8000264 <lcd_Send_Command>

}
 8000256:	bf00      	nop
 8000258:	bd80      	pop	{r7, pc}
 800025a:	bf00      	nop
 800025c:	20000088 	.word	0x20000088
 8000260:	40010c00 	.word	0x40010c00

08000264 <lcd_Send_Command>:
void lcd_Send_Command(unsigned char command) {
 8000264:	b580      	push	{r7, lr}
 8000266:	b082      	sub	sp, #8
 8000268:	af00      	add	r7, sp, #0
 800026a:	4603      	mov	r3, r0
 800026c:	71fb      	strb	r3, [r7, #7]
	STK_delayMs(01);
	lcd_kick();
#endif

#ifdef FOUR_BIT_MODE
	GPIO_WritePin(LCD_CONTROL_PORT, REGISTER_SELECT, PIN_LOW);
 800026e:	2200      	movs	r2, #0
 8000270:	2108      	movs	r1, #8
 8000272:	482c      	ldr	r0, [pc, #176]	@ (8000324 <lcd_Send_Command+0xc0>)
 8000274:	f000 fdb4 	bl	8000de0 <GPIO_WritePin>

	GPIO_WritePin(LCD_PORT, D4, GET(command, 4));
 8000278:	79fb      	ldrb	r3, [r7, #7]
 800027a:	f003 0310 	and.w	r3, r3, #16
 800027e:	b2db      	uxtb	r3, r3
 8000280:	461a      	mov	r2, r3
 8000282:	2110      	movs	r1, #16
 8000284:	4827      	ldr	r0, [pc, #156]	@ (8000324 <lcd_Send_Command+0xc0>)
 8000286:	f000 fdab 	bl	8000de0 <GPIO_WritePin>
	GPIO_WritePin(LCD_PORT, D5, GET(command, 5));
 800028a:	79fb      	ldrb	r3, [r7, #7]
 800028c:	f003 0320 	and.w	r3, r3, #32
 8000290:	b2db      	uxtb	r3, r3
 8000292:	461a      	mov	r2, r3
 8000294:	2120      	movs	r1, #32
 8000296:	4823      	ldr	r0, [pc, #140]	@ (8000324 <lcd_Send_Command+0xc0>)
 8000298:	f000 fda2 	bl	8000de0 <GPIO_WritePin>
	GPIO_WritePin(LCD_PORT, D6, GET(command, 6));
 800029c:	79fb      	ldrb	r3, [r7, #7]
 800029e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80002a2:	b2db      	uxtb	r3, r3
 80002a4:	461a      	mov	r2, r3
 80002a6:	2140      	movs	r1, #64	@ 0x40
 80002a8:	481e      	ldr	r0, [pc, #120]	@ (8000324 <lcd_Send_Command+0xc0>)
 80002aa:	f000 fd99 	bl	8000de0 <GPIO_WritePin>
	GPIO_WritePin(LCD_PORT, D7, GET(command, 7));
 80002ae:	79fb      	ldrb	r3, [r7, #7]
 80002b0:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80002b4:	b2db      	uxtb	r3, r3
 80002b6:	461a      	mov	r2, r3
 80002b8:	2180      	movs	r1, #128	@ 0x80
 80002ba:	481a      	ldr	r0, [pc, #104]	@ (8000324 <lcd_Send_Command+0xc0>)
 80002bc:	f000 fd90 	bl	8000de0 <GPIO_WritePin>

	STK_delayMs(10);
 80002c0:	200a      	movs	r0, #10
 80002c2:	f000 ff7f 	bl	80011c4 <STK_delayMs>
	lcd_kick();
 80002c6:	f000 f93d 	bl	8000544 <lcd_kick>

	GPIO_WritePin(LCD_PORT, D4, GET(command, 0));
 80002ca:	79fb      	ldrb	r3, [r7, #7]
 80002cc:	f003 0301 	and.w	r3, r3, #1
 80002d0:	b2db      	uxtb	r3, r3
 80002d2:	461a      	mov	r2, r3
 80002d4:	2110      	movs	r1, #16
 80002d6:	4813      	ldr	r0, [pc, #76]	@ (8000324 <lcd_Send_Command+0xc0>)
 80002d8:	f000 fd82 	bl	8000de0 <GPIO_WritePin>
	GPIO_WritePin(LCD_PORT, D5, GET(command, 1));
 80002dc:	79fb      	ldrb	r3, [r7, #7]
 80002de:	f003 0302 	and.w	r3, r3, #2
 80002e2:	b2db      	uxtb	r3, r3
 80002e4:	461a      	mov	r2, r3
 80002e6:	2120      	movs	r1, #32
 80002e8:	480e      	ldr	r0, [pc, #56]	@ (8000324 <lcd_Send_Command+0xc0>)
 80002ea:	f000 fd79 	bl	8000de0 <GPIO_WritePin>
	GPIO_WritePin(LCD_PORT, D6, GET(command, 2));
 80002ee:	79fb      	ldrb	r3, [r7, #7]
 80002f0:	f003 0304 	and.w	r3, r3, #4
 80002f4:	b2db      	uxtb	r3, r3
 80002f6:	461a      	mov	r2, r3
 80002f8:	2140      	movs	r1, #64	@ 0x40
 80002fa:	480a      	ldr	r0, [pc, #40]	@ (8000324 <lcd_Send_Command+0xc0>)
 80002fc:	f000 fd70 	bl	8000de0 <GPIO_WritePin>
	GPIO_WritePin(LCD_PORT, D7, GET(command, 3));
 8000300:	79fb      	ldrb	r3, [r7, #7]
 8000302:	f003 0308 	and.w	r3, r3, #8
 8000306:	b2db      	uxtb	r3, r3
 8000308:	461a      	mov	r2, r3
 800030a:	2180      	movs	r1, #128	@ 0x80
 800030c:	4805      	ldr	r0, [pc, #20]	@ (8000324 <lcd_Send_Command+0xc0>)
 800030e:	f000 fd67 	bl	8000de0 <GPIO_WritePin>

	STK_delayMs(10);
 8000312:	200a      	movs	r0, #10
 8000314:	f000 ff56 	bl	80011c4 <STK_delayMs>
	lcd_kick();
 8000318:	f000 f914 	bl	8000544 <lcd_kick>
#endif
}
 800031c:	bf00      	nop
 800031e:	3708      	adds	r7, #8
 8000320:	46bd      	mov	sp, r7
 8000322:	bd80      	pop	{r7, pc}
 8000324:	40010c00 	.word	0x40010c00

08000328 <lcd_Send_Char>:
void lcd_Send_Char(unsigned char character) {
 8000328:	b580      	push	{r7, lr}
 800032a:	b082      	sub	sp, #8
 800032c:	af00      	add	r7, sp, #0
 800032e:	4603      	mov	r3, r0
 8000330:	71fb      	strb	r3, [r7, #7]
	STK_delayMs(10);
	lcd_kick();
#endif

#ifdef FOUR_BIT_MODE
	GPIO_WritePin(LCD_CONTROL_PORT, REGISTER_SELECT, PIN_HIGH);
 8000332:	2201      	movs	r2, #1
 8000334:	2108      	movs	r1, #8
 8000336:	4842      	ldr	r0, [pc, #264]	@ (8000440 <lcd_Send_Char+0x118>)
 8000338:	f000 fd52 	bl	8000de0 <GPIO_WritePin>

	GPIO_WritePin(LCD_PORT, D4, GET(character, 4));
 800033c:	79fb      	ldrb	r3, [r7, #7]
 800033e:	f003 0310 	and.w	r3, r3, #16
 8000342:	b2db      	uxtb	r3, r3
 8000344:	461a      	mov	r2, r3
 8000346:	2110      	movs	r1, #16
 8000348:	483d      	ldr	r0, [pc, #244]	@ (8000440 <lcd_Send_Char+0x118>)
 800034a:	f000 fd49 	bl	8000de0 <GPIO_WritePin>
	GPIO_WritePin(LCD_PORT, D5, GET(character, 5));
 800034e:	79fb      	ldrb	r3, [r7, #7]
 8000350:	f003 0320 	and.w	r3, r3, #32
 8000354:	b2db      	uxtb	r3, r3
 8000356:	461a      	mov	r2, r3
 8000358:	2120      	movs	r1, #32
 800035a:	4839      	ldr	r0, [pc, #228]	@ (8000440 <lcd_Send_Char+0x118>)
 800035c:	f000 fd40 	bl	8000de0 <GPIO_WritePin>
	GPIO_WritePin(LCD_PORT, D6, GET(character, 6));
 8000360:	79fb      	ldrb	r3, [r7, #7]
 8000362:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000366:	b2db      	uxtb	r3, r3
 8000368:	461a      	mov	r2, r3
 800036a:	2140      	movs	r1, #64	@ 0x40
 800036c:	4834      	ldr	r0, [pc, #208]	@ (8000440 <lcd_Send_Char+0x118>)
 800036e:	f000 fd37 	bl	8000de0 <GPIO_WritePin>
	GPIO_WritePin(LCD_PORT, D7, GET(character, 7));
 8000372:	79fb      	ldrb	r3, [r7, #7]
 8000374:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8000378:	b2db      	uxtb	r3, r3
 800037a:	461a      	mov	r2, r3
 800037c:	2180      	movs	r1, #128	@ 0x80
 800037e:	4830      	ldr	r0, [pc, #192]	@ (8000440 <lcd_Send_Char+0x118>)
 8000380:	f000 fd2e 	bl	8000de0 <GPIO_WritePin>
	STK_delayMs(10);
 8000384:	200a      	movs	r0, #10
 8000386:	f000 ff1d 	bl	80011c4 <STK_delayMs>
	lcd_kick();
 800038a:	f000 f8db 	bl	8000544 <lcd_kick>
	GPIO_WritePin(LCD_PORT, D4, GET(character, 0));
 800038e:	79fb      	ldrb	r3, [r7, #7]
 8000390:	f003 0301 	and.w	r3, r3, #1
 8000394:	b2db      	uxtb	r3, r3
 8000396:	461a      	mov	r2, r3
 8000398:	2110      	movs	r1, #16
 800039a:	4829      	ldr	r0, [pc, #164]	@ (8000440 <lcd_Send_Char+0x118>)
 800039c:	f000 fd20 	bl	8000de0 <GPIO_WritePin>
	GPIO_WritePin(LCD_PORT, D5, GET(character, 1));
 80003a0:	79fb      	ldrb	r3, [r7, #7]
 80003a2:	f003 0302 	and.w	r3, r3, #2
 80003a6:	b2db      	uxtb	r3, r3
 80003a8:	461a      	mov	r2, r3
 80003aa:	2120      	movs	r1, #32
 80003ac:	4824      	ldr	r0, [pc, #144]	@ (8000440 <lcd_Send_Char+0x118>)
 80003ae:	f000 fd17 	bl	8000de0 <GPIO_WritePin>
	GPIO_WritePin(LCD_PORT, D6, GET(character, 2));
 80003b2:	79fb      	ldrb	r3, [r7, #7]
 80003b4:	f003 0304 	and.w	r3, r3, #4
 80003b8:	b2db      	uxtb	r3, r3
 80003ba:	461a      	mov	r2, r3
 80003bc:	2140      	movs	r1, #64	@ 0x40
 80003be:	4820      	ldr	r0, [pc, #128]	@ (8000440 <lcd_Send_Char+0x118>)
 80003c0:	f000 fd0e 	bl	8000de0 <GPIO_WritePin>
	GPIO_WritePin(LCD_PORT, D7, GET(character, 3));
 80003c4:	79fb      	ldrb	r3, [r7, #7]
 80003c6:	f003 0308 	and.w	r3, r3, #8
 80003ca:	b2db      	uxtb	r3, r3
 80003cc:	461a      	mov	r2, r3
 80003ce:	2180      	movs	r1, #128	@ 0x80
 80003d0:	481b      	ldr	r0, [pc, #108]	@ (8000440 <lcd_Send_Char+0x118>)
 80003d2:	f000 fd05 	bl	8000de0 <GPIO_WritePin>
	STK_delayMs(10);
 80003d6:	200a      	movs	r0, #10
 80003d8:	f000 fef4 	bl	80011c4 <STK_delayMs>
	lcd_kick();
 80003dc:	f000 f8b2 	bl	8000544 <lcd_kick>
#endif

	if (count == MAX_COLS) {
 80003e0:	4b18      	ldr	r3, [pc, #96]	@ (8000444 <lcd_Send_Char+0x11c>)
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	2b14      	cmp	r3, #20
 80003e6:	d103      	bne.n	80003f0 <lcd_Send_Char+0xc8>
		lcd_GOTO_XY(1, 0);
 80003e8:	2100      	movs	r1, #0
 80003ea:	2001      	movs	r0, #1
 80003ec:	f000 f848 	bl	8000480 <lcd_GOTO_XY>
	}
#if (LCD_4x20 || LCD_4x16)
	if (count == MAX_COLS * 2) {
 80003f0:	4b14      	ldr	r3, [pc, #80]	@ (8000444 <lcd_Send_Char+0x11c>)
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	2b28      	cmp	r3, #40	@ 0x28
 80003f6:	d104      	bne.n	8000402 <lcd_Send_Char+0xda>
		lcd_GOTO_XY(2, 0);
 80003f8:	2100      	movs	r1, #0
 80003fa:	2002      	movs	r0, #2
 80003fc:	f000 f840 	bl	8000480 <lcd_GOTO_XY>
 8000400:	e015      	b.n	800042e <lcd_Send_Char+0x106>
	} else if (count == MAX_COLS * 3) {
 8000402:	4b10      	ldr	r3, [pc, #64]	@ (8000444 <lcd_Send_Char+0x11c>)
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	2b3c      	cmp	r3, #60	@ 0x3c
 8000408:	d104      	bne.n	8000414 <lcd_Send_Char+0xec>
		lcd_GOTO_XY(3, 0);
 800040a:	2100      	movs	r1, #0
 800040c:	2003      	movs	r0, #3
 800040e:	f000 f837 	bl	8000480 <lcd_GOTO_XY>
 8000412:	e00c      	b.n	800042e <lcd_Send_Char+0x106>
	}
#endif

	// if both lines are full clear and start over.
	else if (count == (MAX_COLS * MAX_ROWS)) {
 8000414:	4b0b      	ldr	r3, [pc, #44]	@ (8000444 <lcd_Send_Char+0x11c>)
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	2b50      	cmp	r3, #80	@ 0x50
 800041a:	d108      	bne.n	800042e <lcd_Send_Char+0x106>
		lcd_Clear_Screen();
 800041c:	f000 f870 	bl	8000500 <lcd_Clear_Screen>
		lcd_GOTO_XY(0, 0);
 8000420:	2100      	movs	r1, #0
 8000422:	2000      	movs	r0, #0
 8000424:	f000 f82c 	bl	8000480 <lcd_GOTO_XY>
		count = 0;
 8000428:	4b06      	ldr	r3, [pc, #24]	@ (8000444 <lcd_Send_Char+0x11c>)
 800042a:	2200      	movs	r2, #0
 800042c:	601a      	str	r2, [r3, #0]
	}

	count++;
 800042e:	4b05      	ldr	r3, [pc, #20]	@ (8000444 <lcd_Send_Char+0x11c>)
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	3301      	adds	r3, #1
 8000434:	4a03      	ldr	r2, [pc, #12]	@ (8000444 <lcd_Send_Char+0x11c>)
 8000436:	6013      	str	r3, [r2, #0]
}
 8000438:	bf00      	nop
 800043a:	3708      	adds	r7, #8
 800043c:	46bd      	mov	sp, r7
 800043e:	bd80      	pop	{r7, pc}
 8000440:	40010c00 	.word	0x40010c00
 8000444:	2000008c 	.word	0x2000008c

08000448 <lcd_send_String>:
void lcd_send_String(char *string) {
 8000448:	b580      	push	{r7, lr}
 800044a:	b082      	sub	sp, #8
 800044c:	af00      	add	r7, sp, #0
 800044e:	6078      	str	r0, [r7, #4]
	while (*string > 0) {
 8000450:	e00b      	b.n	800046a <lcd_send_String+0x22>
		count++;
 8000452:	4b0a      	ldr	r3, [pc, #40]	@ (800047c <lcd_send_String+0x34>)
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	3301      	adds	r3, #1
 8000458:	4a08      	ldr	r2, [pc, #32]	@ (800047c <lcd_send_String+0x34>)
 800045a:	6013      	str	r3, [r2, #0]
		lcd_Send_Char(*string++);
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	1c5a      	adds	r2, r3, #1
 8000460:	607a      	str	r2, [r7, #4]
 8000462:	781b      	ldrb	r3, [r3, #0]
 8000464:	4618      	mov	r0, r3
 8000466:	f7ff ff5f 	bl	8000328 <lcd_Send_Char>
	while (*string > 0) {
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	781b      	ldrb	r3, [r3, #0]
 800046e:	2b00      	cmp	r3, #0
 8000470:	d1ef      	bne.n	8000452 <lcd_send_String+0xa>

	}
}
 8000472:	bf00      	nop
 8000474:	bf00      	nop
 8000476:	3708      	adds	r7, #8
 8000478:	46bd      	mov	sp, r7
 800047a:	bd80      	pop	{r7, pc}
 800047c:	2000008c 	.word	0x2000008c

08000480 <lcd_GOTO_XY>:
void lcd_GOTO_XY(unsigned char row, unsigned char col) {
 8000480:	b580      	push	{r7, lr}
 8000482:	b082      	sub	sp, #8
 8000484:	af00      	add	r7, sp, #0
 8000486:	4603      	mov	r3, r0
 8000488:	460a      	mov	r2, r1
 800048a:	71fb      	strb	r3, [r7, #7]
 800048c:	4613      	mov	r3, r2
 800048e:	71bb      	strb	r3, [r7, #6]

	if (row == 0) {
 8000490:	79fb      	ldrb	r3, [r7, #7]
 8000492:	2b00      	cmp	r3, #0
 8000494:	d109      	bne.n	80004aa <lcd_GOTO_XY+0x2a>
		if ((col < MAX_COLS) && (col >= 0))
 8000496:	79bb      	ldrb	r3, [r7, #6]
 8000498:	2b13      	cmp	r3, #19
 800049a:	d82c      	bhi.n	80004f6 <lcd_GOTO_XY+0x76>
			lcd_Send_Command(CURSOR_FIRST_LINE + col);
 800049c:	79bb      	ldrb	r3, [r7, #6]
 800049e:	3b80      	subs	r3, #128	@ 0x80
 80004a0:	b2db      	uxtb	r3, r3
 80004a2:	4618      	mov	r0, r3
 80004a4:	f7ff fede 	bl	8000264 <lcd_Send_Command>
	} else if (row == 3) {
		if ((col < MAX_COLS) && (col >= 0))
			lcd_Send_Command(CURSOR_FOURTH_LINE + col);
	}
#endif
}
 80004a8:	e025      	b.n	80004f6 <lcd_GOTO_XY+0x76>
	} else if (row == 1) {
 80004aa:	79fb      	ldrb	r3, [r7, #7]
 80004ac:	2b01      	cmp	r3, #1
 80004ae:	d109      	bne.n	80004c4 <lcd_GOTO_XY+0x44>
		if ((col < MAX_COLS) && (col >= 0))
 80004b0:	79bb      	ldrb	r3, [r7, #6]
 80004b2:	2b13      	cmp	r3, #19
 80004b4:	d81f      	bhi.n	80004f6 <lcd_GOTO_XY+0x76>
			lcd_Send_Command(CURSOR_SECOND_LINE + col);
 80004b6:	79bb      	ldrb	r3, [r7, #6]
 80004b8:	3b40      	subs	r3, #64	@ 0x40
 80004ba:	b2db      	uxtb	r3, r3
 80004bc:	4618      	mov	r0, r3
 80004be:	f7ff fed1 	bl	8000264 <lcd_Send_Command>
}
 80004c2:	e018      	b.n	80004f6 <lcd_GOTO_XY+0x76>
	else if (row == 2) {
 80004c4:	79fb      	ldrb	r3, [r7, #7]
 80004c6:	2b02      	cmp	r3, #2
 80004c8:	d109      	bne.n	80004de <lcd_GOTO_XY+0x5e>
		if ((col < MAX_COLS) && (col >= 0))
 80004ca:	79bb      	ldrb	r3, [r7, #6]
 80004cc:	2b13      	cmp	r3, #19
 80004ce:	d812      	bhi.n	80004f6 <lcd_GOTO_XY+0x76>
			lcd_Send_Command(CURSOR_THIRD_LINE + col);
 80004d0:	79bb      	ldrb	r3, [r7, #6]
 80004d2:	3b6c      	subs	r3, #108	@ 0x6c
 80004d4:	b2db      	uxtb	r3, r3
 80004d6:	4618      	mov	r0, r3
 80004d8:	f7ff fec4 	bl	8000264 <lcd_Send_Command>
}
 80004dc:	e00b      	b.n	80004f6 <lcd_GOTO_XY+0x76>
	} else if (row == 3) {
 80004de:	79fb      	ldrb	r3, [r7, #7]
 80004e0:	2b03      	cmp	r3, #3
 80004e2:	d108      	bne.n	80004f6 <lcd_GOTO_XY+0x76>
		if ((col < MAX_COLS) && (col >= 0))
 80004e4:	79bb      	ldrb	r3, [r7, #6]
 80004e6:	2b13      	cmp	r3, #19
 80004e8:	d805      	bhi.n	80004f6 <lcd_GOTO_XY+0x76>
			lcd_Send_Command(CURSOR_FOURTH_LINE + col);
 80004ea:	79bb      	ldrb	r3, [r7, #6]
 80004ec:	3b2c      	subs	r3, #44	@ 0x2c
 80004ee:	b2db      	uxtb	r3, r3
 80004f0:	4618      	mov	r0, r3
 80004f2:	f7ff feb7 	bl	8000264 <lcd_Send_Command>
}
 80004f6:	bf00      	nop
 80004f8:	3708      	adds	r7, #8
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bd80      	pop	{r7, pc}
	...

08000500 <lcd_Clear_Screen>:
void lcd_Clear_Screen(void) {
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
	lcd_Send_Command(CLEAR_SCREEN);
 8000504:	2001      	movs	r0, #1
 8000506:	f7ff fead 	bl	8000264 <lcd_Send_Command>
	count = 0;
 800050a:	4b02      	ldr	r3, [pc, #8]	@ (8000514 <lcd_Clear_Screen+0x14>)
 800050c:	2200      	movs	r2, #0
 800050e:	601a      	str	r2, [r3, #0]
}
 8000510:	bf00      	nop
 8000512:	bd80      	pop	{r7, pc}
 8000514:	2000008c 	.word	0x2000008c

08000518 <lcd_display_number>:
void lcd_display_number(int Number) {
 8000518:	b580      	push	{r7, lr}
 800051a:	b084      	sub	sp, #16
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
	char str[7];
	// Converts Int to String
	sprintf(str, "%d", Number);
 8000520:	f107 0308 	add.w	r3, r7, #8
 8000524:	687a      	ldr	r2, [r7, #4]
 8000526:	4906      	ldr	r1, [pc, #24]	@ (8000540 <lcd_display_number+0x28>)
 8000528:	4618      	mov	r0, r3
 800052a:	f001 f991 	bl	8001850 <siprintf>
	lcd_send_String(str);
 800052e:	f107 0308 	add.w	r3, r7, #8
 8000532:	4618      	mov	r0, r3
 8000534:	f7ff ff88 	bl	8000448 <lcd_send_String>
}
 8000538:	bf00      	nop
 800053a:	3710      	adds	r7, #16
 800053c:	46bd      	mov	sp, r7
 800053e:	bd80      	pop	{r7, pc}
 8000540:	08002000 	.word	0x08002000

08000544 <lcd_kick>:

	sprintf(str, "%s%d.%02d", tmpSign, tmpVal, Frac);
	lcd_send_String(str);

}
void lcd_kick() {
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0
	// Enable =0 >> LCD Busy
	GPIO_WritePin(LCD_CONTROL_PORT, ENABLE_SWITCH, PIN_HIGH);
 8000548:	2201      	movs	r2, #1
 800054a:	2104      	movs	r1, #4
 800054c:	4806      	ldr	r0, [pc, #24]	@ (8000568 <lcd_kick+0x24>)
 800054e:	f000 fc47 	bl	8000de0 <GPIO_WritePin>
	STK_delayMs(50);
 8000552:	2032      	movs	r0, #50	@ 0x32
 8000554:	f000 fe36 	bl	80011c4 <STK_delayMs>
	GPIO_WritePin(LCD_CONTROL_PORT, ENABLE_SWITCH, PIN_LOW);
 8000558:	2200      	movs	r2, #0
 800055a:	2104      	movs	r1, #4
 800055c:	4802      	ldr	r0, [pc, #8]	@ (8000568 <lcd_kick+0x24>)
 800055e:	f000 fc3f 	bl	8000de0 <GPIO_WritePin>
}
 8000562:	bf00      	nop
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	40010c00 	.word	0x40010c00

0800056c <LDR_init>:
 */

#include "LDR.h"


void LDR_init(ADC_Registers_t* ADCx){
 800056c:	b580      	push	{r7, lr}
 800056e:	b082      	sub	sp, #8
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
	ADC_init(ADC1);
 8000574:	4803      	ldr	r0, [pc, #12]	@ (8000584 <LDR_init+0x18>)
 8000576:	f000 f835 	bl	80005e4 <ADC_init>
}
 800057a:	bf00      	nop
 800057c:	3708      	adds	r7, #8
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	40012400 	.word	0x40012400

08000588 <LM35_init>:
 */


#include "LM35.h"

void LM35_init(ADC_Registers_t* ADCx){
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
	ADC_init(ADCx);
 8000590:	6878      	ldr	r0, [r7, #4]
 8000592:	f000 f827 	bl	80005e4 <ADC_init>
}
 8000596:	bf00      	nop
 8000598:	3708      	adds	r7, #8
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}
	...

080005a0 <LM35_Read>:
uint16 LM35_Read(ADC_Registers_t* ADCx,ADC_CHANNEL_t CHx){
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b084      	sub	sp, #16
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
 80005a8:	460b      	mov	r3, r1
 80005aa:	70fb      	strb	r3, [r7, #3]
	uint16 data = ADC_read(ADCx, CHx);
 80005ac:	78fb      	ldrb	r3, [r7, #3]
 80005ae:	4619      	mov	r1, r3
 80005b0:	6878      	ldr	r0, [r7, #4]
 80005b2:	f000 f845 	bl	8000640 <ADC_read>
 80005b6:	4603      	mov	r3, r0
 80005b8:	81fb      	strh	r3, [r7, #14]

	/*
	 *data >>> mvolt
	  4095 >>> 3300
	 */
	uint16 temp = (data*165)/4095;
 80005ba:	89fa      	ldrh	r2, [r7, #14]
 80005bc:	4613      	mov	r3, r2
 80005be:	009b      	lsls	r3, r3, #2
 80005c0:	4413      	add	r3, r2
 80005c2:	015a      	lsls	r2, r3, #5
 80005c4:	4413      	add	r3, r2
 80005c6:	4a06      	ldr	r2, [pc, #24]	@ (80005e0 <LM35_Read+0x40>)
 80005c8:	fb82 1203 	smull	r1, r2, r2, r3
 80005cc:	441a      	add	r2, r3
 80005ce:	12d2      	asrs	r2, r2, #11
 80005d0:	17db      	asrs	r3, r3, #31
 80005d2:	1ad3      	subs	r3, r2, r3
 80005d4:	81bb      	strh	r3, [r7, #12]
	return temp;
 80005d6:	89bb      	ldrh	r3, [r7, #12]
}
 80005d8:	4618      	mov	r0, r3
 80005da:	3710      	adds	r7, #16
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	80080081 	.word	0x80080081

080005e4 <ADC_init>:
 * 							Generic Functions
 * =======================================================================================
 */

// single conversion mode only
void ADC_init(ADC_Registers_t *ADCx) {
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]

	//1. Enable ADC clock
	if (ADCx == ADC1) {
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	4a11      	ldr	r2, [pc, #68]	@ (8000634 <ADC_init+0x50>)
 80005f0:	4293      	cmp	r3, r2
 80005f2:	d104      	bne.n	80005fe <ADC_init+0x1a>
		RCC_CLK_EN(APB2_ID, ADC1_ID);
 80005f4:	2109      	movs	r1, #9
 80005f6:	2001      	movs	r0, #1
 80005f8:	f000 fd86 	bl	8001108 <RCC_CLK_EN>
 80005fc:	e010      	b.n	8000620 <ADC_init+0x3c>
	} else if (ADCx == ADC2) {
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	4a0d      	ldr	r2, [pc, #52]	@ (8000638 <ADC_init+0x54>)
 8000602:	4293      	cmp	r3, r2
 8000604:	d104      	bne.n	8000610 <ADC_init+0x2c>
		RCC_CLK_EN(APB2_ID, ADC2_ID);
 8000606:	210a      	movs	r1, #10
 8000608:	2001      	movs	r0, #1
 800060a:	f000 fd7d 	bl	8001108 <RCC_CLK_EN>
 800060e:	e007      	b.n	8000620 <ADC_init+0x3c>
	} else if (ADCx == ADC3) {
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	4a0a      	ldr	r2, [pc, #40]	@ (800063c <ADC_init+0x58>)
 8000614:	4293      	cmp	r3, r2
 8000616:	d103      	bne.n	8000620 <ADC_init+0x3c>
		RCC_CLK_EN(APB2_ID, ADC3_ID);
 8000618:	210f      	movs	r1, #15
 800061a:	2001      	movs	r0, #1
 800061c:	f000 fd74 	bl	8001108 <RCC_CLK_EN>
	}

	    ADCx->CR2 |= (1 << 0); // Enable ADC (ADON bit)
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	689b      	ldr	r3, [r3, #8]
 8000624:	f043 0201 	orr.w	r2, r3, #1
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	609a      	str	r2, [r3, #8]


}
 800062c:	bf00      	nop
 800062e:	3708      	adds	r7, #8
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	40012400 	.word	0x40012400
 8000638:	40012800 	.word	0x40012800
 800063c:	40013c00 	.word	0x40013c00

08000640 <ADC_read>:

uint16 ADC_read(ADC_Registers_t *ADCx, ADC_CHANNEL_t ADC_CHx) {
 8000640:	b580      	push	{r7, lr}
 8000642:	b084      	sub	sp, #16
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
 8000648:	460b      	mov	r3, r1
 800064a:	70fb      	strb	r3, [r7, #3]
	GPIO_PinConfig_t GPIO_pinConfig;
	GPIO_pinConfig.MODE = MODE_Analog;
 800064c:	2300      	movs	r3, #0
 800064e:	73bb      	strb	r3, [r7, #14]
	 /*channels from 10 to 17*/
	    if (ADC_CHx > ADC_CH9)
 8000650:	78fb      	ldrb	r3, [r7, #3]
 8000652:	2b09      	cmp	r3, #9
 8000654:	d91e      	bls.n	8000694 <ADC_read+0x54>
	    {
	        /* Clear the old channel sample time */
	    	ADCx->SMPR1 &= 0x7 << (3 * (ADC_CHx - 10));
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	68d9      	ldr	r1, [r3, #12]
 800065a:	78fb      	ldrb	r3, [r7, #3]
 800065c:	f1a3 020a 	sub.w	r2, r3, #10
 8000660:	4613      	mov	r3, r2
 8000662:	005b      	lsls	r3, r3, #1
 8000664:	4413      	add	r3, r2
 8000666:	2207      	movs	r2, #7
 8000668:	fa02 f303 	lsl.w	r3, r2, r3
 800066c:	ea01 0203 	and.w	r2, r1, r3
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	60da      	str	r2, [r3, #12]
	        /* Set the new channel sample time */
	        ADCx->SMPR1 |= (uint32)(0b11) << (3 * (ADC_CHx - 10));
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	68d9      	ldr	r1, [r3, #12]
 8000678:	78fb      	ldrb	r3, [r7, #3]
 800067a:	f1a3 020a 	sub.w	r2, r3, #10
 800067e:	4613      	mov	r3, r2
 8000680:	005b      	lsls	r3, r3, #1
 8000682:	4413      	add	r3, r2
 8000684:	2203      	movs	r2, #3
 8000686:	fa02 f303 	lsl.w	r3, r2, r3
 800068a:	ea41 0203 	orr.w	r2, r1, r3
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	60da      	str	r2, [r3, #12]
 8000692:	e019      	b.n	80006c8 <ADC_read+0x88>
	    }
	    else /*channels from 0 to 9 */
	    {
	        /* Clear the old channel  */
	    	ADCx->SMPR2 &= 0x7 << (3 * ADC_CHx);
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	6919      	ldr	r1, [r3, #16]
 8000698:	78fa      	ldrb	r2, [r7, #3]
 800069a:	4613      	mov	r3, r2
 800069c:	005b      	lsls	r3, r3, #1
 800069e:	4413      	add	r3, r2
 80006a0:	2207      	movs	r2, #7
 80006a2:	fa02 f303 	lsl.w	r3, r2, r3
 80006a6:	ea01 0203 	and.w	r2, r1, r3
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	611a      	str	r2, [r3, #16]
	        /* Set the new channel */
	    	ADCx->SMPR2 |= (uint32)(0b11) << (3 * ADC_CHx);
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	6919      	ldr	r1, [r3, #16]
 80006b2:	78fa      	ldrb	r2, [r7, #3]
 80006b4:	4613      	mov	r3, r2
 80006b6:	005b      	lsls	r3, r3, #1
 80006b8:	4413      	add	r3, r2
 80006ba:	2203      	movs	r2, #3
 80006bc:	fa02 f303 	lsl.w	r3, r2, r3
 80006c0:	ea41 0203 	orr.w	r2, r1, r3
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	611a      	str	r2, [r3, #16]
	    }
	switch (ADC_CHx) {
 80006c8:	78fb      	ldrb	r3, [r7, #3]
 80006ca:	2b0f      	cmp	r3, #15
 80006cc:	f200 80f4 	bhi.w	80008b8 <ADC_read+0x278>
 80006d0:	a201      	add	r2, pc, #4	@ (adr r2, 80006d8 <ADC_read+0x98>)
 80006d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006d6:	bf00      	nop
 80006d8:	08000719 	.word	0x08000719
 80006dc:	08000733 	.word	0x08000733
 80006e0:	0800074d 	.word	0x0800074d
 80006e4:	08000767 	.word	0x08000767
 80006e8:	08000781 	.word	0x08000781
 80006ec:	0800079b 	.word	0x0800079b
 80006f0:	080007b5 	.word	0x080007b5
 80006f4:	080007cf 	.word	0x080007cf
 80006f8:	080007e9 	.word	0x080007e9
 80006fc:	08000803 	.word	0x08000803
 8000700:	0800081d 	.word	0x0800081d
 8000704:	08000837 	.word	0x08000837
 8000708:	08000851 	.word	0x08000851
 800070c:	0800086b 	.word	0x0800086b
 8000710:	08000885 	.word	0x08000885
 8000714:	0800089f 	.word	0x0800089f
	case ADC_CH0:
		// configure PA0 as analog
		RCC_CLK_EN(APB2_ID, GPIOA_ID);
 8000718:	2102      	movs	r1, #2
 800071a:	2001      	movs	r0, #1
 800071c:	f000 fcf4 	bl	8001108 <RCC_CLK_EN>
		GPIO_pinConfig.Pin_Number = PIN_0;
 8000720:	2301      	movs	r3, #1
 8000722:	81bb      	strh	r3, [r7, #12]
		GPIO_init(GPIOA, &GPIO_pinConfig);
 8000724:	f107 030c 	add.w	r3, r7, #12
 8000728:	4619      	mov	r1, r3
 800072a:	4878      	ldr	r0, [pc, #480]	@ (800090c <ADC_read+0x2cc>)
 800072c:	f000 fadc 	bl	8000ce8 <GPIO_init>
		break;
 8000730:	e0c2      	b.n	80008b8 <ADC_read+0x278>
	case ADC_CH1:
			// configure PA1 as analog
			RCC_CLK_EN(APB2_ID, GPIOA_ID);
 8000732:	2102      	movs	r1, #2
 8000734:	2001      	movs	r0, #1
 8000736:	f000 fce7 	bl	8001108 <RCC_CLK_EN>
			GPIO_pinConfig.Pin_Number = PIN_1;
 800073a:	2302      	movs	r3, #2
 800073c:	81bb      	strh	r3, [r7, #12]
			GPIO_init(GPIOA, &GPIO_pinConfig);
 800073e:	f107 030c 	add.w	r3, r7, #12
 8000742:	4619      	mov	r1, r3
 8000744:	4871      	ldr	r0, [pc, #452]	@ (800090c <ADC_read+0x2cc>)
 8000746:	f000 facf 	bl	8000ce8 <GPIO_init>
			break;
 800074a:	e0b5      	b.n	80008b8 <ADC_read+0x278>
	case ADC_CH2:
			// configure PA2 as analog
			RCC_CLK_EN(APB2_ID, GPIOA_ID);
 800074c:	2102      	movs	r1, #2
 800074e:	2001      	movs	r0, #1
 8000750:	f000 fcda 	bl	8001108 <RCC_CLK_EN>
			GPIO_pinConfig.Pin_Number = PIN_2;
 8000754:	2304      	movs	r3, #4
 8000756:	81bb      	strh	r3, [r7, #12]
			GPIO_init(GPIOA, &GPIO_pinConfig);
 8000758:	f107 030c 	add.w	r3, r7, #12
 800075c:	4619      	mov	r1, r3
 800075e:	486b      	ldr	r0, [pc, #428]	@ (800090c <ADC_read+0x2cc>)
 8000760:	f000 fac2 	bl	8000ce8 <GPIO_init>
			break;
 8000764:	e0a8      	b.n	80008b8 <ADC_read+0x278>
	case ADC_CH3:
			// configure PA3 as analog
			RCC_CLK_EN(APB2_ID, GPIOA_ID);
 8000766:	2102      	movs	r1, #2
 8000768:	2001      	movs	r0, #1
 800076a:	f000 fccd 	bl	8001108 <RCC_CLK_EN>
			GPIO_pinConfig.Pin_Number = PIN_3;
 800076e:	2308      	movs	r3, #8
 8000770:	81bb      	strh	r3, [r7, #12]
			GPIO_init(GPIOA, &GPIO_pinConfig);
 8000772:	f107 030c 	add.w	r3, r7, #12
 8000776:	4619      	mov	r1, r3
 8000778:	4864      	ldr	r0, [pc, #400]	@ (800090c <ADC_read+0x2cc>)
 800077a:	f000 fab5 	bl	8000ce8 <GPIO_init>
			break;
 800077e:	e09b      	b.n	80008b8 <ADC_read+0x278>
	case ADC_CH4:
			// configure PA4 as analog
			RCC_CLK_EN(APB2_ID, GPIOA_ID);
 8000780:	2102      	movs	r1, #2
 8000782:	2001      	movs	r0, #1
 8000784:	f000 fcc0 	bl	8001108 <RCC_CLK_EN>
			GPIO_pinConfig.Pin_Number = PIN_4;
 8000788:	2310      	movs	r3, #16
 800078a:	81bb      	strh	r3, [r7, #12]
			GPIO_init(GPIOA, &GPIO_pinConfig);
 800078c:	f107 030c 	add.w	r3, r7, #12
 8000790:	4619      	mov	r1, r3
 8000792:	485e      	ldr	r0, [pc, #376]	@ (800090c <ADC_read+0x2cc>)
 8000794:	f000 faa8 	bl	8000ce8 <GPIO_init>
			break;
 8000798:	e08e      	b.n	80008b8 <ADC_read+0x278>
	case ADC_CH5:
			// configure PA5 as analog
			RCC_CLK_EN(APB2_ID, GPIOA_ID);
 800079a:	2102      	movs	r1, #2
 800079c:	2001      	movs	r0, #1
 800079e:	f000 fcb3 	bl	8001108 <RCC_CLK_EN>
			GPIO_pinConfig.Pin_Number = PIN_5;
 80007a2:	2320      	movs	r3, #32
 80007a4:	81bb      	strh	r3, [r7, #12]
			GPIO_init(GPIOA, &GPIO_pinConfig);
 80007a6:	f107 030c 	add.w	r3, r7, #12
 80007aa:	4619      	mov	r1, r3
 80007ac:	4857      	ldr	r0, [pc, #348]	@ (800090c <ADC_read+0x2cc>)
 80007ae:	f000 fa9b 	bl	8000ce8 <GPIO_init>
			break;
 80007b2:	e081      	b.n	80008b8 <ADC_read+0x278>
	case ADC_CH6:
			// configure PA6 as analog
			RCC_CLK_EN(APB2_ID, GPIOA_ID);
 80007b4:	2102      	movs	r1, #2
 80007b6:	2001      	movs	r0, #1
 80007b8:	f000 fca6 	bl	8001108 <RCC_CLK_EN>
			GPIO_pinConfig.Pin_Number = PIN_6;
 80007bc:	2340      	movs	r3, #64	@ 0x40
 80007be:	81bb      	strh	r3, [r7, #12]
			GPIO_init(GPIOA, &GPIO_pinConfig);
 80007c0:	f107 030c 	add.w	r3, r7, #12
 80007c4:	4619      	mov	r1, r3
 80007c6:	4851      	ldr	r0, [pc, #324]	@ (800090c <ADC_read+0x2cc>)
 80007c8:	f000 fa8e 	bl	8000ce8 <GPIO_init>
			break;
 80007cc:	e074      	b.n	80008b8 <ADC_read+0x278>
	case ADC_CH7:
			// configure PA7 as analog
			RCC_CLK_EN(APB2_ID, GPIOA_ID);
 80007ce:	2102      	movs	r1, #2
 80007d0:	2001      	movs	r0, #1
 80007d2:	f000 fc99 	bl	8001108 <RCC_CLK_EN>
			GPIO_pinConfig.Pin_Number = PIN_7;
 80007d6:	2380      	movs	r3, #128	@ 0x80
 80007d8:	81bb      	strh	r3, [r7, #12]
			GPIO_init(GPIOA, &GPIO_pinConfig);
 80007da:	f107 030c 	add.w	r3, r7, #12
 80007de:	4619      	mov	r1, r3
 80007e0:	484a      	ldr	r0, [pc, #296]	@ (800090c <ADC_read+0x2cc>)
 80007e2:	f000 fa81 	bl	8000ce8 <GPIO_init>
			break;
 80007e6:	e067      	b.n	80008b8 <ADC_read+0x278>
	case ADC_CH8:
			// configure PB0 as analog
			RCC_CLK_EN(APB2_ID, GPIOB_ID);
 80007e8:	2103      	movs	r1, #3
 80007ea:	2001      	movs	r0, #1
 80007ec:	f000 fc8c 	bl	8001108 <RCC_CLK_EN>
			GPIO_pinConfig.Pin_Number = PIN_0;
 80007f0:	2301      	movs	r3, #1
 80007f2:	81bb      	strh	r3, [r7, #12]
			GPIO_init(GPIOB, &GPIO_pinConfig);
 80007f4:	f107 030c 	add.w	r3, r7, #12
 80007f8:	4619      	mov	r1, r3
 80007fa:	4845      	ldr	r0, [pc, #276]	@ (8000910 <ADC_read+0x2d0>)
 80007fc:	f000 fa74 	bl	8000ce8 <GPIO_init>
			break;
 8000800:	e05a      	b.n	80008b8 <ADC_read+0x278>
	case ADC_CH9:
			// configure PB1 as analog
			RCC_CLK_EN(APB2_ID, GPIOB_ID);
 8000802:	2103      	movs	r1, #3
 8000804:	2001      	movs	r0, #1
 8000806:	f000 fc7f 	bl	8001108 <RCC_CLK_EN>
			GPIO_pinConfig.Pin_Number = PIN_1;
 800080a:	2302      	movs	r3, #2
 800080c:	81bb      	strh	r3, [r7, #12]
			GPIO_init(GPIOB, &GPIO_pinConfig);
 800080e:	f107 030c 	add.w	r3, r7, #12
 8000812:	4619      	mov	r1, r3
 8000814:	483e      	ldr	r0, [pc, #248]	@ (8000910 <ADC_read+0x2d0>)
 8000816:	f000 fa67 	bl	8000ce8 <GPIO_init>
			break;
 800081a:	e04d      	b.n	80008b8 <ADC_read+0x278>
	case ADC_CH10:
			// configure PC0 as analog
			RCC_CLK_EN(APB2_ID, GPIOC_ID);
 800081c:	2104      	movs	r1, #4
 800081e:	2001      	movs	r0, #1
 8000820:	f000 fc72 	bl	8001108 <RCC_CLK_EN>
			GPIO_pinConfig.Pin_Number = PIN_0;
 8000824:	2301      	movs	r3, #1
 8000826:	81bb      	strh	r3, [r7, #12]
			GPIO_init(GPIOC, &GPIO_pinConfig);
 8000828:	f107 030c 	add.w	r3, r7, #12
 800082c:	4619      	mov	r1, r3
 800082e:	4839      	ldr	r0, [pc, #228]	@ (8000914 <ADC_read+0x2d4>)
 8000830:	f000 fa5a 	bl	8000ce8 <GPIO_init>
			break;
 8000834:	e040      	b.n	80008b8 <ADC_read+0x278>
	case ADC_CH11:
			// configure PC1 as analog
			RCC_CLK_EN(APB2_ID, GPIOC_ID);
 8000836:	2104      	movs	r1, #4
 8000838:	2001      	movs	r0, #1
 800083a:	f000 fc65 	bl	8001108 <RCC_CLK_EN>
			GPIO_pinConfig.Pin_Number = PIN_1;
 800083e:	2302      	movs	r3, #2
 8000840:	81bb      	strh	r3, [r7, #12]
			GPIO_init(GPIOC, &GPIO_pinConfig);
 8000842:	f107 030c 	add.w	r3, r7, #12
 8000846:	4619      	mov	r1, r3
 8000848:	4832      	ldr	r0, [pc, #200]	@ (8000914 <ADC_read+0x2d4>)
 800084a:	f000 fa4d 	bl	8000ce8 <GPIO_init>
			break;
 800084e:	e033      	b.n	80008b8 <ADC_read+0x278>
	case ADC_CH12:
			// configure PC2 as analog
			RCC_CLK_EN(APB2_ID, GPIOC_ID);
 8000850:	2104      	movs	r1, #4
 8000852:	2001      	movs	r0, #1
 8000854:	f000 fc58 	bl	8001108 <RCC_CLK_EN>
			GPIO_pinConfig.Pin_Number = PIN_2;
 8000858:	2304      	movs	r3, #4
 800085a:	81bb      	strh	r3, [r7, #12]
			GPIO_init(GPIOC, &GPIO_pinConfig);
 800085c:	f107 030c 	add.w	r3, r7, #12
 8000860:	4619      	mov	r1, r3
 8000862:	482c      	ldr	r0, [pc, #176]	@ (8000914 <ADC_read+0x2d4>)
 8000864:	f000 fa40 	bl	8000ce8 <GPIO_init>
			break;
 8000868:	e026      	b.n	80008b8 <ADC_read+0x278>
	case ADC_CH13:
			// configure PC3 as analog
			RCC_CLK_EN(APB2_ID, GPIOC_ID);
 800086a:	2104      	movs	r1, #4
 800086c:	2001      	movs	r0, #1
 800086e:	f000 fc4b 	bl	8001108 <RCC_CLK_EN>
			GPIO_pinConfig.Pin_Number = PIN_3;
 8000872:	2308      	movs	r3, #8
 8000874:	81bb      	strh	r3, [r7, #12]
			GPIO_init(GPIOC, &GPIO_pinConfig);
 8000876:	f107 030c 	add.w	r3, r7, #12
 800087a:	4619      	mov	r1, r3
 800087c:	4825      	ldr	r0, [pc, #148]	@ (8000914 <ADC_read+0x2d4>)
 800087e:	f000 fa33 	bl	8000ce8 <GPIO_init>
			break;
 8000882:	e019      	b.n	80008b8 <ADC_read+0x278>
	case ADC_CH14:
			// configure PC4 as analog
			RCC_CLK_EN(APB2_ID, GPIOC_ID);
 8000884:	2104      	movs	r1, #4
 8000886:	2001      	movs	r0, #1
 8000888:	f000 fc3e 	bl	8001108 <RCC_CLK_EN>
			GPIO_pinConfig.Pin_Number = PIN_4;
 800088c:	2310      	movs	r3, #16
 800088e:	81bb      	strh	r3, [r7, #12]
			GPIO_init(GPIOC, &GPIO_pinConfig);
 8000890:	f107 030c 	add.w	r3, r7, #12
 8000894:	4619      	mov	r1, r3
 8000896:	481f      	ldr	r0, [pc, #124]	@ (8000914 <ADC_read+0x2d4>)
 8000898:	f000 fa26 	bl	8000ce8 <GPIO_init>
			break;
 800089c:	e00c      	b.n	80008b8 <ADC_read+0x278>
	case ADC_CH15:
			// configure PC5 as analog
			RCC_CLK_EN(APB2_ID, GPIOC_ID);
 800089e:	2104      	movs	r1, #4
 80008a0:	2001      	movs	r0, #1
 80008a2:	f000 fc31 	bl	8001108 <RCC_CLK_EN>
			GPIO_pinConfig.Pin_Number = PIN_5;
 80008a6:	2320      	movs	r3, #32
 80008a8:	81bb      	strh	r3, [r7, #12]
			GPIO_init(GPIOC, &GPIO_pinConfig);
 80008aa:	f107 030c 	add.w	r3, r7, #12
 80008ae:	4619      	mov	r1, r3
 80008b0:	4818      	ldr	r0, [pc, #96]	@ (8000914 <ADC_read+0x2d4>)
 80008b2:	f000 fa19 	bl	8000ce8 <GPIO_init>
			break;
 80008b6:	bf00      	nop
	}
	//2. Enable ADC
    ADCx->SQR[0] |= ((ADC_CHx - (uint8) 1) << 20);
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80008bc:	78fa      	ldrb	r2, [r7, #3]
 80008be:	3a01      	subs	r2, #1
 80008c0:	0512      	lsls	r2, r2, #20
 80008c2:	431a      	orrs	r2, r3
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	62da      	str	r2, [r3, #44]	@ 0x2c
    ADCx->SQR[2] = (ADCx->SQR[2] & ~(0x1F)) | ADC_CHx;
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80008cc:	f023 021f 	bic.w	r2, r3, #31
 80008d0:	78fb      	ldrb	r3, [r7, #3]
 80008d2:	431a      	orrs	r2, r3
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	635a      	str	r2, [r3, #52]	@ 0x34

	//start conversion
    ADCx->CR2 |= (1 << 0);
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	689b      	ldr	r3, [r3, #8]
 80008dc:	f043 0201 	orr.w	r2, r3, #1
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	609a      	str	r2, [r3, #8]
    ADCx->CR2 |= (1 << 22);
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	689b      	ldr	r3, [r3, #8]
 80008e8:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	609a      	str	r2, [r3, #8]

	//wait for EOC Flag to be set
	while(!(ADCx->SR & (1<<1)));
 80008f0:	bf00      	nop
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	f003 0302 	and.w	r3, r3, #2
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d0f9      	beq.n	80008f2 <ADC_read+0x2b2>

	// read data
	return (ADCx->DR);
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000902:	b29b      	uxth	r3, r3
}
 8000904:	4618      	mov	r0, r3
 8000906:	3710      	adds	r7, #16
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	40010800 	.word	0x40010800
 8000910:	40010c00 	.word	0x40010c00
 8000914:	40011000 	.word	0x40011000

08000918 <EXTI0_IRQHandler>:
//=================================
void (*GP_Fun[16])(void);
//=================================
//       IRQ Handlers
//=================================
void EXTI0_IRQHandler() {
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
	EXTI->PR |= (1 << 0);
 800091c:	4b05      	ldr	r3, [pc, #20]	@ (8000934 <EXTI0_IRQHandler+0x1c>)
 800091e:	695b      	ldr	r3, [r3, #20]
 8000920:	4a04      	ldr	r2, [pc, #16]	@ (8000934 <EXTI0_IRQHandler+0x1c>)
 8000922:	f043 0301 	orr.w	r3, r3, #1
 8000926:	6153      	str	r3, [r2, #20]
	GP_Fun[0]();
 8000928:	4b03      	ldr	r3, [pc, #12]	@ (8000938 <EXTI0_IRQHandler+0x20>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4798      	blx	r3
}
 800092e:	bf00      	nop
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	40010400 	.word	0x40010400
 8000938:	20000090 	.word	0x20000090

0800093c <EXTI1_IRQHandler>:
void EXTI1_IRQHandler() {
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
	EXTI->PR |= (1 << 1);
 8000940:	4b05      	ldr	r3, [pc, #20]	@ (8000958 <EXTI1_IRQHandler+0x1c>)
 8000942:	695b      	ldr	r3, [r3, #20]
 8000944:	4a04      	ldr	r2, [pc, #16]	@ (8000958 <EXTI1_IRQHandler+0x1c>)
 8000946:	f043 0302 	orr.w	r3, r3, #2
 800094a:	6153      	str	r3, [r2, #20]
	GP_Fun[1]();
 800094c:	4b03      	ldr	r3, [pc, #12]	@ (800095c <EXTI1_IRQHandler+0x20>)
 800094e:	685b      	ldr	r3, [r3, #4]
 8000950:	4798      	blx	r3
}
 8000952:	bf00      	nop
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	40010400 	.word	0x40010400
 800095c:	20000090 	.word	0x20000090

08000960 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler() {
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
	EXTI->PR |= (1 << 2);
 8000964:	4b05      	ldr	r3, [pc, #20]	@ (800097c <EXTI2_IRQHandler+0x1c>)
 8000966:	695b      	ldr	r3, [r3, #20]
 8000968:	4a04      	ldr	r2, [pc, #16]	@ (800097c <EXTI2_IRQHandler+0x1c>)
 800096a:	f043 0304 	orr.w	r3, r3, #4
 800096e:	6153      	str	r3, [r2, #20]
	GP_Fun[2]();
 8000970:	4b03      	ldr	r3, [pc, #12]	@ (8000980 <EXTI2_IRQHandler+0x20>)
 8000972:	689b      	ldr	r3, [r3, #8]
 8000974:	4798      	blx	r3
}
 8000976:	bf00      	nop
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	40010400 	.word	0x40010400
 8000980:	20000090 	.word	0x20000090

08000984 <EXTI3_IRQHandler>:
void EXTI3_IRQHandler() {
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
	EXTI->PR |= (1 << 3);
 8000988:	4b05      	ldr	r3, [pc, #20]	@ (80009a0 <EXTI3_IRQHandler+0x1c>)
 800098a:	695b      	ldr	r3, [r3, #20]
 800098c:	4a04      	ldr	r2, [pc, #16]	@ (80009a0 <EXTI3_IRQHandler+0x1c>)
 800098e:	f043 0308 	orr.w	r3, r3, #8
 8000992:	6153      	str	r3, [r2, #20]
	GP_Fun[3]();
 8000994:	4b03      	ldr	r3, [pc, #12]	@ (80009a4 <EXTI3_IRQHandler+0x20>)
 8000996:	68db      	ldr	r3, [r3, #12]
 8000998:	4798      	blx	r3
}
 800099a:	bf00      	nop
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	40010400 	.word	0x40010400
 80009a4:	20000090 	.word	0x20000090

080009a8 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler() {
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
	EXTI->PR |= (1 << 4);
 80009ac:	4b05      	ldr	r3, [pc, #20]	@ (80009c4 <EXTI4_IRQHandler+0x1c>)
 80009ae:	695b      	ldr	r3, [r3, #20]
 80009b0:	4a04      	ldr	r2, [pc, #16]	@ (80009c4 <EXTI4_IRQHandler+0x1c>)
 80009b2:	f043 0310 	orr.w	r3, r3, #16
 80009b6:	6153      	str	r3, [r2, #20]
	GP_Fun[4]();
 80009b8:	4b03      	ldr	r3, [pc, #12]	@ (80009c8 <EXTI4_IRQHandler+0x20>)
 80009ba:	691b      	ldr	r3, [r3, #16]
 80009bc:	4798      	blx	r3
}
 80009be:	bf00      	nop
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	40010400 	.word	0x40010400
 80009c8:	20000090 	.word	0x20000090

080009cc <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler() {
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
	if (EXTI->PR & (1 << 5)) {
 80009d0:	4b28      	ldr	r3, [pc, #160]	@ (8000a74 <EXTI9_5_IRQHandler+0xa8>)
 80009d2:	695b      	ldr	r3, [r3, #20]
 80009d4:	f003 0320 	and.w	r3, r3, #32
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d009      	beq.n	80009f0 <EXTI9_5_IRQHandler+0x24>
		EXTI->PR |= (1 << 5);
 80009dc:	4b25      	ldr	r3, [pc, #148]	@ (8000a74 <EXTI9_5_IRQHandler+0xa8>)
 80009de:	695b      	ldr	r3, [r3, #20]
 80009e0:	4a24      	ldr	r2, [pc, #144]	@ (8000a74 <EXTI9_5_IRQHandler+0xa8>)
 80009e2:	f043 0320 	orr.w	r3, r3, #32
 80009e6:	6153      	str	r3, [r2, #20]
		GP_Fun[5]();
 80009e8:	4b23      	ldr	r3, [pc, #140]	@ (8000a78 <EXTI9_5_IRQHandler+0xac>)
 80009ea:	695b      	ldr	r3, [r3, #20]
 80009ec:	4798      	blx	r3
		GP_Fun[8]();
	} else if (EXTI->PR & (1 << 9)) {
		EXTI->PR |= (1 << 9);
		GP_Fun[9]();
	}
}
 80009ee:	e03e      	b.n	8000a6e <EXTI9_5_IRQHandler+0xa2>
	} else if (EXTI->PR & (1 << 6)) {
 80009f0:	4b20      	ldr	r3, [pc, #128]	@ (8000a74 <EXTI9_5_IRQHandler+0xa8>)
 80009f2:	695b      	ldr	r3, [r3, #20]
 80009f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d009      	beq.n	8000a10 <EXTI9_5_IRQHandler+0x44>
		EXTI->PR |= (1 << 6);
 80009fc:	4b1d      	ldr	r3, [pc, #116]	@ (8000a74 <EXTI9_5_IRQHandler+0xa8>)
 80009fe:	695b      	ldr	r3, [r3, #20]
 8000a00:	4a1c      	ldr	r2, [pc, #112]	@ (8000a74 <EXTI9_5_IRQHandler+0xa8>)
 8000a02:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a06:	6153      	str	r3, [r2, #20]
		GP_Fun[6]();
 8000a08:	4b1b      	ldr	r3, [pc, #108]	@ (8000a78 <EXTI9_5_IRQHandler+0xac>)
 8000a0a:	699b      	ldr	r3, [r3, #24]
 8000a0c:	4798      	blx	r3
}
 8000a0e:	e02e      	b.n	8000a6e <EXTI9_5_IRQHandler+0xa2>
	} else if (EXTI->PR & (1 << 7)) {
 8000a10:	4b18      	ldr	r3, [pc, #96]	@ (8000a74 <EXTI9_5_IRQHandler+0xa8>)
 8000a12:	695b      	ldr	r3, [r3, #20]
 8000a14:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d009      	beq.n	8000a30 <EXTI9_5_IRQHandler+0x64>
		EXTI->PR |= (1 << 7);
 8000a1c:	4b15      	ldr	r3, [pc, #84]	@ (8000a74 <EXTI9_5_IRQHandler+0xa8>)
 8000a1e:	695b      	ldr	r3, [r3, #20]
 8000a20:	4a14      	ldr	r2, [pc, #80]	@ (8000a74 <EXTI9_5_IRQHandler+0xa8>)
 8000a22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a26:	6153      	str	r3, [r2, #20]
		GP_Fun[7]();
 8000a28:	4b13      	ldr	r3, [pc, #76]	@ (8000a78 <EXTI9_5_IRQHandler+0xac>)
 8000a2a:	69db      	ldr	r3, [r3, #28]
 8000a2c:	4798      	blx	r3
}
 8000a2e:	e01e      	b.n	8000a6e <EXTI9_5_IRQHandler+0xa2>
	} else if (EXTI->PR & (1 << 8)) {
 8000a30:	4b10      	ldr	r3, [pc, #64]	@ (8000a74 <EXTI9_5_IRQHandler+0xa8>)
 8000a32:	695b      	ldr	r3, [r3, #20]
 8000a34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d009      	beq.n	8000a50 <EXTI9_5_IRQHandler+0x84>
		EXTI->PR |= (1 << 8);
 8000a3c:	4b0d      	ldr	r3, [pc, #52]	@ (8000a74 <EXTI9_5_IRQHandler+0xa8>)
 8000a3e:	695b      	ldr	r3, [r3, #20]
 8000a40:	4a0c      	ldr	r2, [pc, #48]	@ (8000a74 <EXTI9_5_IRQHandler+0xa8>)
 8000a42:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a46:	6153      	str	r3, [r2, #20]
		GP_Fun[8]();
 8000a48:	4b0b      	ldr	r3, [pc, #44]	@ (8000a78 <EXTI9_5_IRQHandler+0xac>)
 8000a4a:	6a1b      	ldr	r3, [r3, #32]
 8000a4c:	4798      	blx	r3
}
 8000a4e:	e00e      	b.n	8000a6e <EXTI9_5_IRQHandler+0xa2>
	} else if (EXTI->PR & (1 << 9)) {
 8000a50:	4b08      	ldr	r3, [pc, #32]	@ (8000a74 <EXTI9_5_IRQHandler+0xa8>)
 8000a52:	695b      	ldr	r3, [r3, #20]
 8000a54:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d008      	beq.n	8000a6e <EXTI9_5_IRQHandler+0xa2>
		EXTI->PR |= (1 << 9);
 8000a5c:	4b05      	ldr	r3, [pc, #20]	@ (8000a74 <EXTI9_5_IRQHandler+0xa8>)
 8000a5e:	695b      	ldr	r3, [r3, #20]
 8000a60:	4a04      	ldr	r2, [pc, #16]	@ (8000a74 <EXTI9_5_IRQHandler+0xa8>)
 8000a62:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000a66:	6153      	str	r3, [r2, #20]
		GP_Fun[9]();
 8000a68:	4b03      	ldr	r3, [pc, #12]	@ (8000a78 <EXTI9_5_IRQHandler+0xac>)
 8000a6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a6c:	4798      	blx	r3
}
 8000a6e:	bf00      	nop
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	40010400 	.word	0x40010400
 8000a78:	20000090 	.word	0x20000090

08000a7c <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler() {
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
	if (EXTI->PR & (1 << 10)) {
 8000a80:	4b30      	ldr	r3, [pc, #192]	@ (8000b44 <EXTI15_10_IRQHandler+0xc8>)
 8000a82:	695b      	ldr	r3, [r3, #20]
 8000a84:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d009      	beq.n	8000aa0 <EXTI15_10_IRQHandler+0x24>
		EXTI->PR |= (1 << 10);
 8000a8c:	4b2d      	ldr	r3, [pc, #180]	@ (8000b44 <EXTI15_10_IRQHandler+0xc8>)
 8000a8e:	695b      	ldr	r3, [r3, #20]
 8000a90:	4a2c      	ldr	r2, [pc, #176]	@ (8000b44 <EXTI15_10_IRQHandler+0xc8>)
 8000a92:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000a96:	6153      	str	r3, [r2, #20]
		GP_Fun[10]();
 8000a98:	4b2b      	ldr	r3, [pc, #172]	@ (8000b48 <EXTI15_10_IRQHandler+0xcc>)
 8000a9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a9c:	4798      	blx	r3
	} else if (EXTI->PR & (1 << 15)) {
		EXTI->PR |= (1 << 15);
		GP_Fun[15]();
	}

}
 8000a9e:	e04e      	b.n	8000b3e <EXTI15_10_IRQHandler+0xc2>
	} else if (EXTI->PR & (1 << 11)) {
 8000aa0:	4b28      	ldr	r3, [pc, #160]	@ (8000b44 <EXTI15_10_IRQHandler+0xc8>)
 8000aa2:	695b      	ldr	r3, [r3, #20]
 8000aa4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d009      	beq.n	8000ac0 <EXTI15_10_IRQHandler+0x44>
		EXTI->PR |= (1 << 11);
 8000aac:	4b25      	ldr	r3, [pc, #148]	@ (8000b44 <EXTI15_10_IRQHandler+0xc8>)
 8000aae:	695b      	ldr	r3, [r3, #20]
 8000ab0:	4a24      	ldr	r2, [pc, #144]	@ (8000b44 <EXTI15_10_IRQHandler+0xc8>)
 8000ab2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000ab6:	6153      	str	r3, [r2, #20]
		GP_Fun[11]();
 8000ab8:	4b23      	ldr	r3, [pc, #140]	@ (8000b48 <EXTI15_10_IRQHandler+0xcc>)
 8000aba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000abc:	4798      	blx	r3
}
 8000abe:	e03e      	b.n	8000b3e <EXTI15_10_IRQHandler+0xc2>
	} else if (EXTI->PR & (1 << 12)) {
 8000ac0:	4b20      	ldr	r3, [pc, #128]	@ (8000b44 <EXTI15_10_IRQHandler+0xc8>)
 8000ac2:	695b      	ldr	r3, [r3, #20]
 8000ac4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d009      	beq.n	8000ae0 <EXTI15_10_IRQHandler+0x64>
		EXTI->PR |= (1 << 12);
 8000acc:	4b1d      	ldr	r3, [pc, #116]	@ (8000b44 <EXTI15_10_IRQHandler+0xc8>)
 8000ace:	695b      	ldr	r3, [r3, #20]
 8000ad0:	4a1c      	ldr	r2, [pc, #112]	@ (8000b44 <EXTI15_10_IRQHandler+0xc8>)
 8000ad2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000ad6:	6153      	str	r3, [r2, #20]
		GP_Fun[12]();
 8000ad8:	4b1b      	ldr	r3, [pc, #108]	@ (8000b48 <EXTI15_10_IRQHandler+0xcc>)
 8000ada:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000adc:	4798      	blx	r3
}
 8000ade:	e02e      	b.n	8000b3e <EXTI15_10_IRQHandler+0xc2>
	} else if (EXTI->PR & (1 << 13)) {
 8000ae0:	4b18      	ldr	r3, [pc, #96]	@ (8000b44 <EXTI15_10_IRQHandler+0xc8>)
 8000ae2:	695b      	ldr	r3, [r3, #20]
 8000ae4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d009      	beq.n	8000b00 <EXTI15_10_IRQHandler+0x84>
		EXTI->PR |= (1 << 13);
 8000aec:	4b15      	ldr	r3, [pc, #84]	@ (8000b44 <EXTI15_10_IRQHandler+0xc8>)
 8000aee:	695b      	ldr	r3, [r3, #20]
 8000af0:	4a14      	ldr	r2, [pc, #80]	@ (8000b44 <EXTI15_10_IRQHandler+0xc8>)
 8000af2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000af6:	6153      	str	r3, [r2, #20]
		GP_Fun[13]();
 8000af8:	4b13      	ldr	r3, [pc, #76]	@ (8000b48 <EXTI15_10_IRQHandler+0xcc>)
 8000afa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000afc:	4798      	blx	r3
}
 8000afe:	e01e      	b.n	8000b3e <EXTI15_10_IRQHandler+0xc2>
	} else if (EXTI->PR & (1 << 14)) {
 8000b00:	4b10      	ldr	r3, [pc, #64]	@ (8000b44 <EXTI15_10_IRQHandler+0xc8>)
 8000b02:	695b      	ldr	r3, [r3, #20]
 8000b04:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d009      	beq.n	8000b20 <EXTI15_10_IRQHandler+0xa4>
		EXTI->PR |= (1 << 14);
 8000b0c:	4b0d      	ldr	r3, [pc, #52]	@ (8000b44 <EXTI15_10_IRQHandler+0xc8>)
 8000b0e:	695b      	ldr	r3, [r3, #20]
 8000b10:	4a0c      	ldr	r2, [pc, #48]	@ (8000b44 <EXTI15_10_IRQHandler+0xc8>)
 8000b12:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b16:	6153      	str	r3, [r2, #20]
		GP_Fun[14]();
 8000b18:	4b0b      	ldr	r3, [pc, #44]	@ (8000b48 <EXTI15_10_IRQHandler+0xcc>)
 8000b1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000b1c:	4798      	blx	r3
}
 8000b1e:	e00e      	b.n	8000b3e <EXTI15_10_IRQHandler+0xc2>
	} else if (EXTI->PR & (1 << 15)) {
 8000b20:	4b08      	ldr	r3, [pc, #32]	@ (8000b44 <EXTI15_10_IRQHandler+0xc8>)
 8000b22:	695b      	ldr	r3, [r3, #20]
 8000b24:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d008      	beq.n	8000b3e <EXTI15_10_IRQHandler+0xc2>
		EXTI->PR |= (1 << 15);
 8000b2c:	4b05      	ldr	r3, [pc, #20]	@ (8000b44 <EXTI15_10_IRQHandler+0xc8>)
 8000b2e:	695b      	ldr	r3, [r3, #20]
 8000b30:	4a04      	ldr	r2, [pc, #16]	@ (8000b44 <EXTI15_10_IRQHandler+0xc8>)
 8000b32:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000b36:	6153      	str	r3, [r2, #20]
		GP_Fun[15]();
 8000b38:	4b03      	ldr	r3, [pc, #12]	@ (8000b48 <EXTI15_10_IRQHandler+0xcc>)
 8000b3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000b3c:	4798      	blx	r3
}
 8000b3e:	bf00      	nop
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	40010400 	.word	0x40010400
 8000b48:	20000090 	.word	0x20000090

08000b4c <Get_CRLH_Position>:
 *      Author: Alaa Wahba
 */

#include "GPIO.h"

uint8 Get_CRLH_Position(uint16 pinNumber) {
 8000b4c:	b480      	push	{r7}
 8000b4e:	b085      	sub	sp, #20
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	4603      	mov	r3, r0
 8000b54:	80fb      	strh	r3, [r7, #6]
	uint8 shift = 0;
 8000b56:	2300      	movs	r3, #0
 8000b58:	73fb      	strb	r3, [r7, #15]
	switch (pinNumber) {
 8000b5a:	88fb      	ldrh	r3, [r7, #6]
 8000b5c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000b60:	f000 80b8 	beq.w	8000cd4 <Get_CRLH_Position+0x188>
 8000b64:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000b68:	f300 80b7 	bgt.w	8000cda <Get_CRLH_Position+0x18e>
 8000b6c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8000b70:	f000 80ad 	beq.w	8000cce <Get_CRLH_Position+0x182>
 8000b74:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8000b78:	f300 80af 	bgt.w	8000cda <Get_CRLH_Position+0x18e>
 8000b7c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000b80:	f000 80a2 	beq.w	8000cc8 <Get_CRLH_Position+0x17c>
 8000b84:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000b88:	f300 80a7 	bgt.w	8000cda <Get_CRLH_Position+0x18e>
 8000b8c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000b90:	f000 8097 	beq.w	8000cc2 <Get_CRLH_Position+0x176>
 8000b94:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000b98:	f300 809f 	bgt.w	8000cda <Get_CRLH_Position+0x18e>
 8000b9c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000ba0:	f000 808c 	beq.w	8000cbc <Get_CRLH_Position+0x170>
 8000ba4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000ba8:	f300 8097 	bgt.w	8000cda <Get_CRLH_Position+0x18e>
 8000bac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000bb0:	f000 8081 	beq.w	8000cb6 <Get_CRLH_Position+0x16a>
 8000bb4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000bb8:	f300 808f 	bgt.w	8000cda <Get_CRLH_Position+0x18e>
 8000bbc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000bc0:	d076      	beq.n	8000cb0 <Get_CRLH_Position+0x164>
 8000bc2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000bc6:	f300 8088 	bgt.w	8000cda <Get_CRLH_Position+0x18e>
 8000bca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000bce:	d06c      	beq.n	8000caa <Get_CRLH_Position+0x15e>
 8000bd0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000bd4:	f300 8081 	bgt.w	8000cda <Get_CRLH_Position+0x18e>
 8000bd8:	2b80      	cmp	r3, #128	@ 0x80
 8000bda:	d063      	beq.n	8000ca4 <Get_CRLH_Position+0x158>
 8000bdc:	2b80      	cmp	r3, #128	@ 0x80
 8000bde:	dc7c      	bgt.n	8000cda <Get_CRLH_Position+0x18e>
 8000be0:	2b20      	cmp	r3, #32
 8000be2:	dc47      	bgt.n	8000c74 <Get_CRLH_Position+0x128>
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	dd78      	ble.n	8000cda <Get_CRLH_Position+0x18e>
 8000be8:	3b01      	subs	r3, #1
 8000bea:	2b1f      	cmp	r3, #31
 8000bec:	d875      	bhi.n	8000cda <Get_CRLH_Position+0x18e>
 8000bee:	a201      	add	r2, pc, #4	@ (adr r2, 8000bf4 <Get_CRLH_Position+0xa8>)
 8000bf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bf4:	08000c7b 	.word	0x08000c7b
 8000bf8:	08000c81 	.word	0x08000c81
 8000bfc:	08000cdb 	.word	0x08000cdb
 8000c00:	08000c87 	.word	0x08000c87
 8000c04:	08000cdb 	.word	0x08000cdb
 8000c08:	08000cdb 	.word	0x08000cdb
 8000c0c:	08000cdb 	.word	0x08000cdb
 8000c10:	08000c8d 	.word	0x08000c8d
 8000c14:	08000cdb 	.word	0x08000cdb
 8000c18:	08000cdb 	.word	0x08000cdb
 8000c1c:	08000cdb 	.word	0x08000cdb
 8000c20:	08000cdb 	.word	0x08000cdb
 8000c24:	08000cdb 	.word	0x08000cdb
 8000c28:	08000cdb 	.word	0x08000cdb
 8000c2c:	08000cdb 	.word	0x08000cdb
 8000c30:	08000c93 	.word	0x08000c93
 8000c34:	08000cdb 	.word	0x08000cdb
 8000c38:	08000cdb 	.word	0x08000cdb
 8000c3c:	08000cdb 	.word	0x08000cdb
 8000c40:	08000cdb 	.word	0x08000cdb
 8000c44:	08000cdb 	.word	0x08000cdb
 8000c48:	08000cdb 	.word	0x08000cdb
 8000c4c:	08000cdb 	.word	0x08000cdb
 8000c50:	08000cdb 	.word	0x08000cdb
 8000c54:	08000cdb 	.word	0x08000cdb
 8000c58:	08000cdb 	.word	0x08000cdb
 8000c5c:	08000cdb 	.word	0x08000cdb
 8000c60:	08000cdb 	.word	0x08000cdb
 8000c64:	08000cdb 	.word	0x08000cdb
 8000c68:	08000cdb 	.word	0x08000cdb
 8000c6c:	08000cdb 	.word	0x08000cdb
 8000c70:	08000c99 	.word	0x08000c99
 8000c74:	2b40      	cmp	r3, #64	@ 0x40
 8000c76:	d012      	beq.n	8000c9e <Get_CRLH_Position+0x152>
 8000c78:	e02f      	b.n	8000cda <Get_CRLH_Position+0x18e>
	case PIN_0:
		shift = 0;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	73fb      	strb	r3, [r7, #15]
		break;
 8000c7e:	e02c      	b.n	8000cda <Get_CRLH_Position+0x18e>
	case PIN_1:
		shift = 4;
 8000c80:	2304      	movs	r3, #4
 8000c82:	73fb      	strb	r3, [r7, #15]
		break;
 8000c84:	e029      	b.n	8000cda <Get_CRLH_Position+0x18e>
	case PIN_2:
		shift = 8;
 8000c86:	2308      	movs	r3, #8
 8000c88:	73fb      	strb	r3, [r7, #15]
		break;
 8000c8a:	e026      	b.n	8000cda <Get_CRLH_Position+0x18e>
	case PIN_3:
		shift = 12;
 8000c8c:	230c      	movs	r3, #12
 8000c8e:	73fb      	strb	r3, [r7, #15]
		break;
 8000c90:	e023      	b.n	8000cda <Get_CRLH_Position+0x18e>
	case PIN_4:
		shift = 16;
 8000c92:	2310      	movs	r3, #16
 8000c94:	73fb      	strb	r3, [r7, #15]
		break;
 8000c96:	e020      	b.n	8000cda <Get_CRLH_Position+0x18e>
	case PIN_5:
		shift = 20;
 8000c98:	2314      	movs	r3, #20
 8000c9a:	73fb      	strb	r3, [r7, #15]
		break;
 8000c9c:	e01d      	b.n	8000cda <Get_CRLH_Position+0x18e>
	case PIN_6:
		shift = 24;
 8000c9e:	2318      	movs	r3, #24
 8000ca0:	73fb      	strb	r3, [r7, #15]
		break;
 8000ca2:	e01a      	b.n	8000cda <Get_CRLH_Position+0x18e>
	case PIN_7:
		shift = 28;
 8000ca4:	231c      	movs	r3, #28
 8000ca6:	73fb      	strb	r3, [r7, #15]
		break;
 8000ca8:	e017      	b.n	8000cda <Get_CRLH_Position+0x18e>

	case PIN_8:
		shift = 0;
 8000caa:	2300      	movs	r3, #0
 8000cac:	73fb      	strb	r3, [r7, #15]
		break;
 8000cae:	e014      	b.n	8000cda <Get_CRLH_Position+0x18e>
	case PIN_9:
		shift = 4;
 8000cb0:	2304      	movs	r3, #4
 8000cb2:	73fb      	strb	r3, [r7, #15]
		break;
 8000cb4:	e011      	b.n	8000cda <Get_CRLH_Position+0x18e>
	case PIN_10:
		shift = 8;
 8000cb6:	2308      	movs	r3, #8
 8000cb8:	73fb      	strb	r3, [r7, #15]
		break;
 8000cba:	e00e      	b.n	8000cda <Get_CRLH_Position+0x18e>
	case PIN_11:
		shift = 12;
 8000cbc:	230c      	movs	r3, #12
 8000cbe:	73fb      	strb	r3, [r7, #15]
		break;
 8000cc0:	e00b      	b.n	8000cda <Get_CRLH_Position+0x18e>
	case PIN_12:
		shift = 16;
 8000cc2:	2310      	movs	r3, #16
 8000cc4:	73fb      	strb	r3, [r7, #15]
		break;
 8000cc6:	e008      	b.n	8000cda <Get_CRLH_Position+0x18e>
	case PIN_13:
		shift = 20;
 8000cc8:	2314      	movs	r3, #20
 8000cca:	73fb      	strb	r3, [r7, #15]
		break;
 8000ccc:	e005      	b.n	8000cda <Get_CRLH_Position+0x18e>
	case PIN_14:
		shift = 24;
 8000cce:	2318      	movs	r3, #24
 8000cd0:	73fb      	strb	r3, [r7, #15]
		break;
 8000cd2:	e002      	b.n	8000cda <Get_CRLH_Position+0x18e>
	case PIN_15:
		shift = 28;
 8000cd4:	231c      	movs	r3, #28
 8000cd6:	73fb      	strb	r3, [r7, #15]
		break;
 8000cd8:	bf00      	nop

	}
	return shift;
 8000cda:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cdc:	4618      	mov	r0, r3
 8000cde:	3714      	adds	r7, #20
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bc80      	pop	{r7}
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop

08000ce8 <GPIO_init>:
 * @retval 			- none
 * Note				- Stm32F103C6 MCU has GPIO A,B,C,D,E Modules
 * 				     But LQFP48 Package has only GPIO A,B,PART of C/D exported as external PINS from the MCU
 */

void GPIO_init(GPIO_Registers_t *GPIOx, GPIO_PinConfig_t *pinConfig) {
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b086      	sub	sp, #24
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
 8000cf0:	6039      	str	r1, [r7, #0]
	// CRL configures the pins from pin 0 to 7
	// CRH configures the pins from pin 8 to 15
	volatile uint32 *config_Register = NULL; //this pointer determines which register to use
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	613b      	str	r3, [r7, #16]
	config_Register = (pinConfig->Pin_Number < PIN_8) ? &GPIOx->CRL : &GPIOx->CRH;
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	881b      	ldrh	r3, [r3, #0]
 8000cfa:	2bff      	cmp	r3, #255	@ 0xff
 8000cfc:	d801      	bhi.n	8000d02 <GPIO_init+0x1a>
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	e001      	b.n	8000d06 <GPIO_init+0x1e>
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	3304      	adds	r3, #4
 8000d06:	613b      	str	r3, [r7, #16]

	// This returns the starting bit in register CRL/CRH for the specified pin.
	uint8 shift_bit = Get_CRLH_Position(pinConfig->Pin_Number);
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	881b      	ldrh	r3, [r3, #0]
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f7ff ff1d 	bl	8000b4c <Get_CRLH_Position>
 8000d12:	4603      	mov	r3, r0
 8000d14:	73fb      	strb	r3, [r7, #15]

	// First Clear the CNF[1:0] MODE[1:0]
	(*config_Register) &= ~(0xF << shift_bit);
 8000d16:	693b      	ldr	r3, [r7, #16]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	7bfa      	ldrb	r2, [r7, #15]
 8000d1c:	210f      	movs	r1, #15
 8000d1e:	fa01 f202 	lsl.w	r2, r1, r2
 8000d22:	43d2      	mvns	r2, r2
 8000d24:	401a      	ands	r2, r3
 8000d26:	693b      	ldr	r3, [r7, #16]
 8000d28:	601a      	str	r2, [r3, #0]

	uint8 register_bits = 0;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	75fb      	strb	r3, [r7, #23]
	// if pin is OUTPUT
	if ((pinConfig->MODE == MODE_OUTPUT_AF_OD) || (pinConfig->MODE == MODE_OUTPUT_AF_PP) || (pinConfig->MODE == MODE_OUTPUT_PP)	|| (pinConfig->MODE == MODE_OUTPUT_OD)) {
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	789b      	ldrb	r3, [r3, #2]
 8000d32:	2b07      	cmp	r3, #7
 8000d34:	d00b      	beq.n	8000d4e <GPIO_init+0x66>
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	789b      	ldrb	r3, [r3, #2]
 8000d3a:	2b06      	cmp	r3, #6
 8000d3c:	d007      	beq.n	8000d4e <GPIO_init+0x66>
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	789b      	ldrb	r3, [r3, #2]
 8000d42:	2b04      	cmp	r3, #4
 8000d44:	d003      	beq.n	8000d4e <GPIO_init+0x66>
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	789b      	ldrb	r3, [r3, #2]
 8000d4a:	2b05      	cmp	r3, #5
 8000d4c:	d10e      	bne.n	8000d6c <GPIO_init+0x84>
		register_bits = ((((pinConfig->MODE - 4) << 2)	| pinConfig->Output_Speed) & 0x0f);
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	789b      	ldrb	r3, [r3, #2]
 8000d52:	3b04      	subs	r3, #4
 8000d54:	009b      	lsls	r3, r3, #2
 8000d56:	b25a      	sxtb	r2, r3
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	78db      	ldrb	r3, [r3, #3]
 8000d5c:	b25b      	sxtb	r3, r3
 8000d5e:	4313      	orrs	r3, r2
 8000d60:	b25b      	sxtb	r3, r3
 8000d62:	b2db      	uxtb	r3, r3
 8000d64:	f003 030f 	and.w	r3, r3, #15
 8000d68:	75fb      	strb	r3, [r7, #23]
 8000d6a:	e02c      	b.n	8000dc6 <GPIO_init+0xde>

	}
	else
	{
		if ((pinConfig->MODE == MODE_INPUT_FLO) || (pinConfig->MODE == MODE_Analog))
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	789b      	ldrb	r3, [r3, #2]
 8000d70:	2b01      	cmp	r3, #1
 8000d72:	d003      	beq.n	8000d7c <GPIO_init+0x94>
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	789b      	ldrb	r3, [r3, #2]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d107      	bne.n	8000d8c <GPIO_init+0xa4>
		{
			register_bits = (((pinConfig->MODE << 2) | 0x00) & 0x0f);
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	789b      	ldrb	r3, [r3, #2]
 8000d80:	009b      	lsls	r3, r3, #2
 8000d82:	b2db      	uxtb	r3, r3
 8000d84:	f003 030f 	and.w	r3, r3, #15
 8000d88:	75fb      	strb	r3, [r7, #23]
 8000d8a:	e01c      	b.n	8000dc6 <GPIO_init+0xde>
		}
		else if (pinConfig->MODE == MODE_INPUT_AF)
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	789b      	ldrb	r3, [r3, #2]
 8000d90:	2b10      	cmp	r3, #16
 8000d92:	d102      	bne.n	8000d9a <GPIO_init+0xb2>
		{
			// consider alternative input as input floating
			register_bits = (((MODE_INPUT_FLO << 2) | 0x00) & 0x0f);
 8000d94:	2304      	movs	r3, #4
 8000d96:	75fb      	strb	r3, [r7, #23]
 8000d98:	e015      	b.n	8000dc6 <GPIO_init+0xde>
		}
		else
		{
			register_bits = (((MODE_INPUT_PU << 2) | 0x00) & 0x0f);
 8000d9a:	2308      	movs	r3, #8
 8000d9c:	75fb      	strb	r3, [r7, #23]
			if (pinConfig->MODE == MODE_INPUT_PU)
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	789b      	ldrb	r3, [r3, #2]
 8000da2:	2b02      	cmp	r3, #2
 8000da4:	d107      	bne.n	8000db6 <GPIO_init+0xce>
			{
				// set ODR register 1 for input pull up
				GPIOx->ODR |= pinConfig->Pin_Number;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	68db      	ldr	r3, [r3, #12]
 8000daa:	683a      	ldr	r2, [r7, #0]
 8000dac:	8812      	ldrh	r2, [r2, #0]
 8000dae:	431a      	orrs	r2, r3
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	60da      	str	r2, [r3, #12]
 8000db4:	e007      	b.n	8000dc6 <GPIO_init+0xde>
			}
			else
			{
				// set ODR register 0 for input pull down
				GPIOx->ODR &= ~(pinConfig->Pin_Number);
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	68db      	ldr	r3, [r3, #12]
 8000dba:	683a      	ldr	r2, [r7, #0]
 8000dbc:	8812      	ldrh	r2, [r2, #0]
 8000dbe:	43d2      	mvns	r2, r2
 8000dc0:	401a      	ands	r2, r3
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	60da      	str	r2, [r3, #12]
			}
		}

	}
	// write to CRL /CRH
	(*config_Register) |= (register_bits << shift_bit);
 8000dc6:	693b      	ldr	r3, [r7, #16]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	7df9      	ldrb	r1, [r7, #23]
 8000dcc:	7bfa      	ldrb	r2, [r7, #15]
 8000dce:	fa01 f202 	lsl.w	r2, r1, r2
 8000dd2:	431a      	orrs	r2, r3
 8000dd4:	693b      	ldr	r3, [r7, #16]
 8000dd6:	601a      	str	r2, [r3, #0]
}
 8000dd8:	bf00      	nop
 8000dda:	3718      	adds	r7, #24
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}

08000de0 <GPIO_WritePin>:
 * @param [in]	    - GPIOx : Select the port where the x can be (A..E depending on device used)
 * @param [in]	    - pinNumber : Must be a value from @ref GPIO_PINS_define
 * @param [in]	    - value : either HIGH or LOW from @ref GPIO_PIN_VALUE
 * @retval 			- none
 */
void GPIO_WritePin(GPIO_Registers_t *GPIOx, uint16 pinNumber, uint8 value) {
 8000de0:	b480      	push	{r7}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
 8000de8:	460b      	mov	r3, r1
 8000dea:	807b      	strh	r3, [r7, #2]
 8000dec:	4613      	mov	r3, r2
 8000dee:	707b      	strb	r3, [r7, #1]
	if (value != PIN_LOW) {
 8000df0:	787b      	ldrb	r3, [r7, #1]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d006      	beq.n	8000e04 <GPIO_WritePin+0x24>
		GPIOx->ODR |= (uint32)(pinNumber);
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	68da      	ldr	r2, [r3, #12]
 8000dfa:	887b      	ldrh	r3, [r7, #2]
 8000dfc:	431a      	orrs	r2, r3
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	60da      	str	r2, [r3, #12]
	} else {
		GPIOx->ODR &= ~((uint32)(pinNumber));
	}
}
 8000e02:	e006      	b.n	8000e12 <GPIO_WritePin+0x32>
		GPIOx->ODR &= ~((uint32)(pinNumber));
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	68da      	ldr	r2, [r3, #12]
 8000e08:	887b      	ldrh	r3, [r7, #2]
 8000e0a:	43db      	mvns	r3, r3
 8000e0c:	401a      	ands	r2, r3
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	60da      	str	r2, [r3, #12]
}
 8000e12:	bf00      	nop
 8000e14:	370c      	adds	r7, #12
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bc80      	pop	{r7}
 8000e1a:	4770      	bx	lr

08000e1c <NVIC_Enable>:
 * @brief          - Enables the NVIC interrupt pin
 * @param [in]     - IRQ_Number :  The specified Interrupt Number to be enabled
 * @retval         - none
 */

void NVIC_Enable(uint8 IRQ_Number) {
 8000e1c:	b480      	push	{r7}
 8000e1e:	b083      	sub	sp, #12
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	4603      	mov	r3, r0
 8000e24:	71fb      	strb	r3, [r7, #7]
	if ((IRQ_Number >= 0) && (IRQ_Number <= 31)) {
 8000e26:	79fb      	ldrb	r3, [r7, #7]
 8000e28:	2b1f      	cmp	r3, #31
 8000e2a:	d809      	bhi.n	8000e40 <NVIC_Enable+0x24>
		ISER0 |= (1U << IRQ_Number);
 8000e2c:	4b0f      	ldr	r3, [pc, #60]	@ (8000e6c <NVIC_Enable+0x50>)
 8000e2e:	681a      	ldr	r2, [r3, #0]
 8000e30:	79fb      	ldrb	r3, [r7, #7]
 8000e32:	2101      	movs	r1, #1
 8000e34:	fa01 f303 	lsl.w	r3, r1, r3
 8000e38:	490c      	ldr	r1, [pc, #48]	@ (8000e6c <NVIC_Enable+0x50>)
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	600b      	str	r3, [r1, #0]
	} else if ((IRQ_Number >= 32) && (IRQ_Number <= 59)) {
		ISER1 |= (1U << (IRQ_Number - 32));
	}
}
 8000e3e:	e00f      	b.n	8000e60 <NVIC_Enable+0x44>
	} else if ((IRQ_Number >= 32) && (IRQ_Number <= 59)) {
 8000e40:	79fb      	ldrb	r3, [r7, #7]
 8000e42:	2b1f      	cmp	r3, #31
 8000e44:	d90c      	bls.n	8000e60 <NVIC_Enable+0x44>
 8000e46:	79fb      	ldrb	r3, [r7, #7]
 8000e48:	2b3b      	cmp	r3, #59	@ 0x3b
 8000e4a:	d809      	bhi.n	8000e60 <NVIC_Enable+0x44>
		ISER1 |= (1U << (IRQ_Number - 32));
 8000e4c:	4b08      	ldr	r3, [pc, #32]	@ (8000e70 <NVIC_Enable+0x54>)
 8000e4e:	681a      	ldr	r2, [r3, #0]
 8000e50:	79fb      	ldrb	r3, [r7, #7]
 8000e52:	3b20      	subs	r3, #32
 8000e54:	2101      	movs	r1, #1
 8000e56:	fa01 f303 	lsl.w	r3, r1, r3
 8000e5a:	4905      	ldr	r1, [pc, #20]	@ (8000e70 <NVIC_Enable+0x54>)
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	600b      	str	r3, [r1, #0]
}
 8000e60:	bf00      	nop
 8000e62:	370c      	adds	r7, #12
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bc80      	pop	{r7}
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	e000e100 	.word	0xe000e100
 8000e70:	e000e104 	.word	0xe000e104

08000e74 <RCC_getSYSCLK_Freq>:
 1101: SYSCLK divided by 128
 1110: SYSCLK divided by 256
 1111: SYSCLK divided by 512
 */
uint8 AHB_PrescTable[16U] = { 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 6, 7, 8, 9 };
uint32 RCC_getSYSCLK_Freq(void) {
 8000e74:	b480      	push	{r7}
 8000e76:	b083      	sub	sp, #12
 8000e78:	af00      	add	r7, sp, #0
	/*
	 * 	00: HSI selected as system clock
	 01: HSE selected as system clock
	 10: PLL selected as system clock
	 */
	uint8 SW = (RCC->CFGR >> 2) & 0b11;
 8000e7a:	4b22      	ldr	r3, [pc, #136]	@ (8000f04 <RCC_getSYSCLK_Freq+0x90>)
 8000e7c:	685b      	ldr	r3, [r3, #4]
 8000e7e:	089b      	lsrs	r3, r3, #2
 8000e80:	b2db      	uxtb	r3, r3
 8000e82:	f003 0303 	and.w	r3, r3, #3
 8000e86:	70fb      	strb	r3, [r7, #3]
	uint32 sysClk = HSI;
 8000e88:	4b1f      	ldr	r3, [pc, #124]	@ (8000f08 <RCC_getSYSCLK_Freq+0x94>)
 8000e8a:	607b      	str	r3, [r7, #4]
	uint8 pll_src;
	switch (SW) {
 8000e8c:	78fb      	ldrb	r3, [r7, #3]
 8000e8e:	2b02      	cmp	r3, #2
 8000e90:	d00c      	beq.n	8000eac <RCC_getSYSCLK_Freq+0x38>
 8000e92:	2b02      	cmp	r3, #2
 8000e94:	dc30      	bgt.n	8000ef8 <RCC_getSYSCLK_Freq+0x84>
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d002      	beq.n	8000ea0 <RCC_getSYSCLK_Freq+0x2c>
 8000e9a:	2b01      	cmp	r3, #1
 8000e9c:	d003      	beq.n	8000ea6 <RCC_getSYSCLK_Freq+0x32>
 8000e9e:	e02b      	b.n	8000ef8 <RCC_getSYSCLK_Freq+0x84>
	case 0:
		sysClk = HSI;
 8000ea0:	4b19      	ldr	r3, [pc, #100]	@ (8000f08 <RCC_getSYSCLK_Freq+0x94>)
 8000ea2:	607b      	str	r3, [r7, #4]
		break;
 8000ea4:	e028      	b.n	8000ef8 <RCC_getSYSCLK_Freq+0x84>
	case 1:
		//todo need to calculate  it //HSE User Should Specify it
		sysClk = HSE;
 8000ea6:	4b18      	ldr	r3, [pc, #96]	@ (8000f08 <RCC_getSYSCLK_Freq+0x94>)
 8000ea8:	607b      	str	r3, [r7, #4]
		break;
 8000eaa:	e025      	b.n	8000ef8 <RCC_getSYSCLK_Freq+0x84>
	case 2:
		 pll_src = (RCC->CFGR >> 16) & 1 ;
 8000eac:	4b15      	ldr	r3, [pc, #84]	@ (8000f04 <RCC_getSYSCLK_Freq+0x90>)
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	0c1b      	lsrs	r3, r3, #16
 8000eb2:	b2db      	uxtb	r3, r3
 8000eb4:	f003 0301 	and.w	r3, r3, #1
 8000eb8:	70bb      	strb	r3, [r7, #2]
		if(pll_src){ // HSE
 8000eba:	78bb      	ldrb	r3, [r7, #2]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d00a      	beq.n	8000ed6 <RCC_getSYSCLK_Freq+0x62>
			 sysClk = GET(RCC->CFGR,17) == 1 ?( HSE /2) : HSE ; //check if HSE is divided by 2
 8000ec0:	4b10      	ldr	r3, [pc, #64]	@ (8000f04 <RCC_getSYSCLK_Freq+0x90>)
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ec8:	2b01      	cmp	r3, #1
 8000eca:	d101      	bne.n	8000ed0 <RCC_getSYSCLK_Freq+0x5c>
 8000ecc:	4b0f      	ldr	r3, [pc, #60]	@ (8000f0c <RCC_getSYSCLK_Freq+0x98>)
 8000ece:	e000      	b.n	8000ed2 <RCC_getSYSCLK_Freq+0x5e>
 8000ed0:	4b0d      	ldr	r3, [pc, #52]	@ (8000f08 <RCC_getSYSCLK_Freq+0x94>)
 8000ed2:	607b      	str	r3, [r7, #4]
 8000ed4:	e001      	b.n	8000eda <RCC_getSYSCLK_Freq+0x66>
		}else{ //HSI / 2 = 4MHZ
			sysClk = HSI/2 ;
 8000ed6:	4b0d      	ldr	r3, [pc, #52]	@ (8000f0c <RCC_getSYSCLK_Freq+0x98>)
 8000ed8:	607b      	str	r3, [r7, #4]
		}
		uint16 pll_mul = (RCC->CFGR >> 18) & 0b1111;
 8000eda:	4b0a      	ldr	r3, [pc, #40]	@ (8000f04 <RCC_getSYSCLK_Freq+0x90>)
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	0c9b      	lsrs	r3, r3, #18
 8000ee0:	b29b      	uxth	r3, r3
 8000ee2:	f003 030f 	and.w	r3, r3, #15
 8000ee6:	803b      	strh	r3, [r7, #0]
		sysClk = sysClk * (pll_mul+2);
 8000ee8:	883b      	ldrh	r3, [r7, #0]
 8000eea:	3302      	adds	r3, #2
 8000eec:	461a      	mov	r2, r3
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	fb02 f303 	mul.w	r3, r2, r3
 8000ef4:	607b      	str	r3, [r7, #4]
		break;
 8000ef6:	bf00      	nop

	}
	return sysClk;
 8000ef8:	687b      	ldr	r3, [r7, #4]
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	370c      	adds	r7, #12
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bc80      	pop	{r7}
 8000f02:	4770      	bx	lr
 8000f04:	40021000 	.word	0x40021000
 8000f08:	007a1200 	.word	0x007a1200
 8000f0c:	003d0900 	.word	0x003d0900

08000f10 <RCC_getPCKL1_Freq>:

uint32 RCC_getPCKL1_Freq(void) {
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
	/* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
	return (RCC_getHCKL_Freq() >> APB_PrescTable[((RCC->CFGR >> 8) & 0b111)]); // First right shift is multiplication
 8000f14:	f000 f824 	bl	8000f60 <RCC_getHCKL_Freq>
 8000f18:	4602      	mov	r2, r0
 8000f1a:	4b05      	ldr	r3, [pc, #20]	@ (8000f30 <RCC_getPCKL1_Freq+0x20>)
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	0a1b      	lsrs	r3, r3, #8
 8000f20:	f003 0307 	and.w	r3, r3, #7
 8000f24:	4903      	ldr	r1, [pc, #12]	@ (8000f34 <RCC_getPCKL1_Freq+0x24>)
 8000f26:	5ccb      	ldrb	r3, [r1, r3]
 8000f28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	40021000 	.word	0x40021000
 8000f34:	20000000 	.word	0x20000000

08000f38 <RCC_getPCKL2_Freq>:
uint32 RCC_getPCKL2_Freq(void) {
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
	/* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
	return (RCC_getHCKL_Freq() >> APB_PrescTable[((RCC->CFGR >> 11) & 0b111)]);
 8000f3c:	f000 f810 	bl	8000f60 <RCC_getHCKL_Freq>
 8000f40:	4602      	mov	r2, r0
 8000f42:	4b05      	ldr	r3, [pc, #20]	@ (8000f58 <RCC_getPCKL2_Freq+0x20>)
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	0adb      	lsrs	r3, r3, #11
 8000f48:	f003 0307 	and.w	r3, r3, #7
 8000f4c:	4903      	ldr	r1, [pc, #12]	@ (8000f5c <RCC_getPCKL2_Freq+0x24>)
 8000f4e:	5ccb      	ldrb	r3, [r1, r3]
 8000f50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	40021000 	.word	0x40021000
 8000f5c:	20000000 	.word	0x20000000

08000f60 <RCC_getHCKL_Freq>:
uint32 RCC_getHCKL_Freq(void) {
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
	/* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
	return (RCC_getSYSCLK_Freq() >> AHB_PrescTable[((RCC->CFGR >> 4) & 0b1111)]);
 8000f64:	f7ff ff86 	bl	8000e74 <RCC_getSYSCLK_Freq>
 8000f68:	4602      	mov	r2, r0
 8000f6a:	4b05      	ldr	r3, [pc, #20]	@ (8000f80 <RCC_getHCKL_Freq+0x20>)
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	091b      	lsrs	r3, r3, #4
 8000f70:	f003 030f 	and.w	r3, r3, #15
 8000f74:	4903      	ldr	r1, [pc, #12]	@ (8000f84 <RCC_getHCKL_Freq+0x24>)
 8000f76:	5ccb      	ldrb	r3, [r1, r3]
 8000f78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	40021000 	.word	0x40021000
 8000f84:	20000008 	.word	0x20000008

08000f88 <RCC_init>:

void RCC_init(RCC_CLKSrc_t clkSrc, RCC_HSESrc_t HSESrc, RCC_PLLSrc_t PLLSrc,
		uint8 PLLMUL) {
 8000f88:	b490      	push	{r4, r7}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	4604      	mov	r4, r0
 8000f90:	4608      	mov	r0, r1
 8000f92:	4611      	mov	r1, r2
 8000f94:	461a      	mov	r2, r3
 8000f96:	4623      	mov	r3, r4
 8000f98:	71fb      	strb	r3, [r7, #7]
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	71bb      	strb	r3, [r7, #6]
 8000f9e:	460b      	mov	r3, r1
 8000fa0:	717b      	strb	r3, [r7, #5]
 8000fa2:	4613      	mov	r3, r2
 8000fa4:	713b      	strb	r3, [r7, #4]
	switch (clkSrc) {
 8000fa6:	79fb      	ldrb	r3, [r7, #7]
 8000fa8:	2b10      	cmp	r3, #16
 8000faa:	d04d      	beq.n	8001048 <RCC_init+0xc0>
 8000fac:	2b10      	cmp	r3, #16
 8000fae:	f300 80a4 	bgt.w	80010fa <RCC_init+0x172>
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d002      	beq.n	8000fbc <RCC_init+0x34>
 8000fb6:	2b01      	cmp	r3, #1
 8000fb8:	d013      	beq.n	8000fe2 <RCC_init+0x5a>
			break;
		}
		break;

	}
}
 8000fba:	e09e      	b.n	80010fa <RCC_init+0x172>
		RCC->CR |= (1 << 0);
 8000fbc:	4b51      	ldr	r3, [pc, #324]	@ (8001104 <RCC_init+0x17c>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a50      	ldr	r2, [pc, #320]	@ (8001104 <RCC_init+0x17c>)
 8000fc2:	f043 0301 	orr.w	r3, r3, #1
 8000fc6:	6013      	str	r3, [r2, #0]
		RCC->CFGR &= ~(1 << 0);
 8000fc8:	4b4e      	ldr	r3, [pc, #312]	@ (8001104 <RCC_init+0x17c>)
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	4a4d      	ldr	r2, [pc, #308]	@ (8001104 <RCC_init+0x17c>)
 8000fce:	f023 0301 	bic.w	r3, r3, #1
 8000fd2:	6053      	str	r3, [r2, #4]
		RCC->CFGR &= ~(1 << 1);
 8000fd4:	4b4b      	ldr	r3, [pc, #300]	@ (8001104 <RCC_init+0x17c>)
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	4a4a      	ldr	r2, [pc, #296]	@ (8001104 <RCC_init+0x17c>)
 8000fda:	f023 0302 	bic.w	r3, r3, #2
 8000fde:	6053      	str	r3, [r2, #4]
		break;
 8000fe0:	e08b      	b.n	80010fa <RCC_init+0x172>
		RCC->CR |= (1 << 16);
 8000fe2:	4b48      	ldr	r3, [pc, #288]	@ (8001104 <RCC_init+0x17c>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4a47      	ldr	r2, [pc, #284]	@ (8001104 <RCC_init+0x17c>)
 8000fe8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000fec:	6013      	str	r3, [r2, #0]
		switch (HSESrc) {
 8000fee:	79bb      	ldrb	r3, [r7, #6]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d002      	beq.n	8000ffa <RCC_init+0x72>
 8000ff4:	2b01      	cmp	r3, #1
 8000ff6:	d013      	beq.n	8001020 <RCC_init+0x98>
		break;
 8000ff8:	e07f      	b.n	80010fa <RCC_init+0x172>
			RCC->CR &= ~(1 << 18);
 8000ffa:	4b42      	ldr	r3, [pc, #264]	@ (8001104 <RCC_init+0x17c>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4a41      	ldr	r2, [pc, #260]	@ (8001104 <RCC_init+0x17c>)
 8001000:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001004:	6013      	str	r3, [r2, #0]
			RCC->CFGR |= (1 << 0);
 8001006:	4b3f      	ldr	r3, [pc, #252]	@ (8001104 <RCC_init+0x17c>)
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	4a3e      	ldr	r2, [pc, #248]	@ (8001104 <RCC_init+0x17c>)
 800100c:	f043 0301 	orr.w	r3, r3, #1
 8001010:	6053      	str	r3, [r2, #4]
			RCC->CFGR &= ~(1 << 1);
 8001012:	4b3c      	ldr	r3, [pc, #240]	@ (8001104 <RCC_init+0x17c>)
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	4a3b      	ldr	r2, [pc, #236]	@ (8001104 <RCC_init+0x17c>)
 8001018:	f023 0302 	bic.w	r3, r3, #2
 800101c:	6053      	str	r3, [r2, #4]
			break;
 800101e:	e012      	b.n	8001046 <RCC_init+0xbe>
			RCC->CR |= (1 << 18);
 8001020:	4b38      	ldr	r3, [pc, #224]	@ (8001104 <RCC_init+0x17c>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a37      	ldr	r2, [pc, #220]	@ (8001104 <RCC_init+0x17c>)
 8001026:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800102a:	6013      	str	r3, [r2, #0]
			RCC->CFGR |= (1 << 0);
 800102c:	4b35      	ldr	r3, [pc, #212]	@ (8001104 <RCC_init+0x17c>)
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	4a34      	ldr	r2, [pc, #208]	@ (8001104 <RCC_init+0x17c>)
 8001032:	f043 0301 	orr.w	r3, r3, #1
 8001036:	6053      	str	r3, [r2, #4]
			RCC->CFGR &= ~(1 << 1);
 8001038:	4b32      	ldr	r3, [pc, #200]	@ (8001104 <RCC_init+0x17c>)
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	4a31      	ldr	r2, [pc, #196]	@ (8001104 <RCC_init+0x17c>)
 800103e:	f023 0302 	bic.w	r3, r3, #2
 8001042:	6053      	str	r3, [r2, #4]
			break;
 8001044:	bf00      	nop
		break;
 8001046:	e058      	b.n	80010fa <RCC_init+0x172>
		switch (PLLSrc) {
 8001048:	797b      	ldrb	r3, [r7, #5]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d002      	beq.n	8001054 <RCC_init+0xcc>
 800104e:	2b01      	cmp	r3, #1
 8001050:	d02c      	beq.n	80010ac <RCC_init+0x124>
		break;
 8001052:	e051      	b.n	80010f8 <RCC_init+0x170>
			RCC->CFGR |= (1 << 16);
 8001054:	4b2b      	ldr	r3, [pc, #172]	@ (8001104 <RCC_init+0x17c>)
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	4a2a      	ldr	r2, [pc, #168]	@ (8001104 <RCC_init+0x17c>)
 800105a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800105e:	6053      	str	r3, [r2, #4]
			RCC->CFGR &= ~(1 << 17);
 8001060:	4b28      	ldr	r3, [pc, #160]	@ (8001104 <RCC_init+0x17c>)
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	4a27      	ldr	r2, [pc, #156]	@ (8001104 <RCC_init+0x17c>)
 8001066:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800106a:	6053      	str	r3, [r2, #4]
			RCC->CFGR |= (PLLMUL << 18);
 800106c:	4b25      	ldr	r3, [pc, #148]	@ (8001104 <RCC_init+0x17c>)
 800106e:	685a      	ldr	r2, [r3, #4]
 8001070:	793b      	ldrb	r3, [r7, #4]
 8001072:	049b      	lsls	r3, r3, #18
 8001074:	4923      	ldr	r1, [pc, #140]	@ (8001104 <RCC_init+0x17c>)
 8001076:	4313      	orrs	r3, r2
 8001078:	604b      	str	r3, [r1, #4]
			RCC->CR |= (1 << 24);
 800107a:	4b22      	ldr	r3, [pc, #136]	@ (8001104 <RCC_init+0x17c>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4a21      	ldr	r2, [pc, #132]	@ (8001104 <RCC_init+0x17c>)
 8001080:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001084:	6013      	str	r3, [r2, #0]
			RCC->CR |= (1 << 16);
 8001086:	4b1f      	ldr	r3, [pc, #124]	@ (8001104 <RCC_init+0x17c>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4a1e      	ldr	r2, [pc, #120]	@ (8001104 <RCC_init+0x17c>)
 800108c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001090:	6013      	str	r3, [r2, #0]
			RCC->CFGR &= ~(1 << 0);
 8001092:	4b1c      	ldr	r3, [pc, #112]	@ (8001104 <RCC_init+0x17c>)
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	4a1b      	ldr	r2, [pc, #108]	@ (8001104 <RCC_init+0x17c>)
 8001098:	f023 0301 	bic.w	r3, r3, #1
 800109c:	6053      	str	r3, [r2, #4]
			RCC->CFGR |= (1 << 1);
 800109e:	4b19      	ldr	r3, [pc, #100]	@ (8001104 <RCC_init+0x17c>)
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	4a18      	ldr	r2, [pc, #96]	@ (8001104 <RCC_init+0x17c>)
 80010a4:	f043 0302 	orr.w	r3, r3, #2
 80010a8:	6053      	str	r3, [r2, #4]
			break;
 80010aa:	e025      	b.n	80010f8 <RCC_init+0x170>
			RCC->CR |= (1 << 0);
 80010ac:	4b15      	ldr	r3, [pc, #84]	@ (8001104 <RCC_init+0x17c>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a14      	ldr	r2, [pc, #80]	@ (8001104 <RCC_init+0x17c>)
 80010b2:	f043 0301 	orr.w	r3, r3, #1
 80010b6:	6013      	str	r3, [r2, #0]
			RCC->CFGR |= (PLLMUL << 18);
 80010b8:	4b12      	ldr	r3, [pc, #72]	@ (8001104 <RCC_init+0x17c>)
 80010ba:	685a      	ldr	r2, [r3, #4]
 80010bc:	793b      	ldrb	r3, [r7, #4]
 80010be:	049b      	lsls	r3, r3, #18
 80010c0:	4910      	ldr	r1, [pc, #64]	@ (8001104 <RCC_init+0x17c>)
 80010c2:	4313      	orrs	r3, r2
 80010c4:	604b      	str	r3, [r1, #4]
			RCC->CR |= (1 << 24);
 80010c6:	4b0f      	ldr	r3, [pc, #60]	@ (8001104 <RCC_init+0x17c>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4a0e      	ldr	r2, [pc, #56]	@ (8001104 <RCC_init+0x17c>)
 80010cc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80010d0:	6013      	str	r3, [r2, #0]
			RCC->CFGR &= ~(1 << 0);
 80010d2:	4b0c      	ldr	r3, [pc, #48]	@ (8001104 <RCC_init+0x17c>)
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	4a0b      	ldr	r2, [pc, #44]	@ (8001104 <RCC_init+0x17c>)
 80010d8:	f023 0301 	bic.w	r3, r3, #1
 80010dc:	6053      	str	r3, [r2, #4]
			RCC->CFGR |= (1 << 1);
 80010de:	4b09      	ldr	r3, [pc, #36]	@ (8001104 <RCC_init+0x17c>)
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	4a08      	ldr	r2, [pc, #32]	@ (8001104 <RCC_init+0x17c>)
 80010e4:	f043 0302 	orr.w	r3, r3, #2
 80010e8:	6053      	str	r3, [r2, #4]
			RCC->CFGR &= ~(1 << 16);
 80010ea:	4b06      	ldr	r3, [pc, #24]	@ (8001104 <RCC_init+0x17c>)
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	4a05      	ldr	r2, [pc, #20]	@ (8001104 <RCC_init+0x17c>)
 80010f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80010f4:	6053      	str	r3, [r2, #4]
			break;
 80010f6:	bf00      	nop
		break;
 80010f8:	bf00      	nop
}
 80010fa:	bf00      	nop
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bc90      	pop	{r4, r7}
 8001102:	4770      	bx	lr
 8001104:	40021000 	.word	0x40021000

08001108 <RCC_CLK_EN>:

void RCC_CLK_EN(uint8 busID, uint8 periphralID) {
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	4603      	mov	r3, r0
 8001110:	460a      	mov	r2, r1
 8001112:	71fb      	strb	r3, [r7, #7]
 8001114:	4613      	mov	r3, r2
 8001116:	71bb      	strb	r3, [r7, #6]
	switch (busID) {
 8001118:	79fb      	ldrb	r3, [r7, #7]
 800111a:	2b02      	cmp	r3, #2
 800111c:	d01c      	beq.n	8001158 <RCC_CLK_EN+0x50>
 800111e:	2b02      	cmp	r3, #2
 8001120:	dc25      	bgt.n	800116e <RCC_CLK_EN+0x66>
 8001122:	2b00      	cmp	r3, #0
 8001124:	d002      	beq.n	800112c <RCC_CLK_EN+0x24>
 8001126:	2b01      	cmp	r3, #1
 8001128:	d00b      	beq.n	8001142 <RCC_CLK_EN+0x3a>
		break;
	case AHB_ID:
		RCC->AHBENR |= (1 << periphralID);
		break;
	}
}
 800112a:	e020      	b.n	800116e <RCC_CLK_EN+0x66>
		RCC->ABP1ENR |= (1 << periphralID);
 800112c:	4b12      	ldr	r3, [pc, #72]	@ (8001178 <RCC_CLK_EN+0x70>)
 800112e:	69db      	ldr	r3, [r3, #28]
 8001130:	79ba      	ldrb	r2, [r7, #6]
 8001132:	2101      	movs	r1, #1
 8001134:	fa01 f202 	lsl.w	r2, r1, r2
 8001138:	4611      	mov	r1, r2
 800113a:	4a0f      	ldr	r2, [pc, #60]	@ (8001178 <RCC_CLK_EN+0x70>)
 800113c:	430b      	orrs	r3, r1
 800113e:	61d3      	str	r3, [r2, #28]
		break;
 8001140:	e015      	b.n	800116e <RCC_CLK_EN+0x66>
		RCC->ABP2ENR |= (1 << periphralID);
 8001142:	4b0d      	ldr	r3, [pc, #52]	@ (8001178 <RCC_CLK_EN+0x70>)
 8001144:	699b      	ldr	r3, [r3, #24]
 8001146:	79ba      	ldrb	r2, [r7, #6]
 8001148:	2101      	movs	r1, #1
 800114a:	fa01 f202 	lsl.w	r2, r1, r2
 800114e:	4611      	mov	r1, r2
 8001150:	4a09      	ldr	r2, [pc, #36]	@ (8001178 <RCC_CLK_EN+0x70>)
 8001152:	430b      	orrs	r3, r1
 8001154:	6193      	str	r3, [r2, #24]
		break;
 8001156:	e00a      	b.n	800116e <RCC_CLK_EN+0x66>
		RCC->AHBENR |= (1 << periphralID);
 8001158:	4b07      	ldr	r3, [pc, #28]	@ (8001178 <RCC_CLK_EN+0x70>)
 800115a:	695b      	ldr	r3, [r3, #20]
 800115c:	79ba      	ldrb	r2, [r7, #6]
 800115e:	2101      	movs	r1, #1
 8001160:	fa01 f202 	lsl.w	r2, r1, r2
 8001164:	4611      	mov	r1, r2
 8001166:	4a04      	ldr	r2, [pc, #16]	@ (8001178 <RCC_CLK_EN+0x70>)
 8001168:	430b      	orrs	r3, r1
 800116a:	6153      	str	r3, [r2, #20]
		break;
 800116c:	bf00      	nop
}
 800116e:	bf00      	nop
 8001170:	370c      	adds	r7, #12
 8001172:	46bd      	mov	sp, r7
 8001174:	bc80      	pop	{r7}
 8001176:	4770      	bx	lr
 8001178:	40021000 	.word	0x40021000

0800117c <STK_init>:
 * =======================================================================================
 * 							Generic Functions
 * =======================================================================================
 */

void STK_init() {
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
	// Set number of Ticks for one microsecond.
	microSecond = (uint32) CPU_INPUT_CLOCK / 1000000;
 8001180:	f7ff fe78 	bl	8000e74 <RCC_getSYSCLK_Freq>
 8001184:	4603      	mov	r3, r0
 8001186:	4a0c      	ldr	r2, [pc, #48]	@ (80011b8 <STK_init+0x3c>)
 8001188:	fba2 2303 	umull	r2, r3, r2, r3
 800118c:	0c9b      	lsrs	r3, r3, #18
 800118e:	4a0b      	ldr	r2, [pc, #44]	@ (80011bc <STK_init+0x40>)
 8001190:	6013      	str	r3, [r2, #0]

#if STK_CLK_SRC == AHB_8
	microSecond = microSecond/8;		// Assuming system clock is HSI
 8001192:	4b0a      	ldr	r3, [pc, #40]	@ (80011bc <STK_init+0x40>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	08db      	lsrs	r3, r3, #3
 8001198:	4a08      	ldr	r2, [pc, #32]	@ (80011bc <STK_init+0x40>)
 800119a:	6013      	str	r3, [r2, #0]
	CLEAR(SYSTICK->CTRL, 2);
 800119c:	4b08      	ldr	r3, [pc, #32]	@ (80011c0 <STK_init+0x44>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a07      	ldr	r2, [pc, #28]	@ (80011c0 <STK_init+0x44>)
 80011a2:	f023 0304 	bic.w	r3, r3, #4
 80011a6:	6013      	str	r3, [r2, #0]
#endif
#if STK_CLK_SRC == AHB
	SET(SYSTICK->CTRL, 2);
#endif
	SET(SYSTICK->CTRL, 0); // enable
 80011a8:	4b05      	ldr	r3, [pc, #20]	@ (80011c0 <STK_init+0x44>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a04      	ldr	r2, [pc, #16]	@ (80011c0 <STK_init+0x44>)
 80011ae:	f043 0301 	orr.w	r3, r3, #1
 80011b2:	6013      	str	r3, [r2, #0]

}
 80011b4:	bf00      	nop
 80011b6:	bd80      	pop	{r7, pc}
 80011b8:	431bde83 	.word	0x431bde83
 80011bc:	20000018 	.word	0x20000018
 80011c0:	e000e010 	.word	0xe000e010

080011c4 <STK_delayMs>:
	SYSTICK->LOAD = 0;
	SYSTICK->VAL = 0;

}

void STK_delayMs(uint32 time) {
 80011c4:	b480      	push	{r7}
 80011c6:	b085      	sub	sp, #20
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
	for (uint32 i = 0; i < time; i++) {
 80011cc:	2300      	movs	r3, #0
 80011ce:	60fb      	str	r3, [r7, #12]
 80011d0:	e029      	b.n	8001226 <STK_delayMs+0x62>

		//Enable Systick
		SET(SYSTICK->CTRL, 0);
 80011d2:	4b1a      	ldr	r3, [pc, #104]	@ (800123c <STK_delayMs+0x78>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4a19      	ldr	r2, [pc, #100]	@ (800123c <STK_delayMs+0x78>)
 80011d8:	f043 0301 	orr.w	r3, r3, #1
 80011dc:	6013      	str	r3, [r2, #0]
		//Disable Interrupt
		CLEAR(SYSTICK->CTRL, 1);
 80011de:	4b17      	ldr	r3, [pc, #92]	@ (800123c <STK_delayMs+0x78>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4a16      	ldr	r2, [pc, #88]	@ (800123c <STK_delayMs+0x78>)
 80011e4:	f023 0302 	bic.w	r3, r3, #2
 80011e8:	6013      	str	r3, [r2, #0]
		SYSTICK->LOAD = 1000 * microSecond;
 80011ea:	4b15      	ldr	r3, [pc, #84]	@ (8001240 <STK_delayMs+0x7c>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4a13      	ldr	r2, [pc, #76]	@ (800123c <STK_delayMs+0x78>)
 80011f0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80011f4:	fb01 f303 	mul.w	r3, r1, r3
 80011f8:	6053      	str	r3, [r2, #4]
		//Wait for flag
		while (!GET(SYSTICK->CTRL, 16))
 80011fa:	bf00      	nop
 80011fc:	4b0f      	ldr	r3, [pc, #60]	@ (800123c <STK_delayMs+0x78>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001204:	2b00      	cmp	r3, #0
 8001206:	d0f9      	beq.n	80011fc <STK_delayMs+0x38>
			;
		//Disable Systick
		SYSTICK->LOAD = 0;
 8001208:	4b0c      	ldr	r3, [pc, #48]	@ (800123c <STK_delayMs+0x78>)
 800120a:	2200      	movs	r2, #0
 800120c:	605a      	str	r2, [r3, #4]
		SYSTICK->VAL = 0;
 800120e:	4b0b      	ldr	r3, [pc, #44]	@ (800123c <STK_delayMs+0x78>)
 8001210:	2200      	movs	r2, #0
 8001212:	609a      	str	r2, [r3, #8]
		CLEAR(SYSTICK->CTRL, 0);
 8001214:	4b09      	ldr	r3, [pc, #36]	@ (800123c <STK_delayMs+0x78>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a08      	ldr	r2, [pc, #32]	@ (800123c <STK_delayMs+0x78>)
 800121a:	f023 0301 	bic.w	r3, r3, #1
 800121e:	6013      	str	r3, [r2, #0]
	for (uint32 i = 0; i < time; i++) {
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	3301      	adds	r3, #1
 8001224:	60fb      	str	r3, [r7, #12]
 8001226:	68fa      	ldr	r2, [r7, #12]
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	429a      	cmp	r2, r3
 800122c:	d3d1      	bcc.n	80011d2 <STK_delayMs+0xe>
	}
}
 800122e:	bf00      	nop
 8001230:	bf00      	nop
 8001232:	3714      	adds	r7, #20
 8001234:	46bd      	mov	sp, r7
 8001236:	bc80      	pop	{r7}
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	e000e010 	.word	0xe000e010
 8001240:	20000018 	.word	0x20000018

08001244 <SysTick_Handler>:
uint32 STK_getRemainingTime() {
	return (SYSTICK->VAL);

}

void SysTick_Handler() {
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
	uint8 flag = 0;
 800124a:	2300      	movs	r3, #0
 800124c:	71fb      	strb	r3, [r7, #7]
#if STK_MODE == SINGLE
	SYSTICK->LOAD = 0;
 800124e:	4b0e      	ldr	r3, [pc, #56]	@ (8001288 <SysTick_Handler+0x44>)
 8001250:	2200      	movs	r2, #0
 8001252:	605a      	str	r2, [r3, #4]
	SYSTICK->VAL = 0;
 8001254:	4b0c      	ldr	r3, [pc, #48]	@ (8001288 <SysTick_Handler+0x44>)
 8001256:	2200      	movs	r2, #0
 8001258:	609a      	str	r2, [r3, #8]
	CLEAR(SYSTICK->CTRL, 0);
 800125a:	4b0b      	ldr	r3, [pc, #44]	@ (8001288 <SysTick_Handler+0x44>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4a0a      	ldr	r2, [pc, #40]	@ (8001288 <SysTick_Handler+0x44>)
 8001260:	f023 0301 	bic.w	r3, r3, #1
 8001264:	6013      	str	r3, [r2, #0]
	CLEAR(SYSTICK->CTRL, 1);
 8001266:	4b08      	ldr	r3, [pc, #32]	@ (8001288 <SysTick_Handler+0x44>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4a07      	ldr	r2, [pc, #28]	@ (8001288 <SysTick_Handler+0x44>)
 800126c:	f023 0302 	bic.w	r3, r3, #2
 8001270:	6013      	str	r3, [r2, #0]
#endif

	P_CallBack_Fun();
 8001272:	4b06      	ldr	r3, [pc, #24]	@ (800128c <SysTick_Handler+0x48>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4798      	blx	r3
	flag = GET(SYSTICK->CTRL, 16);
 8001278:	4b03      	ldr	r3, [pc, #12]	@ (8001288 <SysTick_Handler+0x44>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	2300      	movs	r3, #0
 800127e:	71fb      	strb	r3, [r7, #7]
}
 8001280:	bf00      	nop
 8001282:	3708      	adds	r7, #8
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}
 8001288:	e000e010 	.word	0xe000e010
 800128c:	200000d0 	.word	0x200000d0

08001290 <USART_init>:
 * @param [in] 		- USARTx: where x can be (1..3 depending on device used)
 * @param [in] 		- pinConfig: All UART Configuration USART_pinConfig_t
 * @retval 			-none
 * Note				-Support for Now Asynch mode & Clock 8 MHZ S
 */
void USART_init(USART_pinConfig_t *pinConfig, USART_Registers_t *USARTx) {
 8001290:	b5b0      	push	{r4, r5, r7, lr}
 8001292:	b084      	sub	sp, #16
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
 8001298:	6039      	str	r1, [r7, #0]
	uint32 BRR, pclk;

	/*            Enable USART clocks      */
	if (USARTx == USART1) {
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	4a59      	ldr	r2, [pc, #356]	@ (8001404 <USART_init+0x174>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d10b      	bne.n	80012ba <USART_init+0x2a>
		Global_pinConfig[USART1_Index] = *pinConfig;
 80012a2:	4a59      	ldr	r2, [pc, #356]	@ (8001408 <USART_init+0x178>)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	4614      	mov	r4, r2
 80012a8:	461d      	mov	r5, r3
 80012aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012ae:	682b      	ldr	r3, [r5, #0]
 80012b0:	6023      	str	r3, [r4, #0]
		RCC_CLK_EN(APB2_ID, USART1_ID);
 80012b2:	210e      	movs	r1, #14
 80012b4:	2001      	movs	r0, #1
 80012b6:	f7ff ff27 	bl	8001108 <RCC_CLK_EN>
	}
	if (USARTx == USART2) {
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	4a53      	ldr	r2, [pc, #332]	@ (800140c <USART_init+0x17c>)
 80012be:	4293      	cmp	r3, r2
 80012c0:	d10d      	bne.n	80012de <USART_init+0x4e>
		Global_pinConfig[USART2_Index] = *pinConfig;
 80012c2:	4b51      	ldr	r3, [pc, #324]	@ (8001408 <USART_init+0x178>)
 80012c4:	687a      	ldr	r2, [r7, #4]
 80012c6:	f103 0414 	add.w	r4, r3, #20
 80012ca:	4615      	mov	r5, r2
 80012cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012d0:	682b      	ldr	r3, [r5, #0]
 80012d2:	6023      	str	r3, [r4, #0]
		RCC_CLK_EN(APB1_ID, USART2_ID);
 80012d4:	2111      	movs	r1, #17
 80012d6:	2000      	movs	r0, #0
 80012d8:	f7ff ff16 	bl	8001108 <RCC_CLK_EN>
 80012dc:	e010      	b.n	8001300 <USART_init+0x70>
	} else if (USARTx == USART3) {
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	4a4b      	ldr	r2, [pc, #300]	@ (8001410 <USART_init+0x180>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d10c      	bne.n	8001300 <USART_init+0x70>
		Global_pinConfig[USART3_Index] = *pinConfig;
 80012e6:	4b48      	ldr	r3, [pc, #288]	@ (8001408 <USART_init+0x178>)
 80012e8:	687a      	ldr	r2, [r7, #4]
 80012ea:	f103 0428 	add.w	r4, r3, #40	@ 0x28
 80012ee:	4615      	mov	r5, r2
 80012f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012f4:	682b      	ldr	r3, [r5, #0]
 80012f6:	6023      	str	r3, [r4, #0]
		RCC_CLK_EN(APB1_ID, USART3_ID);
 80012f8:	2112      	movs	r1, #18
 80012fa:	2000      	movs	r0, #0
 80012fc:	f7ff ff04 	bl	8001108 <RCC_CLK_EN>
	}

	/*            Enable USART Module    	  */
	//Bit 13 UE: USART enable
	USARTx->CR1 |= (1 << 13);
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	68db      	ldr	r3, [r3, #12]
 8001304:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	60da      	str	r2, [r3, #12]
	/*            Enable TX/RX  		      */
	USARTx->CR1 |= pinConfig->USART_Mode;
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	68db      	ldr	r3, [r3, #12]
 8001310:	687a      	ldr	r2, [r7, #4]
 8001312:	7812      	ldrb	r2, [r2, #0]
 8001314:	431a      	orrs	r2, r3
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	60da      	str	r2, [r3, #12]
	/*            Define The StopBits         */
	USARTx->CR2 |= pinConfig->StopBits;
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	691b      	ldr	r3, [r3, #16]
 800131e:	687a      	ldr	r2, [r7, #4]
 8001320:	7a12      	ldrb	r2, [r2, #8]
 8001322:	431a      	orrs	r2, r3
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	611a      	str	r2, [r3, #16]
	/*            Define The DataBits         */
	USARTx->CR1 |= pinConfig->DataLength;
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	68db      	ldr	r3, [r3, #12]
 800132c:	687a      	ldr	r2, [r7, #4]
 800132e:	7a52      	ldrb	r2, [r2, #9]
 8001330:	431a      	orrs	r2, r3
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	60da      	str	r2, [r3, #12]
	/*            Configure The Parity        */
	USARTx->CR1 |= pinConfig->Parity;
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	68db      	ldr	r3, [r3, #12]
 800133a:	687a      	ldr	r2, [r7, #4]
 800133c:	7a92      	ldrb	r2, [r2, #10]
 800133e:	431a      	orrs	r2, r3
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	60da      	str	r2, [r3, #12]
	/*            Hardware Flow Control       */
	USARTx->CR3 |= pinConfig->FlowControl;
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	695b      	ldr	r3, [r3, #20]
 8001348:	687a      	ldr	r2, [r7, #4]
 800134a:	7ad2      	ldrb	r2, [r2, #11]
 800134c:	431a      	orrs	r2, r3
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	615a      	str	r2, [r3, #20]
	/*            Define The BaudRate	      */
//FCLK - Input clock to the peripheral (PCLK1 for USART2, 3 or PCLK2 for USART1)
	if (USARTx == USART1) {
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	4a2b      	ldr	r2, [pc, #172]	@ (8001404 <USART_init+0x174>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d103      	bne.n	8001362 <USART_init+0xd2>
		pclk = RCC_getPCKL2_Freq();
 800135a:	f7ff fded 	bl	8000f38 <RCC_getPCKL2_Freq>
 800135e:	60f8      	str	r0, [r7, #12]
 8001360:	e002      	b.n	8001368 <USART_init+0xd8>
	} else {
		pclk = RCC_getPCKL1_Freq();
 8001362:	f7ff fdd5 	bl	8000f10 <RCC_getPCKL1_Freq>
 8001366:	60f8      	str	r0, [r7, #12]
	}

	BRR = USART_BRR(pclk, pinConfig->BaudRate);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	011b      	lsls	r3, r3, #4
 800136e:	68fa      	ldr	r2, [r7, #12]
 8001370:	fbb2 f3f3 	udiv	r3, r2, r3
 8001374:	0119      	lsls	r1, r3, #4
 8001376:	68fa      	ldr	r2, [r7, #12]
 8001378:	4613      	mov	r3, r2
 800137a:	009b      	lsls	r3, r3, #2
 800137c:	4413      	add	r3, r2
 800137e:	009a      	lsls	r2, r3, #2
 8001380:	441a      	add	r2, r3
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	009b      	lsls	r3, r3, #2
 8001388:	fbb2 f2f3 	udiv	r2, r2, r3
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	011b      	lsls	r3, r3, #4
 8001392:	68f8      	ldr	r0, [r7, #12]
 8001394:	fbb0 f3f3 	udiv	r3, r0, r3
 8001398:	2064      	movs	r0, #100	@ 0x64
 800139a:	fb00 f303 	mul.w	r3, r0, r3
 800139e:	1ad3      	subs	r3, r2, r3
 80013a0:	011b      	lsls	r3, r3, #4
 80013a2:	4a1c      	ldr	r2, [pc, #112]	@ (8001414 <USART_init+0x184>)
 80013a4:	fba2 2303 	umull	r2, r3, r2, r3
 80013a8:	095b      	lsrs	r3, r3, #5
 80013aa:	f003 030f 	and.w	r3, r3, #15
 80013ae:	430b      	orrs	r3, r1
 80013b0:	60bb      	str	r3, [r7, #8]
	USARTx->BRR = BRR;
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	68ba      	ldr	r2, [r7, #8]
 80013b6:	609a      	str	r2, [r3, #8]

	/*            Enabling The Interrupt      */
	if (pinConfig->IRQ_Enable != USART_NONE) {
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	7b1b      	ldrb	r3, [r3, #12]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d01d      	beq.n	80013fc <USART_init+0x16c>
		USARTx->CR1 |= (pinConfig->IRQ_Enable);
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	68db      	ldr	r3, [r3, #12]
 80013c4:	687a      	ldr	r2, [r7, #4]
 80013c6:	7b12      	ldrb	r2, [r2, #12]
 80013c8:	431a      	orrs	r2, r3
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	60da      	str	r2, [r3, #12]
		//		Enable NVIC For USARTx IRQ
		if (USARTx == USART1) {
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	4a0c      	ldr	r2, [pc, #48]	@ (8001404 <USART_init+0x174>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d103      	bne.n	80013de <USART_init+0x14e>
			NVIC_Enable(NVIC_USART1);
 80013d6:	2025      	movs	r0, #37	@ 0x25
 80013d8:	f7ff fd20 	bl	8000e1c <NVIC_Enable>
			NVIC_Enable(NVIC_USART2);
		} else if (USARTx == USART3) {
			NVIC_Enable(NVIC_USART3);
		}
	}
}
 80013dc:	e00e      	b.n	80013fc <USART_init+0x16c>
		} else if (USARTx == USART2) {
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	4a0a      	ldr	r2, [pc, #40]	@ (800140c <USART_init+0x17c>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d103      	bne.n	80013ee <USART_init+0x15e>
			NVIC_Enable(NVIC_USART2);
 80013e6:	2026      	movs	r0, #38	@ 0x26
 80013e8:	f7ff fd18 	bl	8000e1c <NVIC_Enable>
}
 80013ec:	e006      	b.n	80013fc <USART_init+0x16c>
		} else if (USARTx == USART3) {
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	4a07      	ldr	r2, [pc, #28]	@ (8001410 <USART_init+0x180>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d102      	bne.n	80013fc <USART_init+0x16c>
			NVIC_Enable(NVIC_USART3);
 80013f6:	2027      	movs	r0, #39	@ 0x27
 80013f8:	f7ff fd10 	bl	8000e1c <NVIC_Enable>
}
 80013fc:	bf00      	nop
 80013fe:	3710      	adds	r7, #16
 8001400:	46bd      	mov	sp, r7
 8001402:	bdb0      	pop	{r4, r5, r7, pc}
 8001404:	40013800 	.word	0x40013800
 8001408:	200000d4 	.word	0x200000d4
 800140c:	40004400 	.word	0x40004400
 8001410:	40004800 	.word	0x40004800
 8001414:	51eb851f 	.word	0x51eb851f

08001418 <USART_SetPins>:
 * @brief 			-initialize GPIO Pins
 * @param [in] 		-USARTx: where x can be (1..3 depending on device used)
 * @retval 			-none
 * @Note			-Should enable the corresponding ALT  & GPIO  in RCC clock Also called after USART_Init()
 */
void USART_SetPins(USART_Registers_t *USARTx) {
 8001418:	b580      	push	{r7, lr}
 800141a:	b084      	sub	sp, #16
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
	GPIO_PinConfig_t GPIO_pinConfig;
	if (USARTx == USART1) {
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	4a2b      	ldr	r2, [pc, #172]	@ (80014d0 <USART_SetPins+0xb8>)
 8001424:	4293      	cmp	r3, r2
 8001426:	d118      	bne.n	800145a <USART_SetPins+0x42>
		// configure  TX PORTA PIN9 As Alternate function Push pull
		GPIO_pinConfig.MODE = MODE_OUTPUT_AF_PP;
 8001428:	2306      	movs	r3, #6
 800142a:	73bb      	strb	r3, [r7, #14]
		GPIO_pinConfig.Output_Speed = SPEED_10M;
 800142c:	2301      	movs	r3, #1
 800142e:	73fb      	strb	r3, [r7, #15]
		GPIO_pinConfig.Pin_Number = PIN_9;
 8001430:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001434:	81bb      	strh	r3, [r7, #12]
		GPIO_init(GPIOA, &GPIO_pinConfig);
 8001436:	f107 030c 	add.w	r3, r7, #12
 800143a:	4619      	mov	r1, r3
 800143c:	4825      	ldr	r0, [pc, #148]	@ (80014d4 <USART_SetPins+0xbc>)
 800143e:	f7ff fc53 	bl	8000ce8 <GPIO_init>
		// configure  RX PORTA PIN10 As  Alternate function INPUT
		GPIO_pinConfig.MODE = MODE_INPUT_AF;
 8001442:	2310      	movs	r3, #16
 8001444:	73bb      	strb	r3, [r7, #14]
		GPIO_pinConfig.Pin_Number = PIN_10;
 8001446:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800144a:	81bb      	strh	r3, [r7, #12]
		GPIO_init(GPIOA, &GPIO_pinConfig);
 800144c:	f107 030c 	add.w	r3, r7, #12
 8001450:	4619      	mov	r1, r3
 8001452:	4820      	ldr	r0, [pc, #128]	@ (80014d4 <USART_SetPins+0xbc>)
 8001454:	f7ff fc48 	bl	8000ce8 <GPIO_init>
			GPIO_init(GPIOB, &GPIO_pinConfig);
		}

	}

}
 8001458:	e036      	b.n	80014c8 <USART_SetPins+0xb0>
	} else if (USARTx == USART2) {
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	4a1e      	ldr	r2, [pc, #120]	@ (80014d8 <USART_SetPins+0xc0>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d116      	bne.n	8001490 <USART_SetPins+0x78>
		GPIO_pinConfig.MODE = MODE_OUTPUT_AF_PP;
 8001462:	2306      	movs	r3, #6
 8001464:	73bb      	strb	r3, [r7, #14]
		GPIO_pinConfig.Output_Speed = SPEED_10M;
 8001466:	2301      	movs	r3, #1
 8001468:	73fb      	strb	r3, [r7, #15]
		GPIO_pinConfig.Pin_Number = PIN_2;
 800146a:	2304      	movs	r3, #4
 800146c:	81bb      	strh	r3, [r7, #12]
		GPIO_init(GPIOA, &GPIO_pinConfig);
 800146e:	f107 030c 	add.w	r3, r7, #12
 8001472:	4619      	mov	r1, r3
 8001474:	4817      	ldr	r0, [pc, #92]	@ (80014d4 <USART_SetPins+0xbc>)
 8001476:	f7ff fc37 	bl	8000ce8 <GPIO_init>
		GPIO_pinConfig.MODE = MODE_INPUT_AF;
 800147a:	2310      	movs	r3, #16
 800147c:	73bb      	strb	r3, [r7, #14]
		GPIO_pinConfig.Pin_Number = PIN_3;
 800147e:	2308      	movs	r3, #8
 8001480:	81bb      	strh	r3, [r7, #12]
		GPIO_init(GPIOA, &GPIO_pinConfig);
 8001482:	f107 030c 	add.w	r3, r7, #12
 8001486:	4619      	mov	r1, r3
 8001488:	4812      	ldr	r0, [pc, #72]	@ (80014d4 <USART_SetPins+0xbc>)
 800148a:	f7ff fc2d 	bl	8000ce8 <GPIO_init>
}
 800148e:	e01b      	b.n	80014c8 <USART_SetPins+0xb0>
	} else if (USARTx == USART3) {
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	4a12      	ldr	r2, [pc, #72]	@ (80014dc <USART_SetPins+0xc4>)
 8001494:	4293      	cmp	r3, r2
 8001496:	d117      	bne.n	80014c8 <USART_SetPins+0xb0>
		GPIO_pinConfig.MODE = MODE_OUTPUT_AF_PP;
 8001498:	2306      	movs	r3, #6
 800149a:	73bb      	strb	r3, [r7, #14]
		GPIO_pinConfig.Output_Speed = SPEED_10M;
 800149c:	2301      	movs	r3, #1
 800149e:	73fb      	strb	r3, [r7, #15]
		GPIO_pinConfig.Pin_Number = PIN_10;
 80014a0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80014a4:	81bb      	strh	r3, [r7, #12]
		GPIO_init(GPIOB, &GPIO_pinConfig);
 80014a6:	f107 030c 	add.w	r3, r7, #12
 80014aa:	4619      	mov	r1, r3
 80014ac:	480c      	ldr	r0, [pc, #48]	@ (80014e0 <USART_SetPins+0xc8>)
 80014ae:	f7ff fc1b 	bl	8000ce8 <GPIO_init>
		GPIO_pinConfig.MODE = MODE_INPUT_AF;
 80014b2:	2310      	movs	r3, #16
 80014b4:	73bb      	strb	r3, [r7, #14]
		GPIO_pinConfig.Pin_Number = PIN_11;
 80014b6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80014ba:	81bb      	strh	r3, [r7, #12]
		GPIO_init(GPIOB, &GPIO_pinConfig);
 80014bc:	f107 030c 	add.w	r3, r7, #12
 80014c0:	4619      	mov	r1, r3
 80014c2:	4807      	ldr	r0, [pc, #28]	@ (80014e0 <USART_SetPins+0xc8>)
 80014c4:	f7ff fc10 	bl	8000ce8 <GPIO_init>
}
 80014c8:	bf00      	nop
 80014ca:	3710      	adds	r7, #16
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	40013800 	.word	0x40013800
 80014d4:	40010800 	.word	0x40010800
 80014d8:	40004400 	.word	0x40004400
 80014dc:	40004800 	.word	0x40004800
 80014e0:	40010c00 	.word	0x40010c00

080014e4 <USART1_IRQHandler>:
//	// Add the null terminator at the end of the received string.
	buffer[index] = '\0';
}

// ISR
void USART1_IRQHandler() {
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
	Global_pinConfig[USART1_Index].P_CallBack_Fun();
 80014e8:	4b02      	ldr	r3, [pc, #8]	@ (80014f4 <USART1_IRQHandler+0x10>)
 80014ea:	691b      	ldr	r3, [r3, #16]
 80014ec:	4798      	blx	r3
}
 80014ee:	bf00      	nop
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	200000d4 	.word	0x200000d4

080014f8 <USART2_IRQHandler>:
void USART2_IRQHandler() {
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0
	Global_pinConfig[USART2_Index].P_CallBack_Fun();
 80014fc:	4b02      	ldr	r3, [pc, #8]	@ (8001508 <USART2_IRQHandler+0x10>)
 80014fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001500:	4798      	blx	r3
}
 8001502:	bf00      	nop
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	200000d4 	.word	0x200000d4

0800150c <USART3_IRQHandler>:
void USART3_IRQHandler() {
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
	Global_pinConfig[USART3_Index].P_CallBack_Fun();
 8001510:	4b02      	ldr	r3, [pc, #8]	@ (800151c <USART3_IRQHandler+0x10>)
 8001512:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001514:	4798      	blx	r3
}
 8001516:	bf00      	nop
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	200000d4 	.word	0x200000d4

08001520 <main>:
 *
 ******************************************************************************
 */
#include "main.h"

int main(void) {
 8001520:	b580      	push	{r7, lr}
 8001522:	b096      	sub	sp, #88	@ 0x58
 8001524:	af00      	add	r7, sp, #0
	RCC_init(RCC_HSE, HSE_CRYSTAL, 0, 0);
 8001526:	2300      	movs	r3, #0
 8001528:	2200      	movs	r2, #0
 800152a:	2100      	movs	r1, #0
 800152c:	2001      	movs	r0, #1
 800152e:	f7ff fd2b 	bl	8000f88 <RCC_init>
	RCC_CLK_EN(APB2_ID, GPIOA_ID);
 8001532:	2102      	movs	r1, #2
 8001534:	2001      	movs	r0, #1
 8001536:	f7ff fde7 	bl	8001108 <RCC_CLK_EN>
	RCC_CLK_EN(APB2_ID, USART1_ID);
 800153a:	210e      	movs	r1, #14
 800153c:	2001      	movs	r0, #1
 800153e:	f7ff fde3 	bl	8001108 <RCC_CLK_EN>

	USART_pinConfig_t USART_pinConfig;
	USART_pinConfig.BaudRate = USART_BaudRate_9600;
 8001542:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
 8001546:	647b      	str	r3, [r7, #68]	@ 0x44
	USART_pinConfig.Parity = USART_Parity_None;
 8001548:	2300      	movs	r3, #0
 800154a:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
	USART_pinConfig.DataLength = USART_DataLength8;
 800154e:	2300      	movs	r3, #0
 8001550:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
	USART_pinConfig.StopBits = USART_StopBits_1;
 8001554:	2300      	movs	r3, #0
 8001556:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
	USART_pinConfig.FlowControl = USART_FlowControl_NONE;
 800155a:	2300      	movs	r3, #0
 800155c:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
	USART_pinConfig.USART_Mode = USART_TXRXEN;
 8001560:	230c      	movs	r3, #12
 8001562:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
	USART_pinConfig.P_CallBack_Fun = NULL;
 8001566:	2300      	movs	r3, #0
 8001568:	653b      	str	r3, [r7, #80]	@ 0x50
	USART_pinConfig.IRQ_Enable = USART_NONE;
 800156a:	2300      	movs	r3, #0
 800156c:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c

	USART_init(&USART_pinConfig, USART1);
 8001570:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001574:	4915      	ldr	r1, [pc, #84]	@ (80015cc <main+0xac>)
 8001576:	4618      	mov	r0, r3
 8001578:	f7ff fe8a 	bl	8001290 <USART_init>
	USART_SetPins(USART1);
 800157c:	4813      	ldr	r0, [pc, #76]	@ (80015cc <main+0xac>)
 800157e:	f7ff ff4b 	bl	8001418 <USART_SetPins>

	node_t node = { .status = 0 };
 8001582:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001586:	2200      	movs	r2, #0
 8001588:	601a      	str	r2, [r3, #0]
 800158a:	605a      	str	r2, [r3, #4]
 800158c:	609a      	str	r2, [r3, #8]
	uint8 received_json[50];
	lcd_init();
 800158e:	f7fe fdef 	bl	8000170 <lcd_init>
	LM35_init(ADC1);
 8001592:	480f      	ldr	r0, [pc, #60]	@ (80015d0 <main+0xb0>)
 8001594:	f7fe fff8 	bl	8000588 <LM35_init>
	STK_init();
 8001598:	f7ff fdf0 	bl	800117c <STK_init>

	LDR_init(ADC1);
 800159c:	480c      	ldr	r0, [pc, #48]	@ (80015d0 <main+0xb0>)
 800159e:	f7fe ffe5 	bl	800056c <LDR_init>
	uint16 val;
	while (1) {

		val = LM35_Read(ADC1, ADC_CH1);
 80015a2:	2101      	movs	r1, #1
 80015a4:	480a      	ldr	r0, [pc, #40]	@ (80015d0 <main+0xb0>)
 80015a6:	f7fe fffb 	bl	80005a0 <LM35_Read>
 80015aa:	4603      	mov	r3, r0
 80015ac:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
//		val = LDR_Read(ADC1, ADC_CH3);
		lcd_display_number(val);
 80015b0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 80015b4:	4618      	mov	r0, r3
 80015b6:	f7fe ffaf 	bl	8000518 <lcd_display_number>
		lcd_send_String("  ");
 80015ba:	4806      	ldr	r0, [pc, #24]	@ (80015d4 <main+0xb4>)
 80015bc:	f7fe ff44 	bl	8000448 <lcd_send_String>
		STK_delayMs(5000);
 80015c0:	f241 3088 	movw	r0, #5000	@ 0x1388
 80015c4:	f7ff fdfe 	bl	80011c4 <STK_delayMs>
		val = LM35_Read(ADC1, ADC_CH1);
 80015c8:	bf00      	nop
 80015ca:	e7ea      	b.n	80015a2 <main+0x82>
 80015cc:	40013800 	.word	0x40013800
 80015d0:	40012400 	.word	0x40012400
 80015d4:	08002018 	.word	0x08002018

080015d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b086      	sub	sp, #24
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015e0:	4a14      	ldr	r2, [pc, #80]	@ (8001634 <_sbrk+0x5c>)
 80015e2:	4b15      	ldr	r3, [pc, #84]	@ (8001638 <_sbrk+0x60>)
 80015e4:	1ad3      	subs	r3, r2, r3
 80015e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015ec:	4b13      	ldr	r3, [pc, #76]	@ (800163c <_sbrk+0x64>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d102      	bne.n	80015fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015f4:	4b11      	ldr	r3, [pc, #68]	@ (800163c <_sbrk+0x64>)
 80015f6:	4a12      	ldr	r2, [pc, #72]	@ (8001640 <_sbrk+0x68>)
 80015f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015fa:	4b10      	ldr	r3, [pc, #64]	@ (800163c <_sbrk+0x64>)
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	4413      	add	r3, r2
 8001602:	693a      	ldr	r2, [r7, #16]
 8001604:	429a      	cmp	r2, r3
 8001606:	d207      	bcs.n	8001618 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001608:	f000 f952 	bl	80018b0 <__errno>
 800160c:	4603      	mov	r3, r0
 800160e:	220c      	movs	r2, #12
 8001610:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001612:	f04f 33ff 	mov.w	r3, #4294967295
 8001616:	e009      	b.n	800162c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001618:	4b08      	ldr	r3, [pc, #32]	@ (800163c <_sbrk+0x64>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800161e:	4b07      	ldr	r3, [pc, #28]	@ (800163c <_sbrk+0x64>)
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	4413      	add	r3, r2
 8001626:	4a05      	ldr	r2, [pc, #20]	@ (800163c <_sbrk+0x64>)
 8001628:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800162a:	68fb      	ldr	r3, [r7, #12]
}
 800162c:	4618      	mov	r0, r3
 800162e:	3718      	adds	r7, #24
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	20005000 	.word	0x20005000
 8001638:	00000400 	.word	0x00000400
 800163c:	20000110 	.word	0x20000110
 8001640:	20000260 	.word	0x20000260

08001644 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001644:	480d      	ldr	r0, [pc, #52]	@ (800167c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001646:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001648:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800164c:	480c      	ldr	r0, [pc, #48]	@ (8001680 <LoopForever+0x6>)
  ldr r1, =_edata
 800164e:	490d      	ldr	r1, [pc, #52]	@ (8001684 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001650:	4a0d      	ldr	r2, [pc, #52]	@ (8001688 <LoopForever+0xe>)
  movs r3, #0
 8001652:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001654:	e002      	b.n	800165c <LoopCopyDataInit>

08001656 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001656:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001658:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800165a:	3304      	adds	r3, #4

0800165c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800165c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800165e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001660:	d3f9      	bcc.n	8001656 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001662:	4a0a      	ldr	r2, [pc, #40]	@ (800168c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001664:	4c0a      	ldr	r4, [pc, #40]	@ (8001690 <LoopForever+0x16>)
  movs r3, #0
 8001666:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001668:	e001      	b.n	800166e <LoopFillZerobss>

0800166a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800166a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800166c:	3204      	adds	r2, #4

0800166e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800166e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001670:	d3fb      	bcc.n	800166a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001672:	f000 f923 	bl	80018bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001676:	f7ff ff53 	bl	8001520 <main>

0800167a <LoopForever>:

LoopForever:
  b LoopForever
 800167a:	e7fe      	b.n	800167a <LoopForever>
  ldr   r0, =_estack
 800167c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8001680:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001684:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001688:	08002058 	.word	0x08002058
  ldr r2, =_sbss
 800168c:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001690:	2000025c 	.word	0x2000025c

08001694 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001694:	e7fe      	b.n	8001694 <ADC1_2_IRQHandler>
	...

08001698 <sbrk_aligned>:
 8001698:	b570      	push	{r4, r5, r6, lr}
 800169a:	4e0f      	ldr	r6, [pc, #60]	@ (80016d8 <sbrk_aligned+0x40>)
 800169c:	460c      	mov	r4, r1
 800169e:	6831      	ldr	r1, [r6, #0]
 80016a0:	4605      	mov	r5, r0
 80016a2:	b911      	cbnz	r1, 80016aa <sbrk_aligned+0x12>
 80016a4:	f000 f8f4 	bl	8001890 <_sbrk_r>
 80016a8:	6030      	str	r0, [r6, #0]
 80016aa:	4621      	mov	r1, r4
 80016ac:	4628      	mov	r0, r5
 80016ae:	f000 f8ef 	bl	8001890 <_sbrk_r>
 80016b2:	1c43      	adds	r3, r0, #1
 80016b4:	d103      	bne.n	80016be <sbrk_aligned+0x26>
 80016b6:	f04f 34ff 	mov.w	r4, #4294967295
 80016ba:	4620      	mov	r0, r4
 80016bc:	bd70      	pop	{r4, r5, r6, pc}
 80016be:	1cc4      	adds	r4, r0, #3
 80016c0:	f024 0403 	bic.w	r4, r4, #3
 80016c4:	42a0      	cmp	r0, r4
 80016c6:	d0f8      	beq.n	80016ba <sbrk_aligned+0x22>
 80016c8:	1a21      	subs	r1, r4, r0
 80016ca:	4628      	mov	r0, r5
 80016cc:	f000 f8e0 	bl	8001890 <_sbrk_r>
 80016d0:	3001      	adds	r0, #1
 80016d2:	d1f2      	bne.n	80016ba <sbrk_aligned+0x22>
 80016d4:	e7ef      	b.n	80016b6 <sbrk_aligned+0x1e>
 80016d6:	bf00      	nop
 80016d8:	20000114 	.word	0x20000114

080016dc <_malloc_r>:
 80016dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80016e0:	1ccd      	adds	r5, r1, #3
 80016e2:	f025 0503 	bic.w	r5, r5, #3
 80016e6:	3508      	adds	r5, #8
 80016e8:	2d0c      	cmp	r5, #12
 80016ea:	bf38      	it	cc
 80016ec:	250c      	movcc	r5, #12
 80016ee:	2d00      	cmp	r5, #0
 80016f0:	4606      	mov	r6, r0
 80016f2:	db01      	blt.n	80016f8 <_malloc_r+0x1c>
 80016f4:	42a9      	cmp	r1, r5
 80016f6:	d904      	bls.n	8001702 <_malloc_r+0x26>
 80016f8:	230c      	movs	r3, #12
 80016fa:	6033      	str	r3, [r6, #0]
 80016fc:	2000      	movs	r0, #0
 80016fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001702:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80017d8 <_malloc_r+0xfc>
 8001706:	f000 f869 	bl	80017dc <__malloc_lock>
 800170a:	f8d8 3000 	ldr.w	r3, [r8]
 800170e:	461c      	mov	r4, r3
 8001710:	bb44      	cbnz	r4, 8001764 <_malloc_r+0x88>
 8001712:	4629      	mov	r1, r5
 8001714:	4630      	mov	r0, r6
 8001716:	f7ff ffbf 	bl	8001698 <sbrk_aligned>
 800171a:	1c43      	adds	r3, r0, #1
 800171c:	4604      	mov	r4, r0
 800171e:	d158      	bne.n	80017d2 <_malloc_r+0xf6>
 8001720:	f8d8 4000 	ldr.w	r4, [r8]
 8001724:	4627      	mov	r7, r4
 8001726:	2f00      	cmp	r7, #0
 8001728:	d143      	bne.n	80017b2 <_malloc_r+0xd6>
 800172a:	2c00      	cmp	r4, #0
 800172c:	d04b      	beq.n	80017c6 <_malloc_r+0xea>
 800172e:	6823      	ldr	r3, [r4, #0]
 8001730:	4639      	mov	r1, r7
 8001732:	4630      	mov	r0, r6
 8001734:	eb04 0903 	add.w	r9, r4, r3
 8001738:	f000 f8aa 	bl	8001890 <_sbrk_r>
 800173c:	4581      	cmp	r9, r0
 800173e:	d142      	bne.n	80017c6 <_malloc_r+0xea>
 8001740:	6821      	ldr	r1, [r4, #0]
 8001742:	4630      	mov	r0, r6
 8001744:	1a6d      	subs	r5, r5, r1
 8001746:	4629      	mov	r1, r5
 8001748:	f7ff ffa6 	bl	8001698 <sbrk_aligned>
 800174c:	3001      	adds	r0, #1
 800174e:	d03a      	beq.n	80017c6 <_malloc_r+0xea>
 8001750:	6823      	ldr	r3, [r4, #0]
 8001752:	442b      	add	r3, r5
 8001754:	6023      	str	r3, [r4, #0]
 8001756:	f8d8 3000 	ldr.w	r3, [r8]
 800175a:	685a      	ldr	r2, [r3, #4]
 800175c:	bb62      	cbnz	r2, 80017b8 <_malloc_r+0xdc>
 800175e:	f8c8 7000 	str.w	r7, [r8]
 8001762:	e00f      	b.n	8001784 <_malloc_r+0xa8>
 8001764:	6822      	ldr	r2, [r4, #0]
 8001766:	1b52      	subs	r2, r2, r5
 8001768:	d420      	bmi.n	80017ac <_malloc_r+0xd0>
 800176a:	2a0b      	cmp	r2, #11
 800176c:	d917      	bls.n	800179e <_malloc_r+0xc2>
 800176e:	1961      	adds	r1, r4, r5
 8001770:	42a3      	cmp	r3, r4
 8001772:	6025      	str	r5, [r4, #0]
 8001774:	bf18      	it	ne
 8001776:	6059      	strne	r1, [r3, #4]
 8001778:	6863      	ldr	r3, [r4, #4]
 800177a:	bf08      	it	eq
 800177c:	f8c8 1000 	streq.w	r1, [r8]
 8001780:	5162      	str	r2, [r4, r5]
 8001782:	604b      	str	r3, [r1, #4]
 8001784:	4630      	mov	r0, r6
 8001786:	f000 f82f 	bl	80017e8 <__malloc_unlock>
 800178a:	f104 000b 	add.w	r0, r4, #11
 800178e:	1d23      	adds	r3, r4, #4
 8001790:	f020 0007 	bic.w	r0, r0, #7
 8001794:	1ac2      	subs	r2, r0, r3
 8001796:	bf1c      	itt	ne
 8001798:	1a1b      	subne	r3, r3, r0
 800179a:	50a3      	strne	r3, [r4, r2]
 800179c:	e7af      	b.n	80016fe <_malloc_r+0x22>
 800179e:	6862      	ldr	r2, [r4, #4]
 80017a0:	42a3      	cmp	r3, r4
 80017a2:	bf0c      	ite	eq
 80017a4:	f8c8 2000 	streq.w	r2, [r8]
 80017a8:	605a      	strne	r2, [r3, #4]
 80017aa:	e7eb      	b.n	8001784 <_malloc_r+0xa8>
 80017ac:	4623      	mov	r3, r4
 80017ae:	6864      	ldr	r4, [r4, #4]
 80017b0:	e7ae      	b.n	8001710 <_malloc_r+0x34>
 80017b2:	463c      	mov	r4, r7
 80017b4:	687f      	ldr	r7, [r7, #4]
 80017b6:	e7b6      	b.n	8001726 <_malloc_r+0x4a>
 80017b8:	461a      	mov	r2, r3
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	42a3      	cmp	r3, r4
 80017be:	d1fb      	bne.n	80017b8 <_malloc_r+0xdc>
 80017c0:	2300      	movs	r3, #0
 80017c2:	6053      	str	r3, [r2, #4]
 80017c4:	e7de      	b.n	8001784 <_malloc_r+0xa8>
 80017c6:	230c      	movs	r3, #12
 80017c8:	4630      	mov	r0, r6
 80017ca:	6033      	str	r3, [r6, #0]
 80017cc:	f000 f80c 	bl	80017e8 <__malloc_unlock>
 80017d0:	e794      	b.n	80016fc <_malloc_r+0x20>
 80017d2:	6005      	str	r5, [r0, #0]
 80017d4:	e7d6      	b.n	8001784 <_malloc_r+0xa8>
 80017d6:	bf00      	nop
 80017d8:	20000118 	.word	0x20000118

080017dc <__malloc_lock>:
 80017dc:	4801      	ldr	r0, [pc, #4]	@ (80017e4 <__malloc_lock+0x8>)
 80017de:	f000 b891 	b.w	8001904 <__retarget_lock_acquire_recursive>
 80017e2:	bf00      	nop
 80017e4:	20000258 	.word	0x20000258

080017e8 <__malloc_unlock>:
 80017e8:	4801      	ldr	r0, [pc, #4]	@ (80017f0 <__malloc_unlock+0x8>)
 80017ea:	f000 b88c 	b.w	8001906 <__retarget_lock_release_recursive>
 80017ee:	bf00      	nop
 80017f0:	20000258 	.word	0x20000258

080017f4 <_realloc_r>:
 80017f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80017f8:	4680      	mov	r8, r0
 80017fa:	4615      	mov	r5, r2
 80017fc:	460c      	mov	r4, r1
 80017fe:	b921      	cbnz	r1, 800180a <_realloc_r+0x16>
 8001800:	4611      	mov	r1, r2
 8001802:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001806:	f7ff bf69 	b.w	80016dc <_malloc_r>
 800180a:	b92a      	cbnz	r2, 8001818 <_realloc_r+0x24>
 800180c:	f000 f88a 	bl	8001924 <_free_r>
 8001810:	2400      	movs	r4, #0
 8001812:	4620      	mov	r0, r4
 8001814:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001818:	f000 f8cc 	bl	80019b4 <_malloc_usable_size_r>
 800181c:	4285      	cmp	r5, r0
 800181e:	4606      	mov	r6, r0
 8001820:	d802      	bhi.n	8001828 <_realloc_r+0x34>
 8001822:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8001826:	d8f4      	bhi.n	8001812 <_realloc_r+0x1e>
 8001828:	4629      	mov	r1, r5
 800182a:	4640      	mov	r0, r8
 800182c:	f7ff ff56 	bl	80016dc <_malloc_r>
 8001830:	4607      	mov	r7, r0
 8001832:	2800      	cmp	r0, #0
 8001834:	d0ec      	beq.n	8001810 <_realloc_r+0x1c>
 8001836:	42b5      	cmp	r5, r6
 8001838:	462a      	mov	r2, r5
 800183a:	4621      	mov	r1, r4
 800183c:	bf28      	it	cs
 800183e:	4632      	movcs	r2, r6
 8001840:	f000 f862 	bl	8001908 <memcpy>
 8001844:	4621      	mov	r1, r4
 8001846:	4640      	mov	r0, r8
 8001848:	f000 f86c 	bl	8001924 <_free_r>
 800184c:	463c      	mov	r4, r7
 800184e:	e7e0      	b.n	8001812 <_realloc_r+0x1e>

08001850 <siprintf>:
 8001850:	b40e      	push	{r1, r2, r3}
 8001852:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8001856:	b500      	push	{lr}
 8001858:	b09c      	sub	sp, #112	@ 0x70
 800185a:	ab1d      	add	r3, sp, #116	@ 0x74
 800185c:	9002      	str	r0, [sp, #8]
 800185e:	9006      	str	r0, [sp, #24]
 8001860:	9107      	str	r1, [sp, #28]
 8001862:	9104      	str	r1, [sp, #16]
 8001864:	4808      	ldr	r0, [pc, #32]	@ (8001888 <siprintf+0x38>)
 8001866:	4909      	ldr	r1, [pc, #36]	@ (800188c <siprintf+0x3c>)
 8001868:	f853 2b04 	ldr.w	r2, [r3], #4
 800186c:	9105      	str	r1, [sp, #20]
 800186e:	6800      	ldr	r0, [r0, #0]
 8001870:	a902      	add	r1, sp, #8
 8001872:	9301      	str	r3, [sp, #4]
 8001874:	f000 f902 	bl	8001a7c <_svfiprintf_r>
 8001878:	2200      	movs	r2, #0
 800187a:	9b02      	ldr	r3, [sp, #8]
 800187c:	701a      	strb	r2, [r3, #0]
 800187e:	b01c      	add	sp, #112	@ 0x70
 8001880:	f85d eb04 	ldr.w	lr, [sp], #4
 8001884:	b003      	add	sp, #12
 8001886:	4770      	bx	lr
 8001888:	2000001c 	.word	0x2000001c
 800188c:	ffff0208 	.word	0xffff0208

08001890 <_sbrk_r>:
 8001890:	b538      	push	{r3, r4, r5, lr}
 8001892:	2300      	movs	r3, #0
 8001894:	4d05      	ldr	r5, [pc, #20]	@ (80018ac <_sbrk_r+0x1c>)
 8001896:	4604      	mov	r4, r0
 8001898:	4608      	mov	r0, r1
 800189a:	602b      	str	r3, [r5, #0]
 800189c:	f7ff fe9c 	bl	80015d8 <_sbrk>
 80018a0:	1c43      	adds	r3, r0, #1
 80018a2:	d102      	bne.n	80018aa <_sbrk_r+0x1a>
 80018a4:	682b      	ldr	r3, [r5, #0]
 80018a6:	b103      	cbz	r3, 80018aa <_sbrk_r+0x1a>
 80018a8:	6023      	str	r3, [r4, #0]
 80018aa:	bd38      	pop	{r3, r4, r5, pc}
 80018ac:	20000254 	.word	0x20000254

080018b0 <__errno>:
 80018b0:	4b01      	ldr	r3, [pc, #4]	@ (80018b8 <__errno+0x8>)
 80018b2:	6818      	ldr	r0, [r3, #0]
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	2000001c 	.word	0x2000001c

080018bc <__libc_init_array>:
 80018bc:	b570      	push	{r4, r5, r6, lr}
 80018be:	2600      	movs	r6, #0
 80018c0:	4d0c      	ldr	r5, [pc, #48]	@ (80018f4 <__libc_init_array+0x38>)
 80018c2:	4c0d      	ldr	r4, [pc, #52]	@ (80018f8 <__libc_init_array+0x3c>)
 80018c4:	1b64      	subs	r4, r4, r5
 80018c6:	10a4      	asrs	r4, r4, #2
 80018c8:	42a6      	cmp	r6, r4
 80018ca:	d109      	bne.n	80018e0 <__libc_init_array+0x24>
 80018cc:	f000 fb8c 	bl	8001fe8 <_init>
 80018d0:	2600      	movs	r6, #0
 80018d2:	4d0a      	ldr	r5, [pc, #40]	@ (80018fc <__libc_init_array+0x40>)
 80018d4:	4c0a      	ldr	r4, [pc, #40]	@ (8001900 <__libc_init_array+0x44>)
 80018d6:	1b64      	subs	r4, r4, r5
 80018d8:	10a4      	asrs	r4, r4, #2
 80018da:	42a6      	cmp	r6, r4
 80018dc:	d105      	bne.n	80018ea <__libc_init_array+0x2e>
 80018de:	bd70      	pop	{r4, r5, r6, pc}
 80018e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80018e4:	4798      	blx	r3
 80018e6:	3601      	adds	r6, #1
 80018e8:	e7ee      	b.n	80018c8 <__libc_init_array+0xc>
 80018ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80018ee:	4798      	blx	r3
 80018f0:	3601      	adds	r6, #1
 80018f2:	e7f2      	b.n	80018da <__libc_init_array+0x1e>
 80018f4:	08002050 	.word	0x08002050
 80018f8:	08002050 	.word	0x08002050
 80018fc:	08002050 	.word	0x08002050
 8001900:	08002054 	.word	0x08002054

08001904 <__retarget_lock_acquire_recursive>:
 8001904:	4770      	bx	lr

08001906 <__retarget_lock_release_recursive>:
 8001906:	4770      	bx	lr

08001908 <memcpy>:
 8001908:	440a      	add	r2, r1
 800190a:	4291      	cmp	r1, r2
 800190c:	f100 33ff 	add.w	r3, r0, #4294967295
 8001910:	d100      	bne.n	8001914 <memcpy+0xc>
 8001912:	4770      	bx	lr
 8001914:	b510      	push	{r4, lr}
 8001916:	f811 4b01 	ldrb.w	r4, [r1], #1
 800191a:	4291      	cmp	r1, r2
 800191c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001920:	d1f9      	bne.n	8001916 <memcpy+0xe>
 8001922:	bd10      	pop	{r4, pc}

08001924 <_free_r>:
 8001924:	b538      	push	{r3, r4, r5, lr}
 8001926:	4605      	mov	r5, r0
 8001928:	2900      	cmp	r1, #0
 800192a:	d040      	beq.n	80019ae <_free_r+0x8a>
 800192c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001930:	1f0c      	subs	r4, r1, #4
 8001932:	2b00      	cmp	r3, #0
 8001934:	bfb8      	it	lt
 8001936:	18e4      	addlt	r4, r4, r3
 8001938:	f7ff ff50 	bl	80017dc <__malloc_lock>
 800193c:	4a1c      	ldr	r2, [pc, #112]	@ (80019b0 <_free_r+0x8c>)
 800193e:	6813      	ldr	r3, [r2, #0]
 8001940:	b933      	cbnz	r3, 8001950 <_free_r+0x2c>
 8001942:	6063      	str	r3, [r4, #4]
 8001944:	6014      	str	r4, [r2, #0]
 8001946:	4628      	mov	r0, r5
 8001948:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800194c:	f7ff bf4c 	b.w	80017e8 <__malloc_unlock>
 8001950:	42a3      	cmp	r3, r4
 8001952:	d908      	bls.n	8001966 <_free_r+0x42>
 8001954:	6820      	ldr	r0, [r4, #0]
 8001956:	1821      	adds	r1, r4, r0
 8001958:	428b      	cmp	r3, r1
 800195a:	bf01      	itttt	eq
 800195c:	6819      	ldreq	r1, [r3, #0]
 800195e:	685b      	ldreq	r3, [r3, #4]
 8001960:	1809      	addeq	r1, r1, r0
 8001962:	6021      	streq	r1, [r4, #0]
 8001964:	e7ed      	b.n	8001942 <_free_r+0x1e>
 8001966:	461a      	mov	r2, r3
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	b10b      	cbz	r3, 8001970 <_free_r+0x4c>
 800196c:	42a3      	cmp	r3, r4
 800196e:	d9fa      	bls.n	8001966 <_free_r+0x42>
 8001970:	6811      	ldr	r1, [r2, #0]
 8001972:	1850      	adds	r0, r2, r1
 8001974:	42a0      	cmp	r0, r4
 8001976:	d10b      	bne.n	8001990 <_free_r+0x6c>
 8001978:	6820      	ldr	r0, [r4, #0]
 800197a:	4401      	add	r1, r0
 800197c:	1850      	adds	r0, r2, r1
 800197e:	4283      	cmp	r3, r0
 8001980:	6011      	str	r1, [r2, #0]
 8001982:	d1e0      	bne.n	8001946 <_free_r+0x22>
 8001984:	6818      	ldr	r0, [r3, #0]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	4408      	add	r0, r1
 800198a:	6010      	str	r0, [r2, #0]
 800198c:	6053      	str	r3, [r2, #4]
 800198e:	e7da      	b.n	8001946 <_free_r+0x22>
 8001990:	d902      	bls.n	8001998 <_free_r+0x74>
 8001992:	230c      	movs	r3, #12
 8001994:	602b      	str	r3, [r5, #0]
 8001996:	e7d6      	b.n	8001946 <_free_r+0x22>
 8001998:	6820      	ldr	r0, [r4, #0]
 800199a:	1821      	adds	r1, r4, r0
 800199c:	428b      	cmp	r3, r1
 800199e:	bf01      	itttt	eq
 80019a0:	6819      	ldreq	r1, [r3, #0]
 80019a2:	685b      	ldreq	r3, [r3, #4]
 80019a4:	1809      	addeq	r1, r1, r0
 80019a6:	6021      	streq	r1, [r4, #0]
 80019a8:	6063      	str	r3, [r4, #4]
 80019aa:	6054      	str	r4, [r2, #4]
 80019ac:	e7cb      	b.n	8001946 <_free_r+0x22>
 80019ae:	bd38      	pop	{r3, r4, r5, pc}
 80019b0:	20000118 	.word	0x20000118

080019b4 <_malloc_usable_size_r>:
 80019b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80019b8:	1f18      	subs	r0, r3, #4
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	bfbc      	itt	lt
 80019be:	580b      	ldrlt	r3, [r1, r0]
 80019c0:	18c0      	addlt	r0, r0, r3
 80019c2:	4770      	bx	lr

080019c4 <__ssputs_r>:
 80019c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80019c8:	461f      	mov	r7, r3
 80019ca:	688e      	ldr	r6, [r1, #8]
 80019cc:	4682      	mov	sl, r0
 80019ce:	42be      	cmp	r6, r7
 80019d0:	460c      	mov	r4, r1
 80019d2:	4690      	mov	r8, r2
 80019d4:	680b      	ldr	r3, [r1, #0]
 80019d6:	d82d      	bhi.n	8001a34 <__ssputs_r+0x70>
 80019d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80019dc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80019e0:	d026      	beq.n	8001a30 <__ssputs_r+0x6c>
 80019e2:	6965      	ldr	r5, [r4, #20]
 80019e4:	6909      	ldr	r1, [r1, #16]
 80019e6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80019ea:	eba3 0901 	sub.w	r9, r3, r1
 80019ee:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80019f2:	1c7b      	adds	r3, r7, #1
 80019f4:	444b      	add	r3, r9
 80019f6:	106d      	asrs	r5, r5, #1
 80019f8:	429d      	cmp	r5, r3
 80019fa:	bf38      	it	cc
 80019fc:	461d      	movcc	r5, r3
 80019fe:	0553      	lsls	r3, r2, #21
 8001a00:	d527      	bpl.n	8001a52 <__ssputs_r+0x8e>
 8001a02:	4629      	mov	r1, r5
 8001a04:	f7ff fe6a 	bl	80016dc <_malloc_r>
 8001a08:	4606      	mov	r6, r0
 8001a0a:	b360      	cbz	r0, 8001a66 <__ssputs_r+0xa2>
 8001a0c:	464a      	mov	r2, r9
 8001a0e:	6921      	ldr	r1, [r4, #16]
 8001a10:	f7ff ff7a 	bl	8001908 <memcpy>
 8001a14:	89a3      	ldrh	r3, [r4, #12]
 8001a16:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8001a1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a1e:	81a3      	strh	r3, [r4, #12]
 8001a20:	6126      	str	r6, [r4, #16]
 8001a22:	444e      	add	r6, r9
 8001a24:	6026      	str	r6, [r4, #0]
 8001a26:	463e      	mov	r6, r7
 8001a28:	6165      	str	r5, [r4, #20]
 8001a2a:	eba5 0509 	sub.w	r5, r5, r9
 8001a2e:	60a5      	str	r5, [r4, #8]
 8001a30:	42be      	cmp	r6, r7
 8001a32:	d900      	bls.n	8001a36 <__ssputs_r+0x72>
 8001a34:	463e      	mov	r6, r7
 8001a36:	4632      	mov	r2, r6
 8001a38:	4641      	mov	r1, r8
 8001a3a:	6820      	ldr	r0, [r4, #0]
 8001a3c:	f000 faac 	bl	8001f98 <memmove>
 8001a40:	2000      	movs	r0, #0
 8001a42:	68a3      	ldr	r3, [r4, #8]
 8001a44:	1b9b      	subs	r3, r3, r6
 8001a46:	60a3      	str	r3, [r4, #8]
 8001a48:	6823      	ldr	r3, [r4, #0]
 8001a4a:	4433      	add	r3, r6
 8001a4c:	6023      	str	r3, [r4, #0]
 8001a4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001a52:	462a      	mov	r2, r5
 8001a54:	f7ff fece 	bl	80017f4 <_realloc_r>
 8001a58:	4606      	mov	r6, r0
 8001a5a:	2800      	cmp	r0, #0
 8001a5c:	d1e0      	bne.n	8001a20 <__ssputs_r+0x5c>
 8001a5e:	4650      	mov	r0, sl
 8001a60:	6921      	ldr	r1, [r4, #16]
 8001a62:	f7ff ff5f 	bl	8001924 <_free_r>
 8001a66:	230c      	movs	r3, #12
 8001a68:	f8ca 3000 	str.w	r3, [sl]
 8001a6c:	89a3      	ldrh	r3, [r4, #12]
 8001a6e:	f04f 30ff 	mov.w	r0, #4294967295
 8001a72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001a76:	81a3      	strh	r3, [r4, #12]
 8001a78:	e7e9      	b.n	8001a4e <__ssputs_r+0x8a>
	...

08001a7c <_svfiprintf_r>:
 8001a7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a80:	4698      	mov	r8, r3
 8001a82:	898b      	ldrh	r3, [r1, #12]
 8001a84:	4607      	mov	r7, r0
 8001a86:	061b      	lsls	r3, r3, #24
 8001a88:	460d      	mov	r5, r1
 8001a8a:	4614      	mov	r4, r2
 8001a8c:	b09d      	sub	sp, #116	@ 0x74
 8001a8e:	d510      	bpl.n	8001ab2 <_svfiprintf_r+0x36>
 8001a90:	690b      	ldr	r3, [r1, #16]
 8001a92:	b973      	cbnz	r3, 8001ab2 <_svfiprintf_r+0x36>
 8001a94:	2140      	movs	r1, #64	@ 0x40
 8001a96:	f7ff fe21 	bl	80016dc <_malloc_r>
 8001a9a:	6028      	str	r0, [r5, #0]
 8001a9c:	6128      	str	r0, [r5, #16]
 8001a9e:	b930      	cbnz	r0, 8001aae <_svfiprintf_r+0x32>
 8001aa0:	230c      	movs	r3, #12
 8001aa2:	603b      	str	r3, [r7, #0]
 8001aa4:	f04f 30ff 	mov.w	r0, #4294967295
 8001aa8:	b01d      	add	sp, #116	@ 0x74
 8001aaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001aae:	2340      	movs	r3, #64	@ 0x40
 8001ab0:	616b      	str	r3, [r5, #20]
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	9309      	str	r3, [sp, #36]	@ 0x24
 8001ab6:	2320      	movs	r3, #32
 8001ab8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8001abc:	2330      	movs	r3, #48	@ 0x30
 8001abe:	f04f 0901 	mov.w	r9, #1
 8001ac2:	f8cd 800c 	str.w	r8, [sp, #12]
 8001ac6:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8001c60 <_svfiprintf_r+0x1e4>
 8001aca:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8001ace:	4623      	mov	r3, r4
 8001ad0:	469a      	mov	sl, r3
 8001ad2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001ad6:	b10a      	cbz	r2, 8001adc <_svfiprintf_r+0x60>
 8001ad8:	2a25      	cmp	r2, #37	@ 0x25
 8001ada:	d1f9      	bne.n	8001ad0 <_svfiprintf_r+0x54>
 8001adc:	ebba 0b04 	subs.w	fp, sl, r4
 8001ae0:	d00b      	beq.n	8001afa <_svfiprintf_r+0x7e>
 8001ae2:	465b      	mov	r3, fp
 8001ae4:	4622      	mov	r2, r4
 8001ae6:	4629      	mov	r1, r5
 8001ae8:	4638      	mov	r0, r7
 8001aea:	f7ff ff6b 	bl	80019c4 <__ssputs_r>
 8001aee:	3001      	adds	r0, #1
 8001af0:	f000 80a7 	beq.w	8001c42 <_svfiprintf_r+0x1c6>
 8001af4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001af6:	445a      	add	r2, fp
 8001af8:	9209      	str	r2, [sp, #36]	@ 0x24
 8001afa:	f89a 3000 	ldrb.w	r3, [sl]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	f000 809f 	beq.w	8001c42 <_svfiprintf_r+0x1c6>
 8001b04:	2300      	movs	r3, #0
 8001b06:	f04f 32ff 	mov.w	r2, #4294967295
 8001b0a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001b0e:	f10a 0a01 	add.w	sl, sl, #1
 8001b12:	9304      	str	r3, [sp, #16]
 8001b14:	9307      	str	r3, [sp, #28]
 8001b16:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8001b1a:	931a      	str	r3, [sp, #104]	@ 0x68
 8001b1c:	4654      	mov	r4, sl
 8001b1e:	2205      	movs	r2, #5
 8001b20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001b24:	484e      	ldr	r0, [pc, #312]	@ (8001c60 <_svfiprintf_r+0x1e4>)
 8001b26:	f000 fa51 	bl	8001fcc <memchr>
 8001b2a:	9a04      	ldr	r2, [sp, #16]
 8001b2c:	b9d8      	cbnz	r0, 8001b66 <_svfiprintf_r+0xea>
 8001b2e:	06d0      	lsls	r0, r2, #27
 8001b30:	bf44      	itt	mi
 8001b32:	2320      	movmi	r3, #32
 8001b34:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001b38:	0711      	lsls	r1, r2, #28
 8001b3a:	bf44      	itt	mi
 8001b3c:	232b      	movmi	r3, #43	@ 0x2b
 8001b3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001b42:	f89a 3000 	ldrb.w	r3, [sl]
 8001b46:	2b2a      	cmp	r3, #42	@ 0x2a
 8001b48:	d015      	beq.n	8001b76 <_svfiprintf_r+0xfa>
 8001b4a:	4654      	mov	r4, sl
 8001b4c:	2000      	movs	r0, #0
 8001b4e:	f04f 0c0a 	mov.w	ip, #10
 8001b52:	9a07      	ldr	r2, [sp, #28]
 8001b54:	4621      	mov	r1, r4
 8001b56:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001b5a:	3b30      	subs	r3, #48	@ 0x30
 8001b5c:	2b09      	cmp	r3, #9
 8001b5e:	d94b      	bls.n	8001bf8 <_svfiprintf_r+0x17c>
 8001b60:	b1b0      	cbz	r0, 8001b90 <_svfiprintf_r+0x114>
 8001b62:	9207      	str	r2, [sp, #28]
 8001b64:	e014      	b.n	8001b90 <_svfiprintf_r+0x114>
 8001b66:	eba0 0308 	sub.w	r3, r0, r8
 8001b6a:	fa09 f303 	lsl.w	r3, r9, r3
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	46a2      	mov	sl, r4
 8001b72:	9304      	str	r3, [sp, #16]
 8001b74:	e7d2      	b.n	8001b1c <_svfiprintf_r+0xa0>
 8001b76:	9b03      	ldr	r3, [sp, #12]
 8001b78:	1d19      	adds	r1, r3, #4
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	9103      	str	r1, [sp, #12]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	bfbb      	ittet	lt
 8001b82:	425b      	neglt	r3, r3
 8001b84:	f042 0202 	orrlt.w	r2, r2, #2
 8001b88:	9307      	strge	r3, [sp, #28]
 8001b8a:	9307      	strlt	r3, [sp, #28]
 8001b8c:	bfb8      	it	lt
 8001b8e:	9204      	strlt	r2, [sp, #16]
 8001b90:	7823      	ldrb	r3, [r4, #0]
 8001b92:	2b2e      	cmp	r3, #46	@ 0x2e
 8001b94:	d10a      	bne.n	8001bac <_svfiprintf_r+0x130>
 8001b96:	7863      	ldrb	r3, [r4, #1]
 8001b98:	2b2a      	cmp	r3, #42	@ 0x2a
 8001b9a:	d132      	bne.n	8001c02 <_svfiprintf_r+0x186>
 8001b9c:	9b03      	ldr	r3, [sp, #12]
 8001b9e:	3402      	adds	r4, #2
 8001ba0:	1d1a      	adds	r2, r3, #4
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	9203      	str	r2, [sp, #12]
 8001ba6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8001baa:	9305      	str	r3, [sp, #20]
 8001bac:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8001c64 <_svfiprintf_r+0x1e8>
 8001bb0:	2203      	movs	r2, #3
 8001bb2:	4650      	mov	r0, sl
 8001bb4:	7821      	ldrb	r1, [r4, #0]
 8001bb6:	f000 fa09 	bl	8001fcc <memchr>
 8001bba:	b138      	cbz	r0, 8001bcc <_svfiprintf_r+0x150>
 8001bbc:	2240      	movs	r2, #64	@ 0x40
 8001bbe:	9b04      	ldr	r3, [sp, #16]
 8001bc0:	eba0 000a 	sub.w	r0, r0, sl
 8001bc4:	4082      	lsls	r2, r0
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	3401      	adds	r4, #1
 8001bca:	9304      	str	r3, [sp, #16]
 8001bcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001bd0:	2206      	movs	r2, #6
 8001bd2:	4825      	ldr	r0, [pc, #148]	@ (8001c68 <_svfiprintf_r+0x1ec>)
 8001bd4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8001bd8:	f000 f9f8 	bl	8001fcc <memchr>
 8001bdc:	2800      	cmp	r0, #0
 8001bde:	d036      	beq.n	8001c4e <_svfiprintf_r+0x1d2>
 8001be0:	4b22      	ldr	r3, [pc, #136]	@ (8001c6c <_svfiprintf_r+0x1f0>)
 8001be2:	bb1b      	cbnz	r3, 8001c2c <_svfiprintf_r+0x1b0>
 8001be4:	9b03      	ldr	r3, [sp, #12]
 8001be6:	3307      	adds	r3, #7
 8001be8:	f023 0307 	bic.w	r3, r3, #7
 8001bec:	3308      	adds	r3, #8
 8001bee:	9303      	str	r3, [sp, #12]
 8001bf0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001bf2:	4433      	add	r3, r6
 8001bf4:	9309      	str	r3, [sp, #36]	@ 0x24
 8001bf6:	e76a      	b.n	8001ace <_svfiprintf_r+0x52>
 8001bf8:	460c      	mov	r4, r1
 8001bfa:	2001      	movs	r0, #1
 8001bfc:	fb0c 3202 	mla	r2, ip, r2, r3
 8001c00:	e7a8      	b.n	8001b54 <_svfiprintf_r+0xd8>
 8001c02:	2300      	movs	r3, #0
 8001c04:	f04f 0c0a 	mov.w	ip, #10
 8001c08:	4619      	mov	r1, r3
 8001c0a:	3401      	adds	r4, #1
 8001c0c:	9305      	str	r3, [sp, #20]
 8001c0e:	4620      	mov	r0, r4
 8001c10:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001c14:	3a30      	subs	r2, #48	@ 0x30
 8001c16:	2a09      	cmp	r2, #9
 8001c18:	d903      	bls.n	8001c22 <_svfiprintf_r+0x1a6>
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d0c6      	beq.n	8001bac <_svfiprintf_r+0x130>
 8001c1e:	9105      	str	r1, [sp, #20]
 8001c20:	e7c4      	b.n	8001bac <_svfiprintf_r+0x130>
 8001c22:	4604      	mov	r4, r0
 8001c24:	2301      	movs	r3, #1
 8001c26:	fb0c 2101 	mla	r1, ip, r1, r2
 8001c2a:	e7f0      	b.n	8001c0e <_svfiprintf_r+0x192>
 8001c2c:	ab03      	add	r3, sp, #12
 8001c2e:	9300      	str	r3, [sp, #0]
 8001c30:	462a      	mov	r2, r5
 8001c32:	4638      	mov	r0, r7
 8001c34:	4b0e      	ldr	r3, [pc, #56]	@ (8001c70 <_svfiprintf_r+0x1f4>)
 8001c36:	a904      	add	r1, sp, #16
 8001c38:	f3af 8000 	nop.w
 8001c3c:	1c42      	adds	r2, r0, #1
 8001c3e:	4606      	mov	r6, r0
 8001c40:	d1d6      	bne.n	8001bf0 <_svfiprintf_r+0x174>
 8001c42:	89ab      	ldrh	r3, [r5, #12]
 8001c44:	065b      	lsls	r3, r3, #25
 8001c46:	f53f af2d 	bmi.w	8001aa4 <_svfiprintf_r+0x28>
 8001c4a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001c4c:	e72c      	b.n	8001aa8 <_svfiprintf_r+0x2c>
 8001c4e:	ab03      	add	r3, sp, #12
 8001c50:	9300      	str	r3, [sp, #0]
 8001c52:	462a      	mov	r2, r5
 8001c54:	4638      	mov	r0, r7
 8001c56:	4b06      	ldr	r3, [pc, #24]	@ (8001c70 <_svfiprintf_r+0x1f4>)
 8001c58:	a904      	add	r1, sp, #16
 8001c5a:	f000 f87d 	bl	8001d58 <_printf_i>
 8001c5e:	e7ed      	b.n	8001c3c <_svfiprintf_r+0x1c0>
 8001c60:	0800201b 	.word	0x0800201b
 8001c64:	08002021 	.word	0x08002021
 8001c68:	08002025 	.word	0x08002025
 8001c6c:	00000000 	.word	0x00000000
 8001c70:	080019c5 	.word	0x080019c5

08001c74 <_printf_common>:
 8001c74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001c78:	4616      	mov	r6, r2
 8001c7a:	4698      	mov	r8, r3
 8001c7c:	688a      	ldr	r2, [r1, #8]
 8001c7e:	690b      	ldr	r3, [r1, #16]
 8001c80:	4607      	mov	r7, r0
 8001c82:	4293      	cmp	r3, r2
 8001c84:	bfb8      	it	lt
 8001c86:	4613      	movlt	r3, r2
 8001c88:	6033      	str	r3, [r6, #0]
 8001c8a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001c8e:	460c      	mov	r4, r1
 8001c90:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001c94:	b10a      	cbz	r2, 8001c9a <_printf_common+0x26>
 8001c96:	3301      	adds	r3, #1
 8001c98:	6033      	str	r3, [r6, #0]
 8001c9a:	6823      	ldr	r3, [r4, #0]
 8001c9c:	0699      	lsls	r1, r3, #26
 8001c9e:	bf42      	ittt	mi
 8001ca0:	6833      	ldrmi	r3, [r6, #0]
 8001ca2:	3302      	addmi	r3, #2
 8001ca4:	6033      	strmi	r3, [r6, #0]
 8001ca6:	6825      	ldr	r5, [r4, #0]
 8001ca8:	f015 0506 	ands.w	r5, r5, #6
 8001cac:	d106      	bne.n	8001cbc <_printf_common+0x48>
 8001cae:	f104 0a19 	add.w	sl, r4, #25
 8001cb2:	68e3      	ldr	r3, [r4, #12]
 8001cb4:	6832      	ldr	r2, [r6, #0]
 8001cb6:	1a9b      	subs	r3, r3, r2
 8001cb8:	42ab      	cmp	r3, r5
 8001cba:	dc2b      	bgt.n	8001d14 <_printf_common+0xa0>
 8001cbc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001cc0:	6822      	ldr	r2, [r4, #0]
 8001cc2:	3b00      	subs	r3, #0
 8001cc4:	bf18      	it	ne
 8001cc6:	2301      	movne	r3, #1
 8001cc8:	0692      	lsls	r2, r2, #26
 8001cca:	d430      	bmi.n	8001d2e <_printf_common+0xba>
 8001ccc:	4641      	mov	r1, r8
 8001cce:	4638      	mov	r0, r7
 8001cd0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8001cd4:	47c8      	blx	r9
 8001cd6:	3001      	adds	r0, #1
 8001cd8:	d023      	beq.n	8001d22 <_printf_common+0xae>
 8001cda:	6823      	ldr	r3, [r4, #0]
 8001cdc:	6922      	ldr	r2, [r4, #16]
 8001cde:	f003 0306 	and.w	r3, r3, #6
 8001ce2:	2b04      	cmp	r3, #4
 8001ce4:	bf14      	ite	ne
 8001ce6:	2500      	movne	r5, #0
 8001ce8:	6833      	ldreq	r3, [r6, #0]
 8001cea:	f04f 0600 	mov.w	r6, #0
 8001cee:	bf08      	it	eq
 8001cf0:	68e5      	ldreq	r5, [r4, #12]
 8001cf2:	f104 041a 	add.w	r4, r4, #26
 8001cf6:	bf08      	it	eq
 8001cf8:	1aed      	subeq	r5, r5, r3
 8001cfa:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8001cfe:	bf08      	it	eq
 8001d00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001d04:	4293      	cmp	r3, r2
 8001d06:	bfc4      	itt	gt
 8001d08:	1a9b      	subgt	r3, r3, r2
 8001d0a:	18ed      	addgt	r5, r5, r3
 8001d0c:	42b5      	cmp	r5, r6
 8001d0e:	d11a      	bne.n	8001d46 <_printf_common+0xd2>
 8001d10:	2000      	movs	r0, #0
 8001d12:	e008      	b.n	8001d26 <_printf_common+0xb2>
 8001d14:	2301      	movs	r3, #1
 8001d16:	4652      	mov	r2, sl
 8001d18:	4641      	mov	r1, r8
 8001d1a:	4638      	mov	r0, r7
 8001d1c:	47c8      	blx	r9
 8001d1e:	3001      	adds	r0, #1
 8001d20:	d103      	bne.n	8001d2a <_printf_common+0xb6>
 8001d22:	f04f 30ff 	mov.w	r0, #4294967295
 8001d26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001d2a:	3501      	adds	r5, #1
 8001d2c:	e7c1      	b.n	8001cb2 <_printf_common+0x3e>
 8001d2e:	2030      	movs	r0, #48	@ 0x30
 8001d30:	18e1      	adds	r1, r4, r3
 8001d32:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8001d36:	1c5a      	adds	r2, r3, #1
 8001d38:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001d3c:	4422      	add	r2, r4
 8001d3e:	3302      	adds	r3, #2
 8001d40:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001d44:	e7c2      	b.n	8001ccc <_printf_common+0x58>
 8001d46:	2301      	movs	r3, #1
 8001d48:	4622      	mov	r2, r4
 8001d4a:	4641      	mov	r1, r8
 8001d4c:	4638      	mov	r0, r7
 8001d4e:	47c8      	blx	r9
 8001d50:	3001      	adds	r0, #1
 8001d52:	d0e6      	beq.n	8001d22 <_printf_common+0xae>
 8001d54:	3601      	adds	r6, #1
 8001d56:	e7d9      	b.n	8001d0c <_printf_common+0x98>

08001d58 <_printf_i>:
 8001d58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001d5c:	7e0f      	ldrb	r7, [r1, #24]
 8001d5e:	4691      	mov	r9, r2
 8001d60:	2f78      	cmp	r7, #120	@ 0x78
 8001d62:	4680      	mov	r8, r0
 8001d64:	460c      	mov	r4, r1
 8001d66:	469a      	mov	sl, r3
 8001d68:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8001d6a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8001d6e:	d807      	bhi.n	8001d80 <_printf_i+0x28>
 8001d70:	2f62      	cmp	r7, #98	@ 0x62
 8001d72:	d80a      	bhi.n	8001d8a <_printf_i+0x32>
 8001d74:	2f00      	cmp	r7, #0
 8001d76:	f000 80d3 	beq.w	8001f20 <_printf_i+0x1c8>
 8001d7a:	2f58      	cmp	r7, #88	@ 0x58
 8001d7c:	f000 80ba 	beq.w	8001ef4 <_printf_i+0x19c>
 8001d80:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001d84:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8001d88:	e03a      	b.n	8001e00 <_printf_i+0xa8>
 8001d8a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8001d8e:	2b15      	cmp	r3, #21
 8001d90:	d8f6      	bhi.n	8001d80 <_printf_i+0x28>
 8001d92:	a101      	add	r1, pc, #4	@ (adr r1, 8001d98 <_printf_i+0x40>)
 8001d94:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001d98:	08001df1 	.word	0x08001df1
 8001d9c:	08001e05 	.word	0x08001e05
 8001da0:	08001d81 	.word	0x08001d81
 8001da4:	08001d81 	.word	0x08001d81
 8001da8:	08001d81 	.word	0x08001d81
 8001dac:	08001d81 	.word	0x08001d81
 8001db0:	08001e05 	.word	0x08001e05
 8001db4:	08001d81 	.word	0x08001d81
 8001db8:	08001d81 	.word	0x08001d81
 8001dbc:	08001d81 	.word	0x08001d81
 8001dc0:	08001d81 	.word	0x08001d81
 8001dc4:	08001f07 	.word	0x08001f07
 8001dc8:	08001e2f 	.word	0x08001e2f
 8001dcc:	08001ec1 	.word	0x08001ec1
 8001dd0:	08001d81 	.word	0x08001d81
 8001dd4:	08001d81 	.word	0x08001d81
 8001dd8:	08001f29 	.word	0x08001f29
 8001ddc:	08001d81 	.word	0x08001d81
 8001de0:	08001e2f 	.word	0x08001e2f
 8001de4:	08001d81 	.word	0x08001d81
 8001de8:	08001d81 	.word	0x08001d81
 8001dec:	08001ec9 	.word	0x08001ec9
 8001df0:	6833      	ldr	r3, [r6, #0]
 8001df2:	1d1a      	adds	r2, r3, #4
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	6032      	str	r2, [r6, #0]
 8001df8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001dfc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8001e00:	2301      	movs	r3, #1
 8001e02:	e09e      	b.n	8001f42 <_printf_i+0x1ea>
 8001e04:	6833      	ldr	r3, [r6, #0]
 8001e06:	6820      	ldr	r0, [r4, #0]
 8001e08:	1d19      	adds	r1, r3, #4
 8001e0a:	6031      	str	r1, [r6, #0]
 8001e0c:	0606      	lsls	r6, r0, #24
 8001e0e:	d501      	bpl.n	8001e14 <_printf_i+0xbc>
 8001e10:	681d      	ldr	r5, [r3, #0]
 8001e12:	e003      	b.n	8001e1c <_printf_i+0xc4>
 8001e14:	0645      	lsls	r5, r0, #25
 8001e16:	d5fb      	bpl.n	8001e10 <_printf_i+0xb8>
 8001e18:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001e1c:	2d00      	cmp	r5, #0
 8001e1e:	da03      	bge.n	8001e28 <_printf_i+0xd0>
 8001e20:	232d      	movs	r3, #45	@ 0x2d
 8001e22:	426d      	negs	r5, r5
 8001e24:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001e28:	230a      	movs	r3, #10
 8001e2a:	4859      	ldr	r0, [pc, #356]	@ (8001f90 <_printf_i+0x238>)
 8001e2c:	e011      	b.n	8001e52 <_printf_i+0xfa>
 8001e2e:	6821      	ldr	r1, [r4, #0]
 8001e30:	6833      	ldr	r3, [r6, #0]
 8001e32:	0608      	lsls	r0, r1, #24
 8001e34:	f853 5b04 	ldr.w	r5, [r3], #4
 8001e38:	d402      	bmi.n	8001e40 <_printf_i+0xe8>
 8001e3a:	0649      	lsls	r1, r1, #25
 8001e3c:	bf48      	it	mi
 8001e3e:	b2ad      	uxthmi	r5, r5
 8001e40:	2f6f      	cmp	r7, #111	@ 0x6f
 8001e42:	6033      	str	r3, [r6, #0]
 8001e44:	bf14      	ite	ne
 8001e46:	230a      	movne	r3, #10
 8001e48:	2308      	moveq	r3, #8
 8001e4a:	4851      	ldr	r0, [pc, #324]	@ (8001f90 <_printf_i+0x238>)
 8001e4c:	2100      	movs	r1, #0
 8001e4e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8001e52:	6866      	ldr	r6, [r4, #4]
 8001e54:	2e00      	cmp	r6, #0
 8001e56:	bfa8      	it	ge
 8001e58:	6821      	ldrge	r1, [r4, #0]
 8001e5a:	60a6      	str	r6, [r4, #8]
 8001e5c:	bfa4      	itt	ge
 8001e5e:	f021 0104 	bicge.w	r1, r1, #4
 8001e62:	6021      	strge	r1, [r4, #0]
 8001e64:	b90d      	cbnz	r5, 8001e6a <_printf_i+0x112>
 8001e66:	2e00      	cmp	r6, #0
 8001e68:	d04b      	beq.n	8001f02 <_printf_i+0x1aa>
 8001e6a:	4616      	mov	r6, r2
 8001e6c:	fbb5 f1f3 	udiv	r1, r5, r3
 8001e70:	fb03 5711 	mls	r7, r3, r1, r5
 8001e74:	5dc7      	ldrb	r7, [r0, r7]
 8001e76:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8001e7a:	462f      	mov	r7, r5
 8001e7c:	42bb      	cmp	r3, r7
 8001e7e:	460d      	mov	r5, r1
 8001e80:	d9f4      	bls.n	8001e6c <_printf_i+0x114>
 8001e82:	2b08      	cmp	r3, #8
 8001e84:	d10b      	bne.n	8001e9e <_printf_i+0x146>
 8001e86:	6823      	ldr	r3, [r4, #0]
 8001e88:	07df      	lsls	r7, r3, #31
 8001e8a:	d508      	bpl.n	8001e9e <_printf_i+0x146>
 8001e8c:	6923      	ldr	r3, [r4, #16]
 8001e8e:	6861      	ldr	r1, [r4, #4]
 8001e90:	4299      	cmp	r1, r3
 8001e92:	bfde      	ittt	le
 8001e94:	2330      	movle	r3, #48	@ 0x30
 8001e96:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001e9a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001e9e:	1b92      	subs	r2, r2, r6
 8001ea0:	6122      	str	r2, [r4, #16]
 8001ea2:	464b      	mov	r3, r9
 8001ea4:	4621      	mov	r1, r4
 8001ea6:	4640      	mov	r0, r8
 8001ea8:	f8cd a000 	str.w	sl, [sp]
 8001eac:	aa03      	add	r2, sp, #12
 8001eae:	f7ff fee1 	bl	8001c74 <_printf_common>
 8001eb2:	3001      	adds	r0, #1
 8001eb4:	d14a      	bne.n	8001f4c <_printf_i+0x1f4>
 8001eb6:	f04f 30ff 	mov.w	r0, #4294967295
 8001eba:	b004      	add	sp, #16
 8001ebc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001ec0:	6823      	ldr	r3, [r4, #0]
 8001ec2:	f043 0320 	orr.w	r3, r3, #32
 8001ec6:	6023      	str	r3, [r4, #0]
 8001ec8:	2778      	movs	r7, #120	@ 0x78
 8001eca:	4832      	ldr	r0, [pc, #200]	@ (8001f94 <_printf_i+0x23c>)
 8001ecc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8001ed0:	6823      	ldr	r3, [r4, #0]
 8001ed2:	6831      	ldr	r1, [r6, #0]
 8001ed4:	061f      	lsls	r7, r3, #24
 8001ed6:	f851 5b04 	ldr.w	r5, [r1], #4
 8001eda:	d402      	bmi.n	8001ee2 <_printf_i+0x18a>
 8001edc:	065f      	lsls	r7, r3, #25
 8001ede:	bf48      	it	mi
 8001ee0:	b2ad      	uxthmi	r5, r5
 8001ee2:	6031      	str	r1, [r6, #0]
 8001ee4:	07d9      	lsls	r1, r3, #31
 8001ee6:	bf44      	itt	mi
 8001ee8:	f043 0320 	orrmi.w	r3, r3, #32
 8001eec:	6023      	strmi	r3, [r4, #0]
 8001eee:	b11d      	cbz	r5, 8001ef8 <_printf_i+0x1a0>
 8001ef0:	2310      	movs	r3, #16
 8001ef2:	e7ab      	b.n	8001e4c <_printf_i+0xf4>
 8001ef4:	4826      	ldr	r0, [pc, #152]	@ (8001f90 <_printf_i+0x238>)
 8001ef6:	e7e9      	b.n	8001ecc <_printf_i+0x174>
 8001ef8:	6823      	ldr	r3, [r4, #0]
 8001efa:	f023 0320 	bic.w	r3, r3, #32
 8001efe:	6023      	str	r3, [r4, #0]
 8001f00:	e7f6      	b.n	8001ef0 <_printf_i+0x198>
 8001f02:	4616      	mov	r6, r2
 8001f04:	e7bd      	b.n	8001e82 <_printf_i+0x12a>
 8001f06:	6833      	ldr	r3, [r6, #0]
 8001f08:	6825      	ldr	r5, [r4, #0]
 8001f0a:	1d18      	adds	r0, r3, #4
 8001f0c:	6961      	ldr	r1, [r4, #20]
 8001f0e:	6030      	str	r0, [r6, #0]
 8001f10:	062e      	lsls	r6, r5, #24
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	d501      	bpl.n	8001f1a <_printf_i+0x1c2>
 8001f16:	6019      	str	r1, [r3, #0]
 8001f18:	e002      	b.n	8001f20 <_printf_i+0x1c8>
 8001f1a:	0668      	lsls	r0, r5, #25
 8001f1c:	d5fb      	bpl.n	8001f16 <_printf_i+0x1be>
 8001f1e:	8019      	strh	r1, [r3, #0]
 8001f20:	2300      	movs	r3, #0
 8001f22:	4616      	mov	r6, r2
 8001f24:	6123      	str	r3, [r4, #16]
 8001f26:	e7bc      	b.n	8001ea2 <_printf_i+0x14a>
 8001f28:	6833      	ldr	r3, [r6, #0]
 8001f2a:	2100      	movs	r1, #0
 8001f2c:	1d1a      	adds	r2, r3, #4
 8001f2e:	6032      	str	r2, [r6, #0]
 8001f30:	681e      	ldr	r6, [r3, #0]
 8001f32:	6862      	ldr	r2, [r4, #4]
 8001f34:	4630      	mov	r0, r6
 8001f36:	f000 f849 	bl	8001fcc <memchr>
 8001f3a:	b108      	cbz	r0, 8001f40 <_printf_i+0x1e8>
 8001f3c:	1b80      	subs	r0, r0, r6
 8001f3e:	6060      	str	r0, [r4, #4]
 8001f40:	6863      	ldr	r3, [r4, #4]
 8001f42:	6123      	str	r3, [r4, #16]
 8001f44:	2300      	movs	r3, #0
 8001f46:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001f4a:	e7aa      	b.n	8001ea2 <_printf_i+0x14a>
 8001f4c:	4632      	mov	r2, r6
 8001f4e:	4649      	mov	r1, r9
 8001f50:	4640      	mov	r0, r8
 8001f52:	6923      	ldr	r3, [r4, #16]
 8001f54:	47d0      	blx	sl
 8001f56:	3001      	adds	r0, #1
 8001f58:	d0ad      	beq.n	8001eb6 <_printf_i+0x15e>
 8001f5a:	6823      	ldr	r3, [r4, #0]
 8001f5c:	079b      	lsls	r3, r3, #30
 8001f5e:	d413      	bmi.n	8001f88 <_printf_i+0x230>
 8001f60:	68e0      	ldr	r0, [r4, #12]
 8001f62:	9b03      	ldr	r3, [sp, #12]
 8001f64:	4298      	cmp	r0, r3
 8001f66:	bfb8      	it	lt
 8001f68:	4618      	movlt	r0, r3
 8001f6a:	e7a6      	b.n	8001eba <_printf_i+0x162>
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	4632      	mov	r2, r6
 8001f70:	4649      	mov	r1, r9
 8001f72:	4640      	mov	r0, r8
 8001f74:	47d0      	blx	sl
 8001f76:	3001      	adds	r0, #1
 8001f78:	d09d      	beq.n	8001eb6 <_printf_i+0x15e>
 8001f7a:	3501      	adds	r5, #1
 8001f7c:	68e3      	ldr	r3, [r4, #12]
 8001f7e:	9903      	ldr	r1, [sp, #12]
 8001f80:	1a5b      	subs	r3, r3, r1
 8001f82:	42ab      	cmp	r3, r5
 8001f84:	dcf2      	bgt.n	8001f6c <_printf_i+0x214>
 8001f86:	e7eb      	b.n	8001f60 <_printf_i+0x208>
 8001f88:	2500      	movs	r5, #0
 8001f8a:	f104 0619 	add.w	r6, r4, #25
 8001f8e:	e7f5      	b.n	8001f7c <_printf_i+0x224>
 8001f90:	0800202c 	.word	0x0800202c
 8001f94:	0800203d 	.word	0x0800203d

08001f98 <memmove>:
 8001f98:	4288      	cmp	r0, r1
 8001f9a:	b510      	push	{r4, lr}
 8001f9c:	eb01 0402 	add.w	r4, r1, r2
 8001fa0:	d902      	bls.n	8001fa8 <memmove+0x10>
 8001fa2:	4284      	cmp	r4, r0
 8001fa4:	4623      	mov	r3, r4
 8001fa6:	d807      	bhi.n	8001fb8 <memmove+0x20>
 8001fa8:	1e43      	subs	r3, r0, #1
 8001faa:	42a1      	cmp	r1, r4
 8001fac:	d008      	beq.n	8001fc0 <memmove+0x28>
 8001fae:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001fb2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8001fb6:	e7f8      	b.n	8001faa <memmove+0x12>
 8001fb8:	4601      	mov	r1, r0
 8001fba:	4402      	add	r2, r0
 8001fbc:	428a      	cmp	r2, r1
 8001fbe:	d100      	bne.n	8001fc2 <memmove+0x2a>
 8001fc0:	bd10      	pop	{r4, pc}
 8001fc2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001fc6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8001fca:	e7f7      	b.n	8001fbc <memmove+0x24>

08001fcc <memchr>:
 8001fcc:	4603      	mov	r3, r0
 8001fce:	b510      	push	{r4, lr}
 8001fd0:	b2c9      	uxtb	r1, r1
 8001fd2:	4402      	add	r2, r0
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	d101      	bne.n	8001fde <memchr+0x12>
 8001fda:	2000      	movs	r0, #0
 8001fdc:	e003      	b.n	8001fe6 <memchr+0x1a>
 8001fde:	7804      	ldrb	r4, [r0, #0]
 8001fe0:	3301      	adds	r3, #1
 8001fe2:	428c      	cmp	r4, r1
 8001fe4:	d1f6      	bne.n	8001fd4 <memchr+0x8>
 8001fe6:	bd10      	pop	{r4, pc}

08001fe8 <_init>:
 8001fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fea:	bf00      	nop
 8001fec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001fee:	bc08      	pop	{r3}
 8001ff0:	469e      	mov	lr, r3
 8001ff2:	4770      	bx	lr

08001ff4 <_fini>:
 8001ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ff6:	bf00      	nop
 8001ff8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ffa:	bc08      	pop	{r3}
 8001ffc:	469e      	mov	lr, r3
 8001ffe:	4770      	bx	lr

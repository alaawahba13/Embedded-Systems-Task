
HiringTask.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002350  08000130  08000130  00001130  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08002480  08002480  00003480  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080024ac  080024ac  00004024  2**0
                  CONTENTS
  4 .ARM          00000008  080024ac  080024ac  000034ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080024b4  080024b4  00004024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080024b4  080024b4  000034b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080024b8  080024b8  000034b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000024  20000000  080024bc  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000243c  20000024  080024e0  00004024  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002460  080024e0  00004460  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00004024  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004e91  00000000  00000000  0000404d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000124a  00000000  00000000  00008ede  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000588  00000000  00000000  0000a128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000429  00000000  00000000  0000a6b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000015e3  00000000  00000000  0000aad9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007cbc  00000000  00000000  0000c0bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000187f3  00000000  00000000  00013d78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0002c56b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000014a0  00000000  00000000  0002c5b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  0002da50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	@ (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	@ (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	@ (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000024 	.word	0x20000024
 800014c:	00000000 	.word	0x00000000
 8000150:	08002468 	.word	0x08002468

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	@ (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	@ (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	@ (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000028 	.word	0x20000028
 800016c:	08002468 	.word	0x08002468

08000170 <strlen>:
 8000170:	4603      	mov	r3, r0
 8000172:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000176:	2a00      	cmp	r2, #0
 8000178:	d1fb      	bne.n	8000172 <strlen+0x2>
 800017a:	1a18      	subs	r0, r3, r0
 800017c:	3801      	subs	r0, #1
 800017e:	4770      	bx	lr

08000180 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000180:	b480      	push	{r7}
 8000182:	b083      	sub	sp, #12
 8000184:	af00      	add	r7, sp, #0
 8000186:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialise( pxList );

    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 8000188:	687b      	ldr	r3, [r7, #4]
 800018a:	f103 0208 	add.w	r2, r3, #8
 800018e:	687b      	ldr	r3, [r7, #4]
 8000190:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000192:	687b      	ldr	r3, [r7, #4]
 8000194:	f04f 32ff 	mov.w	r2, #4294967295
 8000198:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	f103 0208 	add.w	r2, r3, #8
 80001a0:	687b      	ldr	r3, [r7, #4]
 80001a2:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
 80001a4:	687b      	ldr	r3, [r7, #4]
 80001a6:	f103 0208 	add.w	r2, r3, #8
 80001aa:	687b      	ldr	r3, [r7, #4]
 80001ac:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80001ae:	687b      	ldr	r3, [r7, #4]
 80001b0:	2200      	movs	r2, #0
 80001b2:	601a      	str	r2, [r3, #0]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
}
 80001b4:	bf00      	nop
 80001b6:	370c      	adds	r7, #12
 80001b8:	46bd      	mov	sp, r7
 80001ba:	bc80      	pop	{r7}
 80001bc:	4770      	bx	lr

080001be <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80001be:	b480      	push	{r7}
 80001c0:	b083      	sub	sp, #12
 80001c2:	af00      	add	r7, sp, #0
 80001c4:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80001c6:	687b      	ldr	r3, [r7, #4]
 80001c8:	2200      	movs	r2, #0
 80001ca:	611a      	str	r2, [r3, #16]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
}
 80001cc:	bf00      	nop
 80001ce:	370c      	adds	r7, #12
 80001d0:	46bd      	mov	sp, r7
 80001d2:	bc80      	pop	{r7}
 80001d4:	4770      	bx	lr

080001d6 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80001d6:	b480      	push	{r7}
 80001d8:	b085      	sub	sp, #20
 80001da:	af00      	add	r7, sp, #0
 80001dc:	6078      	str	r0, [r7, #4]
 80001de:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80001e0:	683b      	ldr	r3, [r7, #0]
 80001e2:	681b      	ldr	r3, [r3, #0]
 80001e4:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80001e6:	68bb      	ldr	r3, [r7, #8]
 80001e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80001ec:	d103      	bne.n	80001f6 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	691b      	ldr	r3, [r3, #16]
 80001f2:	60fb      	str	r3, [r7, #12]
 80001f4:	e00c      	b.n	8000210 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	3308      	adds	r3, #8
 80001fa:	60fb      	str	r3, [r7, #12]
 80001fc:	e002      	b.n	8000204 <vListInsert+0x2e>
 80001fe:	68fb      	ldr	r3, [r7, #12]
 8000200:	685b      	ldr	r3, [r3, #4]
 8000202:	60fb      	str	r3, [r7, #12]
 8000204:	68fb      	ldr	r3, [r7, #12]
 8000206:	685b      	ldr	r3, [r3, #4]
 8000208:	681b      	ldr	r3, [r3, #0]
 800020a:	68ba      	ldr	r2, [r7, #8]
 800020c:	429a      	cmp	r2, r3
 800020e:	d2f6      	bcs.n	80001fe <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8000210:	68fb      	ldr	r3, [r7, #12]
 8000212:	685a      	ldr	r2, [r3, #4]
 8000214:	683b      	ldr	r3, [r7, #0]
 8000216:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000218:	683b      	ldr	r3, [r7, #0]
 800021a:	685b      	ldr	r3, [r3, #4]
 800021c:	683a      	ldr	r2, [r7, #0]
 800021e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8000220:	683b      	ldr	r3, [r7, #0]
 8000222:	68fa      	ldr	r2, [r7, #12]
 8000224:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8000226:	68fb      	ldr	r3, [r7, #12]
 8000228:	683a      	ldr	r2, [r7, #0]
 800022a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800022c:	683b      	ldr	r3, [r7, #0]
 800022e:	687a      	ldr	r2, [r7, #4]
 8000230:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	681b      	ldr	r3, [r3, #0]
 8000236:	1c5a      	adds	r2, r3, #1
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsert();
}
 800023c:	bf00      	nop
 800023e:	3714      	adds	r7, #20
 8000240:	46bd      	mov	sp, r7
 8000242:	bc80      	pop	{r7}
 8000244:	4770      	bx	lr

08000246 <uxListRemove>:
/*-----------------------------------------------------------*/


UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000246:	b480      	push	{r7}
 8000248:	b085      	sub	sp, #20
 800024a:	af00      	add	r7, sp, #0
 800024c:	6078      	str	r0, [r7, #4]
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	691b      	ldr	r3, [r3, #16]
 8000252:	60fb      	str	r3, [r7, #12]

    traceENTER_uxListRemove( pxItemToRemove );

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	685b      	ldr	r3, [r3, #4]
 8000258:	687a      	ldr	r2, [r7, #4]
 800025a:	6892      	ldr	r2, [r2, #8]
 800025c:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	689b      	ldr	r3, [r3, #8]
 8000262:	687a      	ldr	r2, [r7, #4]
 8000264:	6852      	ldr	r2, [r2, #4]
 8000266:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8000268:	68fb      	ldr	r3, [r7, #12]
 800026a:	685b      	ldr	r3, [r3, #4]
 800026c:	687a      	ldr	r2, [r7, #4]
 800026e:	429a      	cmp	r2, r3
 8000270:	d103      	bne.n	800027a <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	689a      	ldr	r2, [r3, #8]
 8000276:	68fb      	ldr	r3, [r7, #12]
 8000278:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	2200      	movs	r2, #0
 800027e:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 8000280:	68fb      	ldr	r3, [r7, #12]
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	1e5a      	subs	r2, r3, #1
 8000286:	68fb      	ldr	r3, [r7, #12]
 8000288:	601a      	str	r2, [r3, #0]

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );

    return pxList->uxNumberOfItems;
 800028a:	68fb      	ldr	r3, [r7, #12]
 800028c:	681b      	ldr	r3, [r3, #0]
}
 800028e:	4618      	mov	r0, r3
 8000290:	3714      	adds	r7, #20
 8000292:	46bd      	mov	sp, r7
 8000294:	bc80      	pop	{r7}
 8000296:	4770      	bx	lr

08000298 <prvCreateStaticTask>:
                                        void * const pvParameters,
                                        UBaseType_t uxPriority,
                                        StackType_t * const puxStackBuffer,
                                        StaticTask_t * const pxTaskBuffer,
                                        TaskHandle_t * const pxCreatedTask )
    {
 8000298:	b580      	push	{r7, lr}
 800029a:	b08e      	sub	sp, #56	@ 0x38
 800029c:	af04      	add	r7, sp, #16
 800029e:	60f8      	str	r0, [r7, #12]
 80002a0:	60b9      	str	r1, [r7, #8]
 80002a2:	607a      	str	r2, [r7, #4]
 80002a4:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;

        configASSERT( puxStackBuffer != NULL );
 80002a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d10b      	bne.n	80002c4 <prvCreateStaticTask+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
 80002ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80002b0:	f383 8811 	msr	BASEPRI, r3
 80002b4:	f3bf 8f6f 	isb	sy
 80002b8:	f3bf 8f4f 	dsb	sy
 80002bc:	623b      	str	r3, [r7, #32]
        "   msr basepri, %0                                         \n" \
        "   isb                                                     \n" \
        "   dsb                                                     \n" \
        : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 80002be:	bf00      	nop
 80002c0:	bf00      	nop
 80002c2:	e7fd      	b.n	80002c0 <prvCreateStaticTask+0x28>
        configASSERT( pxTaskBuffer != NULL );
 80002c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	d10b      	bne.n	80002e2 <prvCreateStaticTask+0x4a>
    __asm volatile
 80002ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80002ce:	f383 8811 	msr	BASEPRI, r3
 80002d2:	f3bf 8f6f 	isb	sy
 80002d6:	f3bf 8f4f 	dsb	sy
 80002da:	61fb      	str	r3, [r7, #28]
}
 80002dc:	bf00      	nop
 80002de:	bf00      	nop
 80002e0:	e7fd      	b.n	80002de <prvCreateStaticTask+0x46>
        #if ( configASSERT_DEFINED == 1 )
        {
            /* Sanity check that the size of the structure used to declare a
             * variable of type StaticTask_t equals the size of the real task
             * structure. */
            volatile size_t xSize = sizeof( StaticTask_t );
 80002e2:	2354      	movs	r3, #84	@ 0x54
 80002e4:	617b      	str	r3, [r7, #20]
            configASSERT( xSize == sizeof( TCB_t ) );
 80002e6:	697b      	ldr	r3, [r7, #20]
 80002e8:	2b54      	cmp	r3, #84	@ 0x54
 80002ea:	d00b      	beq.n	8000304 <prvCreateStaticTask+0x6c>
    __asm volatile
 80002ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80002f0:	f383 8811 	msr	BASEPRI, r3
 80002f4:	f3bf 8f6f 	isb	sy
 80002f8:	f3bf 8f4f 	dsb	sy
 80002fc:	61bb      	str	r3, [r7, #24]
}
 80002fe:	bf00      	nop
 8000300:	bf00      	nop
 8000302:	e7fd      	b.n	8000300 <prvCreateStaticTask+0x68>
            ( void ) xSize; /* Prevent unused variable warning when configASSERT() is not used. */
 8000304:	697b      	ldr	r3, [r7, #20]
        }
        #endif /* configASSERT_DEFINED */

        if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8000306:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000308:	2b00      	cmp	r3, #0
 800030a:	d01f      	beq.n	800034c <prvCreateStaticTask+0xb4>
 800030c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800030e:	2b00      	cmp	r3, #0
 8000310:	d01c      	beq.n	800034c <prvCreateStaticTask+0xb4>
            /* The memory used for the task's TCB and stack are passed into this
             * function - use them. */
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxNewTCB = ( TCB_t * ) pxTaskBuffer;
 8000312:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000314:	627b      	str	r3, [r7, #36]	@ 0x24
            ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8000316:	2254      	movs	r2, #84	@ 0x54
 8000318:	2100      	movs	r1, #0
 800031a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800031c:	f002 f877 	bl	800240e <memset>
            pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8000320:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000322:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000324:	631a      	str	r2, [r3, #48]	@ 0x30

            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created statically in case the task is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8000326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000328:	2202      	movs	r2, #2
 800032a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800032e:	2300      	movs	r3, #0
 8000330:	9303      	str	r3, [sp, #12]
 8000332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000334:	9302      	str	r3, [sp, #8]
 8000336:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000338:	9301      	str	r3, [sp, #4]
 800033a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800033c:	9300      	str	r3, [sp, #0]
 800033e:	683b      	ldr	r3, [r7, #0]
 8000340:	687a      	ldr	r2, [r7, #4]
 8000342:	68b9      	ldr	r1, [r7, #8]
 8000344:	68f8      	ldr	r0, [r7, #12]
 8000346:	f000 f88f 	bl	8000468 <prvInitialiseNewTask>
 800034a:	e001      	b.n	8000350 <prvCreateStaticTask+0xb8>
        }
        else
        {
            pxNewTCB = NULL;
 800034c:	2300      	movs	r3, #0
 800034e:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        return pxNewTCB;
 8000350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8000352:	4618      	mov	r0, r3
 8000354:	3728      	adds	r7, #40	@ 0x28
 8000356:	46bd      	mov	sp, r7
 8000358:	bd80      	pop	{r7, pc}

0800035a <xTaskCreateStatic>:
                                    const configSTACK_DEPTH_TYPE uxStackDepth,
                                    void * const pvParameters,
                                    UBaseType_t uxPriority,
                                    StackType_t * const puxStackBuffer,
                                    StaticTask_t * const pxTaskBuffer )
    {
 800035a:	b580      	push	{r7, lr}
 800035c:	b08a      	sub	sp, #40	@ 0x28
 800035e:	af04      	add	r7, sp, #16
 8000360:	60f8      	str	r0, [r7, #12]
 8000362:	60b9      	str	r1, [r7, #8]
 8000364:	607a      	str	r2, [r7, #4]
 8000366:	603b      	str	r3, [r7, #0]
        TaskHandle_t xReturn = NULL;
 8000368:	2300      	movs	r3, #0
 800036a:	613b      	str	r3, [r7, #16]
        TCB_t * pxNewTCB;

        traceENTER_xTaskCreateStatic( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, puxStackBuffer, pxTaskBuffer );

        pxNewTCB = prvCreateStaticTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, puxStackBuffer, pxTaskBuffer, &xReturn );
 800036c:	f107 0310 	add.w	r3, r7, #16
 8000370:	9303      	str	r3, [sp, #12]
 8000372:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000374:	9302      	str	r3, [sp, #8]
 8000376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000378:	9301      	str	r3, [sp, #4]
 800037a:	6a3b      	ldr	r3, [r7, #32]
 800037c:	9300      	str	r3, [sp, #0]
 800037e:	683b      	ldr	r3, [r7, #0]
 8000380:	687a      	ldr	r2, [r7, #4]
 8000382:	68b9      	ldr	r1, [r7, #8]
 8000384:	68f8      	ldr	r0, [r7, #12]
 8000386:	f7ff ff87 	bl	8000298 <prvCreateStaticTask>
 800038a:	6178      	str	r0, [r7, #20]

        if( pxNewTCB != NULL )
 800038c:	697b      	ldr	r3, [r7, #20]
 800038e:	2b00      	cmp	r3, #0
 8000390:	d002      	beq.n	8000398 <xTaskCreateStatic+0x3e>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 8000392:	6978      	ldr	r0, [r7, #20]
 8000394:	f000 f8f0 	bl	8000578 <prvAddNewTaskToReadyList>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTaskCreateStatic( xReturn );

        return xReturn;
 8000398:	693b      	ldr	r3, [r7, #16]
    }
 800039a:	4618      	mov	r0, r3
 800039c:	3718      	adds	r7, #24
 800039e:	46bd      	mov	sp, r7
 80003a0:	bd80      	pop	{r7, pc}

080003a2 <prvCreateTask>:
                                  const char * const pcName,
                                  const configSTACK_DEPTH_TYPE uxStackDepth,
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask )
    {
 80003a2:	b580      	push	{r7, lr}
 80003a4:	b08a      	sub	sp, #40	@ 0x28
 80003a6:	af04      	add	r7, sp, #16
 80003a8:	60f8      	str	r0, [r7, #12]
 80003aa:	60b9      	str	r1, [r7, #8]
 80003ac:	607a      	str	r2, [r7, #4]
 80003ae:	603b      	str	r3, [r7, #0]

            /* Allocate space for the stack used by the task being created. */
            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 80003b0:	687b      	ldr	r3, [r7, #4]
 80003b2:	009b      	lsls	r3, r3, #2
 80003b4:	4618      	mov	r0, r3
 80003b6:	f001 f82b 	bl	8001410 <pvPortMalloc>
 80003ba:	6138      	str	r0, [r7, #16]

            if( pxStack != NULL )
 80003bc:	693b      	ldr	r3, [r7, #16]
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d013      	beq.n	80003ea <prvCreateTask+0x48>
            {
                /* Allocate space for the TCB. */
                /* MISRA Ref 11.5.1 [Malloc memory assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 80003c2:	2054      	movs	r0, #84	@ 0x54
 80003c4:	f001 f824 	bl	8001410 <pvPortMalloc>
 80003c8:	6178      	str	r0, [r7, #20]

                if( pxNewTCB != NULL )
 80003ca:	697b      	ldr	r3, [r7, #20]
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d008      	beq.n	80003e2 <prvCreateTask+0x40>
                {
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 80003d0:	2254      	movs	r2, #84	@ 0x54
 80003d2:	2100      	movs	r1, #0
 80003d4:	6978      	ldr	r0, [r7, #20]
 80003d6:	f002 f81a 	bl	800240e <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 80003da:	697b      	ldr	r3, [r7, #20]
 80003dc:	693a      	ldr	r2, [r7, #16]
 80003de:	631a      	str	r2, [r3, #48]	@ 0x30
 80003e0:	e005      	b.n	80003ee <prvCreateTask+0x4c>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 80003e2:	6938      	ldr	r0, [r7, #16]
 80003e4:	f001 f946 	bl	8001674 <vPortFree>
 80003e8:	e001      	b.n	80003ee <prvCreateTask+0x4c>
                }
            }
            else
            {
                pxNewTCB = NULL;
 80003ea:	2300      	movs	r3, #0
 80003ec:	617b      	str	r3, [r7, #20]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80003ee:	697b      	ldr	r3, [r7, #20]
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d011      	beq.n	8000418 <prvCreateTask+0x76>
        {
            #if ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
            {
                /* Tasks can be created statically or dynamically, so note this
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80003f4:	697b      	ldr	r3, [r7, #20]
 80003f6:	2200      	movs	r2, #0
 80003f8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80003fc:	2300      	movs	r3, #0
 80003fe:	9303      	str	r3, [sp, #12]
 8000400:	697b      	ldr	r3, [r7, #20]
 8000402:	9302      	str	r3, [sp, #8]
 8000404:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000406:	9301      	str	r3, [sp, #4]
 8000408:	6a3b      	ldr	r3, [r7, #32]
 800040a:	9300      	str	r3, [sp, #0]
 800040c:	683b      	ldr	r3, [r7, #0]
 800040e:	687a      	ldr	r2, [r7, #4]
 8000410:	68b9      	ldr	r1, [r7, #8]
 8000412:	68f8      	ldr	r0, [r7, #12]
 8000414:	f000 f828 	bl	8000468 <prvInitialiseNewTask>
        }

        return pxNewTCB;
 8000418:	697b      	ldr	r3, [r7, #20]
    }
 800041a:	4618      	mov	r0, r3
 800041c:	3718      	adds	r7, #24
 800041e:	46bd      	mov	sp, r7
 8000420:	bd80      	pop	{r7, pc}

08000422 <xTaskCreate>:
                            const char * const pcName,
                            const configSTACK_DEPTH_TYPE uxStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8000422:	b580      	push	{r7, lr}
 8000424:	b088      	sub	sp, #32
 8000426:	af02      	add	r7, sp, #8
 8000428:	60f8      	str	r0, [r7, #12]
 800042a:	60b9      	str	r1, [r7, #8]
 800042c:	607a      	str	r2, [r7, #4]
 800042e:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        BaseType_t xReturn;

        traceENTER_xTaskCreate( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );

        pxNewTCB = prvCreateTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );
 8000430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000432:	9301      	str	r3, [sp, #4]
 8000434:	6a3b      	ldr	r3, [r7, #32]
 8000436:	9300      	str	r3, [sp, #0]
 8000438:	683b      	ldr	r3, [r7, #0]
 800043a:	687a      	ldr	r2, [r7, #4]
 800043c:	68b9      	ldr	r1, [r7, #8]
 800043e:	68f8      	ldr	r0, [r7, #12]
 8000440:	f7ff ffaf 	bl	80003a2 <prvCreateTask>
 8000444:	6138      	str	r0, [r7, #16]

        if( pxNewTCB != NULL )
 8000446:	693b      	ldr	r3, [r7, #16]
 8000448:	2b00      	cmp	r3, #0
 800044a:	d005      	beq.n	8000458 <xTaskCreate+0x36>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 800044c:	6938      	ldr	r0, [r7, #16]
 800044e:	f000 f893 	bl	8000578 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8000452:	2301      	movs	r3, #1
 8000454:	617b      	str	r3, [r7, #20]
 8000456:	e002      	b.n	800045e <xTaskCreate+0x3c>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8000458:	f04f 33ff 	mov.w	r3, #4294967295
 800045c:	617b      	str	r3, [r7, #20]
        }

        traceRETURN_xTaskCreate( xReturn );

        return xReturn;
 800045e:	697b      	ldr	r3, [r7, #20]
    }
 8000460:	4618      	mov	r0, r3
 8000462:	3718      	adds	r7, #24
 8000464:	46bd      	mov	sp, r7
 8000466:	bd80      	pop	{r7, pc}

08000468 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8000468:	b580      	push	{r7, lr}
 800046a:	b088      	sub	sp, #32
 800046c:	af00      	add	r7, sp, #0
 800046e:	60f8      	str	r0, [r7, #12]
 8000470:	60b9      	str	r1, [r7, #8]
 8000472:	607a      	str	r2, [r7, #4]
 8000474:	603b      	str	r3, [r7, #0]
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 8000476:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000478:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8000480:	3b01      	subs	r3, #1
 8000482:	009b      	lsls	r3, r3, #2
 8000484:	4413      	add	r3, r2
 8000486:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 8000488:	69bb      	ldr	r3, [r7, #24]
 800048a:	f023 0307 	bic.w	r3, r3, #7
 800048e:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0U ) );
 8000490:	69bb      	ldr	r3, [r7, #24]
 8000492:	f003 0307 	and.w	r3, r3, #7
 8000496:	2b00      	cmp	r3, #0
 8000498:	d00b      	beq.n	80004b2 <prvInitialiseNewTask+0x4a>
    __asm volatile
 800049a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800049e:	f383 8811 	msr	BASEPRI, r3
 80004a2:	f3bf 8f6f 	isb	sy
 80004a6:	f3bf 8f4f 	dsb	sy
 80004aa:	617b      	str	r3, [r7, #20]
}
 80004ac:	bf00      	nop
 80004ae:	bf00      	nop
 80004b0:	e7fd      	b.n	80004ae <prvInitialiseNewTask+0x46>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80004b2:	68bb      	ldr	r3, [r7, #8]
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d01e      	beq.n	80004f6 <prvInitialiseNewTask+0x8e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80004b8:	2300      	movs	r3, #0
 80004ba:	61fb      	str	r3, [r7, #28]
 80004bc:	e012      	b.n	80004e4 <prvInitialiseNewTask+0x7c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80004be:	68ba      	ldr	r2, [r7, #8]
 80004c0:	69fb      	ldr	r3, [r7, #28]
 80004c2:	4413      	add	r3, r2
 80004c4:	7819      	ldrb	r1, [r3, #0]
 80004c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80004c8:	69fb      	ldr	r3, [r7, #28]
 80004ca:	4413      	add	r3, r2
 80004cc:	3334      	adds	r3, #52	@ 0x34
 80004ce:	460a      	mov	r2, r1
 80004d0:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80004d2:	68ba      	ldr	r2, [r7, #8]
 80004d4:	69fb      	ldr	r3, [r7, #28]
 80004d6:	4413      	add	r3, r2
 80004d8:	781b      	ldrb	r3, [r3, #0]
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d006      	beq.n	80004ec <prvInitialiseNewTask+0x84>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80004de:	69fb      	ldr	r3, [r7, #28]
 80004e0:	3301      	adds	r3, #1
 80004e2:	61fb      	str	r3, [r7, #28]
 80004e4:	69fb      	ldr	r3, [r7, #28]
 80004e6:	2b0f      	cmp	r3, #15
 80004e8:	d9e9      	bls.n	80004be <prvInitialiseNewTask+0x56>
 80004ea:	e000      	b.n	80004ee <prvInitialiseNewTask+0x86>
            {
                break;
 80004ec:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 80004ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80004f0:	2200      	movs	r2, #0
 80004f2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 80004f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80004f8:	2b06      	cmp	r3, #6
 80004fa:	d90b      	bls.n	8000514 <prvInitialiseNewTask+0xac>
    __asm volatile
 80004fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000500:	f383 8811 	msr	BASEPRI, r3
 8000504:	f3bf 8f6f 	isb	sy
 8000508:	f3bf 8f4f 	dsb	sy
 800050c:	613b      	str	r3, [r7, #16]
}
 800050e:	bf00      	nop
 8000510:	bf00      	nop
 8000512:	e7fd      	b.n	8000510 <prvInitialiseNewTask+0xa8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8000514:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000516:	2b06      	cmp	r3, #6
 8000518:	d901      	bls.n	800051e <prvInitialiseNewTask+0xb6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800051a:	2306      	movs	r3, #6
 800051c:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800051e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000520:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000522:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8000524:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000526:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000528:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800052a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800052c:	3304      	adds	r3, #4
 800052e:	4618      	mov	r0, r3
 8000530:	f7ff fe45 	bl	80001be <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8000534:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000536:	3318      	adds	r3, #24
 8000538:	4618      	mov	r0, r3
 800053a:	f7ff fe40 	bl	80001be <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800053e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000540:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000542:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 8000544:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000546:	f1c3 0207 	rsb	r2, r3, #7
 800054a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800054c:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800054e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000550:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000552:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8000554:	683a      	ldr	r2, [r7, #0]
 8000556:	68f9      	ldr	r1, [r7, #12]
 8000558:	69b8      	ldr	r0, [r7, #24]
 800055a:	f000 fd5b 	bl	8001014 <pxPortInitialiseStack>
 800055e:	4602      	mov	r2, r0
 8000560:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000562:	601a      	str	r2, [r3, #0]
            pxNewTCB->uxTaskAttributes |= taskATTRIBUTE_IS_IDLE;
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES > 1 ) */

    if( pxCreatedTask != NULL )
 8000564:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000566:	2b00      	cmp	r3, #0
 8000568:	d002      	beq.n	8000570 <prvInitialiseNewTask+0x108>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800056a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800056c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800056e:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8000570:	bf00      	nop
 8000572:	3720      	adds	r7, #32
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}

08000578 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
 8000578:	b580      	push	{r7, lr}
 800057a:	b084      	sub	sp, #16
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
 8000580:	f000 fe8a 	bl	8001298 <vPortEnterCritical>
        {
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
 8000584:	4b3f      	ldr	r3, [pc, #252]	@ (8000684 <prvAddNewTaskToReadyList+0x10c>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	3301      	adds	r3, #1
 800058a:	4a3e      	ldr	r2, [pc, #248]	@ (8000684 <prvAddNewTaskToReadyList+0x10c>)
 800058c:	6013      	str	r3, [r2, #0]

            if( pxCurrentTCB == NULL )
 800058e:	4b3e      	ldr	r3, [pc, #248]	@ (8000688 <prvAddNewTaskToReadyList+0x110>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	2b00      	cmp	r3, #0
 8000594:	d109      	bne.n	80005aa <prvAddNewTaskToReadyList+0x32>
            {
                /* There are no other tasks, or all the other tasks are in
                 * the suspended state - make this the current task. */
                pxCurrentTCB = pxNewTCB;
 8000596:	4a3c      	ldr	r2, [pc, #240]	@ (8000688 <prvAddNewTaskToReadyList+0x110>)
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	6013      	str	r3, [r2, #0]

                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800059c:	4b39      	ldr	r3, [pc, #228]	@ (8000684 <prvAddNewTaskToReadyList+0x10c>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	2b01      	cmp	r3, #1
 80005a2:	d110      	bne.n	80005c6 <prvAddNewTaskToReadyList+0x4e>
                {
                    /* This is the first task to be created so do the preliminary
                     * initialisation required.  We will not recover if this call
                     * fails, but we will report the failure. */
                    prvInitialiseTaskLists();
 80005a4:	f000 fbfc 	bl	8000da0 <prvInitialiseTaskLists>
 80005a8:	e00d      	b.n	80005c6 <prvAddNewTaskToReadyList+0x4e>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
 80005aa:	4b38      	ldr	r3, [pc, #224]	@ (800068c <prvAddNewTaskToReadyList+0x114>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d109      	bne.n	80005c6 <prvAddNewTaskToReadyList+0x4e>
                {
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80005b2:	4b35      	ldr	r3, [pc, #212]	@ (8000688 <prvAddNewTaskToReadyList+0x110>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80005bc:	429a      	cmp	r2, r3
 80005be:	d802      	bhi.n	80005c6 <prvAddNewTaskToReadyList+0x4e>
                    {
                        pxCurrentTCB = pxNewTCB;
 80005c0:	4a31      	ldr	r2, [pc, #196]	@ (8000688 <prvAddNewTaskToReadyList+0x110>)
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	6013      	str	r3, [r2, #0]
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            uxTaskNumber++;
 80005c6:	4b32      	ldr	r3, [pc, #200]	@ (8000690 <prvAddNewTaskToReadyList+0x118>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	3301      	adds	r3, #1
 80005cc:	4a30      	ldr	r2, [pc, #192]	@ (8000690 <prvAddNewTaskToReadyList+0x118>)
 80005ce:	6013      	str	r3, [r2, #0]
                pxNewTCB->uxTCBNumber = uxTaskNumber;
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );

            prvAddTaskToReadyList( pxNewTCB );
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80005d4:	2201      	movs	r2, #1
 80005d6:	409a      	lsls	r2, r3
 80005d8:	4b2e      	ldr	r3, [pc, #184]	@ (8000694 <prvAddNewTaskToReadyList+0x11c>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	4313      	orrs	r3, r2
 80005de:	4a2d      	ldr	r2, [pc, #180]	@ (8000694 <prvAddNewTaskToReadyList+0x11c>)
 80005e0:	6013      	str	r3, [r2, #0]
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80005e6:	492c      	ldr	r1, [pc, #176]	@ (8000698 <prvAddNewTaskToReadyList+0x120>)
 80005e8:	4613      	mov	r3, r2
 80005ea:	009b      	lsls	r3, r3, #2
 80005ec:	4413      	add	r3, r2
 80005ee:	009b      	lsls	r3, r3, #2
 80005f0:	440b      	add	r3, r1
 80005f2:	3304      	adds	r3, #4
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	60fb      	str	r3, [r7, #12]
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	68fa      	ldr	r2, [r7, #12]
 80005fc:	609a      	str	r2, [r3, #8]
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	689a      	ldr	r2, [r3, #8]
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	60da      	str	r2, [r3, #12]
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	689b      	ldr	r3, [r3, #8]
 800060a:	687a      	ldr	r2, [r7, #4]
 800060c:	3204      	adds	r2, #4
 800060e:	605a      	str	r2, [r3, #4]
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	1d1a      	adds	r2, r3, #4
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	609a      	str	r2, [r3, #8]
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800061c:	4613      	mov	r3, r2
 800061e:	009b      	lsls	r3, r3, #2
 8000620:	4413      	add	r3, r2
 8000622:	009b      	lsls	r3, r3, #2
 8000624:	4a1c      	ldr	r2, [pc, #112]	@ (8000698 <prvAddNewTaskToReadyList+0x120>)
 8000626:	441a      	add	r2, r3
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	615a      	str	r2, [r3, #20]
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000630:	4919      	ldr	r1, [pc, #100]	@ (8000698 <prvAddNewTaskToReadyList+0x120>)
 8000632:	4613      	mov	r3, r2
 8000634:	009b      	lsls	r3, r3, #2
 8000636:	4413      	add	r3, r2
 8000638:	009b      	lsls	r3, r3, #2
 800063a:	440b      	add	r3, r1
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	687a      	ldr	r2, [r7, #4]
 8000640:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8000642:	1c59      	adds	r1, r3, #1
 8000644:	4814      	ldr	r0, [pc, #80]	@ (8000698 <prvAddNewTaskToReadyList+0x120>)
 8000646:	4613      	mov	r3, r2
 8000648:	009b      	lsls	r3, r3, #2
 800064a:	4413      	add	r3, r2
 800064c:	009b      	lsls	r3, r3, #2
 800064e:	4403      	add	r3, r0
 8000650:	6019      	str	r1, [r3, #0]

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
 8000652:	f000 fe51 	bl	80012f8 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 8000656:	4b0d      	ldr	r3, [pc, #52]	@ (800068c <prvAddNewTaskToReadyList+0x114>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	2b00      	cmp	r3, #0
 800065c:	d00e      	beq.n	800067c <prvAddNewTaskToReadyList+0x104>
        {
            /* If the created task is of a higher priority than the current task
             * then it should run now. */
            taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
 800065e:	4b0a      	ldr	r3, [pc, #40]	@ (8000688 <prvAddNewTaskToReadyList+0x110>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000668:	429a      	cmp	r2, r3
 800066a:	d207      	bcs.n	800067c <prvAddNewTaskToReadyList+0x104>
 800066c:	4b0b      	ldr	r3, [pc, #44]	@ (800069c <prvAddNewTaskToReadyList+0x124>)
 800066e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000672:	601a      	str	r2, [r3, #0]
 8000674:	f3bf 8f4f 	dsb	sy
 8000678:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800067c:	bf00      	nop
 800067e:	3710      	adds	r7, #16
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	20000140 	.word	0x20000140
 8000688:	20000040 	.word	0x20000040
 800068c:	2000014c 	.word	0x2000014c
 8000690:	2000015c 	.word	0x2000015c
 8000694:	20000148 	.word	0x20000148
 8000698:	20000044 	.word	0x20000044
 800069c:	e000ed04 	.word	0xe000ed04

080006a0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b084      	sub	sp, #16
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 80006a8:	2300      	movs	r3, #0
 80006aa:	60fb      	str	r3, [r7, #12]

        traceENTER_vTaskDelay( xTicksToDelay );

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d018      	beq.n	80006e4 <vTaskDelay+0x44>
        {
            vTaskSuspendAll();
 80006b2:	f000 f8d1 	bl	8000858 <vTaskSuspendAll>
            {
                configASSERT( uxSchedulerSuspended == 1U );
 80006b6:	4b13      	ldr	r3, [pc, #76]	@ (8000704 <vTaskDelay+0x64>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	2b01      	cmp	r3, #1
 80006bc:	d00b      	beq.n	80006d6 <vTaskDelay+0x36>
    __asm volatile
 80006be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80006c2:	f383 8811 	msr	BASEPRI, r3
 80006c6:	f3bf 8f6f 	isb	sy
 80006ca:	f3bf 8f4f 	dsb	sy
 80006ce:	60bb      	str	r3, [r7, #8]
}
 80006d0:	bf00      	nop
 80006d2:	bf00      	nop
 80006d4:	e7fd      	b.n	80006d2 <vTaskDelay+0x32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80006d6:	2100      	movs	r1, #0
 80006d8:	6878      	ldr	r0, [r7, #4]
 80006da:	f000 fc19 	bl	8000f10 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 80006de:	f000 f8c9 	bl	8000874 <xTaskResumeAll>
 80006e2:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 80006e4:	68fb      	ldr	r3, [r7, #12]
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d107      	bne.n	80006fa <vTaskDelay+0x5a>
        {
            taskYIELD_WITHIN_API();
 80006ea:	4b07      	ldr	r3, [pc, #28]	@ (8000708 <vTaskDelay+0x68>)
 80006ec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80006f0:	601a      	str	r2, [r3, #0]
 80006f2:	f3bf 8f4f 	dsb	sy
 80006f6:	f3bf 8f6f 	isb	sy
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_vTaskDelay();
    }
 80006fa:	bf00      	nop
 80006fc:	3710      	adds	r7, #16
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	20000168 	.word	0x20000168
 8000708:	e000ed04 	.word	0xe000ed04

0800070c <prvCreateIdleTasks>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

static BaseType_t prvCreateIdleTasks( void )
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b090      	sub	sp, #64	@ 0x40
 8000710:	af04      	add	r7, sp, #16
    BaseType_t xReturn = pdPASS;
 8000712:	2301      	movs	r3, #1
 8000714:	62fb      	str	r3, [r7, #44]	@ 0x2c
    BaseType_t xCoreID;
    char cIdleName[ configMAX_TASK_NAME_LEN ];
    TaskFunction_t pxIdleTaskFunction = NULL;
 8000716:	2300      	movs	r3, #0
 8000718:	623b      	str	r3, [r7, #32]
    BaseType_t xIdleTaskNameIndex;

    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 800071a:	2300      	movs	r3, #0
 800071c:	627b      	str	r3, [r7, #36]	@ 0x24
 800071e:	e013      	b.n	8000748 <prvCreateIdleTasks+0x3c>
    {
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
 8000720:	4a2b      	ldr	r2, [pc, #172]	@ (80007d0 <prvCreateIdleTasks+0xc4>)
 8000722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000724:	4413      	add	r3, r2
 8000726:	7819      	ldrb	r1, [r3, #0]
 8000728:	f107 0210 	add.w	r2, r7, #16
 800072c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800072e:	4413      	add	r3, r2
 8000730:	460a      	mov	r2, r1
 8000732:	701a      	strb	r2, [r3, #0]

        /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
         * configMAX_TASK_NAME_LEN characters just in case the memory after the
         * string is not accessible (extremely unlikely). */
        if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
 8000734:	f107 0210 	add.w	r2, r7, #16
 8000738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800073a:	4413      	add	r3, r2
 800073c:	781b      	ldrb	r3, [r3, #0]
 800073e:	2b00      	cmp	r3, #0
 8000740:	d006      	beq.n	8000750 <prvCreateIdleTasks+0x44>
    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 8000742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000744:	3301      	adds	r3, #1
 8000746:	627b      	str	r3, [r7, #36]	@ 0x24
 8000748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800074a:	2b0f      	cmp	r3, #15
 800074c:	dde8      	ble.n	8000720 <prvCreateIdleTasks+0x14>
 800074e:	e000      	b.n	8000752 <prvCreateIdleTasks+0x46>
        {
            break;
 8000750:	bf00      	nop
            mtCOVERAGE_TEST_MARKER();
        }
    }

    /* Add each idle task at the lowest priority. */
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 8000752:	2300      	movs	r3, #0
 8000754:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000756:	e031      	b.n	80007bc <prvCreateIdleTasks+0xb0>
    {
        #if ( configNUMBER_OF_CORES == 1 )
        {
            pxIdleTaskFunction = prvIdleTask;
 8000758:	4b1e      	ldr	r3, [pc, #120]	@ (80007d4 <prvCreateIdleTasks+0xc8>)
 800075a:	623b      	str	r3, [r7, #32]
        }
        #endif /* if ( configNUMBER_OF_CORES > 1 ) */

        #if ( configSUPPORT_STATIC_ALLOCATION == 1 )
        {
            StaticTask_t * pxIdleTaskTCBBuffer = NULL;
 800075c:	2300      	movs	r3, #0
 800075e:	60fb      	str	r3, [r7, #12]
            StackType_t * pxIdleTaskStackBuffer = NULL;
 8000760:	2300      	movs	r3, #0
 8000762:	60bb      	str	r3, [r7, #8]

            /* The Idle task is created using user provided RAM - obtain the
             * address of the RAM then create the idle task. */
            #if ( configNUMBER_OF_CORES == 1 )
            {
                vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &uxIdleTaskStackSize );
 8000764:	1d3a      	adds	r2, r7, #4
 8000766:	f107 0108 	add.w	r1, r7, #8
 800076a:	f107 030c 	add.w	r3, r7, #12
 800076e:	4618      	mov	r0, r3
 8000770:	f001 fdba 	bl	80022e8 <vApplicationGetIdleTaskMemory>
                {
                    vApplicationGetPassiveIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &uxIdleTaskStackSize, ( BaseType_t ) ( xCoreID - 1 ) );
                }
            }
            #endif /* if ( configNUMBER_OF_CORES == 1 ) */
            xIdleTaskHandles[ xCoreID ] = xTaskCreateStatic( pxIdleTaskFunction,
 8000774:	6878      	ldr	r0, [r7, #4]
 8000776:	68bb      	ldr	r3, [r7, #8]
 8000778:	68fa      	ldr	r2, [r7, #12]
 800077a:	f107 0110 	add.w	r1, r7, #16
 800077e:	9202      	str	r2, [sp, #8]
 8000780:	9301      	str	r3, [sp, #4]
 8000782:	2300      	movs	r3, #0
 8000784:	9300      	str	r3, [sp, #0]
 8000786:	2300      	movs	r3, #0
 8000788:	4602      	mov	r2, r0
 800078a:	6a38      	ldr	r0, [r7, #32]
 800078c:	f7ff fde5 	bl	800035a <xTaskCreateStatic>
 8000790:	4602      	mov	r2, r0
 8000792:	4911      	ldr	r1, [pc, #68]	@ (80007d8 <prvCreateIdleTasks+0xcc>)
 8000794:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000796:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                                                             ( void * ) NULL,
                                                             portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
                                                             pxIdleTaskStackBuffer,
                                                             pxIdleTaskTCBBuffer );

            if( xIdleTaskHandles[ xCoreID ] != NULL )
 800079a:	4a0f      	ldr	r2, [pc, #60]	@ (80007d8 <prvCreateIdleTasks+0xcc>)
 800079c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800079e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d002      	beq.n	80007ac <prvCreateIdleTasks+0xa0>
            {
                xReturn = pdPASS;
 80007a6:	2301      	movs	r3, #1
 80007a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80007aa:	e001      	b.n	80007b0 <prvCreateIdleTasks+0xa4>
            }
            else
            {
                xReturn = pdFAIL;
 80007ac:	2300      	movs	r3, #0
 80007ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
                                   &xIdleTaskHandles[ xCoreID ] );
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        /* Break the loop if any of the idle task is failed to be created. */
        if( xReturn == pdFAIL )
 80007b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d006      	beq.n	80007c4 <prvCreateIdleTasks+0xb8>
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 80007b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80007b8:	3301      	adds	r3, #1
 80007ba:	62bb      	str	r3, [r7, #40]	@ 0x28
 80007bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80007be:	2b00      	cmp	r3, #0
 80007c0:	ddca      	ble.n	8000758 <prvCreateIdleTasks+0x4c>
 80007c2:	e000      	b.n	80007c6 <prvCreateIdleTasks+0xba>
        {
            break;
 80007c4:	bf00      	nop
            }
            #endif
        }
    }

    return xReturn;
 80007c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80007c8:	4618      	mov	r0, r3
 80007ca:	3730      	adds	r7, #48	@ 0x30
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	08002480 	.word	0x08002480
 80007d4:	08000d71 	.word	0x08000d71
 80007d8:	20000164 	.word	0x20000164

080007dc <vTaskStartScheduler>:

/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b084      	sub	sp, #16
 80007e0:	af00      	add	r7, sp, #0
         * the number of bits as confNUMBER_OF_CORES. */
        configASSERT( ( sizeof( UBaseType_t ) * taskBITS_PER_BYTE ) >= configNUMBER_OF_CORES );
    }
    #endif /* #if ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 ) */

    xReturn = prvCreateIdleTasks();
 80007e2:	f7ff ff93 	bl	800070c <prvCreateIdleTasks>
 80007e6:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	2b01      	cmp	r3, #1
 80007ec:	d116      	bne.n	800081c <vTaskStartScheduler+0x40>
    __asm volatile
 80007ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80007f2:	f383 8811 	msr	BASEPRI, r3
 80007f6:	f3bf 8f6f 	isb	sy
 80007fa:	f3bf 8f4f 	dsb	sy
 80007fe:	60bb      	str	r3, [r7, #8]
}
 8000800:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8000802:	4b11      	ldr	r3, [pc, #68]	@ (8000848 <vTaskStartScheduler+0x6c>)
 8000804:	f04f 32ff 	mov.w	r2, #4294967295
 8000808:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800080a:	4b10      	ldr	r3, [pc, #64]	@ (800084c <vTaskStartScheduler+0x70>)
 800080c:	2201      	movs	r2, #1
 800080e:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8000810:	4b0f      	ldr	r3, [pc, #60]	@ (8000850 <vTaskStartScheduler+0x74>)
 8000812:	2200      	movs	r2, #0
 8000814:	601a      	str	r2, [r3, #0]
        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */

        /* The return value for xPortStartScheduler is not required
         * hence using a void datatype. */
        ( void ) xPortStartScheduler();
 8000816:	f000 fc81 	bl	800111c <xPortStartScheduler>
 800081a:	e00f      	b.n	800083c <vTaskStartScheduler+0x60>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000822:	d10b      	bne.n	800083c <vTaskStartScheduler+0x60>
    __asm volatile
 8000824:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000828:	f383 8811 	msr	BASEPRI, r3
 800082c:	f3bf 8f6f 	isb	sy
 8000830:	f3bf 8f4f 	dsb	sy
 8000834:	607b      	str	r3, [r7, #4]
}
 8000836:	bf00      	nop
 8000838:	bf00      	nop
 800083a:	e7fd      	b.n	8000838 <vTaskStartScheduler+0x5c>
     * meaning xIdleTaskHandles are not used anywhere else. */
    ( void ) xIdleTaskHandles;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800083c:	4b05      	ldr	r3, [pc, #20]	@ (8000854 <vTaskStartScheduler+0x78>)
 800083e:	681b      	ldr	r3, [r3, #0]

    traceRETURN_vTaskStartScheduler();
}
 8000840:	bf00      	nop
 8000842:	3710      	adds	r7, #16
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	20000160 	.word	0x20000160
 800084c:	2000014c 	.word	0x2000014c
 8000850:	20000144 	.word	0x20000144
 8000854:	20000000 	.word	0x20000000

08000858 <vTaskSuspendAll>:
    traceRETURN_vTaskEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
         * do not otherwise exhibit real time behaviour. */
        portSOFTWARE_BARRIER();

        /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
         * is used to allow calls to vTaskSuspendAll() to nest. */
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
 800085c:	4b04      	ldr	r3, [pc, #16]	@ (8000870 <vTaskSuspendAll+0x18>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	3301      	adds	r3, #1
 8000862:	4a03      	ldr	r2, [pc, #12]	@ (8000870 <vTaskSuspendAll+0x18>)
 8000864:	6013      	str	r3, [r2, #0]
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskSuspendAll();
}
 8000866:	bf00      	nop
 8000868:	46bd      	mov	sp, r7
 800086a:	bc80      	pop	{r7}
 800086c:	4770      	bx	lr
 800086e:	bf00      	nop
 8000870:	20000168 	.word	0x20000168

08000874 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b088      	sub	sp, #32
 8000878:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800087a:	2300      	movs	r3, #0
 800087c:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 800087e:	2300      	movs	r3, #0
 8000880:	61bb      	str	r3, [r7, #24]
        /* It is possible that an ISR caused a task to be removed from an event
         * list while the scheduler was suspended.  If this was the case then the
         * removed task will have been added to the xPendingReadyList.  Once the
         * scheduler has been resumed it is safe to move all the pending ready
         * tasks from this list into their appropriate ready list. */
        taskENTER_CRITICAL();
 8000882:	f000 fd09 	bl	8001298 <vPortEnterCritical>
        {
            BaseType_t xCoreID;
            xCoreID = ( BaseType_t ) portGET_CORE_ID();
 8000886:	2300      	movs	r3, #0
 8000888:	613b      	str	r3, [r7, #16]

            /* If uxSchedulerSuspended is zero then this function does not match a
             * previous call to vTaskSuspendAll(). */
            configASSERT( uxSchedulerSuspended != 0U );
 800088a:	4b75      	ldr	r3, [pc, #468]	@ (8000a60 <xTaskResumeAll+0x1ec>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	2b00      	cmp	r3, #0
 8000890:	d10b      	bne.n	80008aa <xTaskResumeAll+0x36>
    __asm volatile
 8000892:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000896:	f383 8811 	msr	BASEPRI, r3
 800089a:	f3bf 8f6f 	isb	sy
 800089e:	f3bf 8f4f 	dsb	sy
 80008a2:	603b      	str	r3, [r7, #0]
}
 80008a4:	bf00      	nop
 80008a6:	bf00      	nop
 80008a8:	e7fd      	b.n	80008a6 <xTaskResumeAll+0x32>

            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
 80008aa:	4b6d      	ldr	r3, [pc, #436]	@ (8000a60 <xTaskResumeAll+0x1ec>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	3b01      	subs	r3, #1
 80008b0:	4a6b      	ldr	r2, [pc, #428]	@ (8000a60 <xTaskResumeAll+0x1ec>)
 80008b2:	6013      	str	r3, [r2, #0]
            portRELEASE_TASK_LOCK();

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 80008b4:	4b6a      	ldr	r3, [pc, #424]	@ (8000a60 <xTaskResumeAll+0x1ec>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	f040 80ca 	bne.w	8000a52 <xTaskResumeAll+0x1de>
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80008be:	4b69      	ldr	r3, [pc, #420]	@ (8000a64 <xTaskResumeAll+0x1f0>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	f000 80c5 	beq.w	8000a52 <xTaskResumeAll+0x1de>
                {
                    /* Move any readied tasks from the pending list into the
                     * appropriate ready list. */
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80008c8:	e08e      	b.n	80009e8 <xTaskResumeAll+0x174>
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80008ca:	4b67      	ldr	r3, [pc, #412]	@ (8000a68 <xTaskResumeAll+0x1f4>)
 80008cc:	68db      	ldr	r3, [r3, #12]
 80008ce:	68db      	ldr	r3, [r3, #12]
 80008d0:	61fb      	str	r3, [r7, #28]
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80008d2:	69fb      	ldr	r3, [r7, #28]
 80008d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80008d6:	60fb      	str	r3, [r7, #12]
 80008d8:	69fb      	ldr	r3, [r7, #28]
 80008da:	69db      	ldr	r3, [r3, #28]
 80008dc:	69fa      	ldr	r2, [r7, #28]
 80008de:	6a12      	ldr	r2, [r2, #32]
 80008e0:	609a      	str	r2, [r3, #8]
 80008e2:	69fb      	ldr	r3, [r7, #28]
 80008e4:	6a1b      	ldr	r3, [r3, #32]
 80008e6:	69fa      	ldr	r2, [r7, #28]
 80008e8:	69d2      	ldr	r2, [r2, #28]
 80008ea:	605a      	str	r2, [r3, #4]
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	685a      	ldr	r2, [r3, #4]
 80008f0:	69fb      	ldr	r3, [r7, #28]
 80008f2:	3318      	adds	r3, #24
 80008f4:	429a      	cmp	r2, r3
 80008f6:	d103      	bne.n	8000900 <xTaskResumeAll+0x8c>
 80008f8:	69fb      	ldr	r3, [r7, #28]
 80008fa:	6a1a      	ldr	r2, [r3, #32]
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	605a      	str	r2, [r3, #4]
 8000900:	69fb      	ldr	r3, [r7, #28]
 8000902:	2200      	movs	r2, #0
 8000904:	629a      	str	r2, [r3, #40]	@ 0x28
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	1e5a      	subs	r2, r3, #1
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	601a      	str	r2, [r3, #0]
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8000910:	69fb      	ldr	r3, [r7, #28]
 8000912:	695b      	ldr	r3, [r3, #20]
 8000914:	60bb      	str	r3, [r7, #8]
 8000916:	69fb      	ldr	r3, [r7, #28]
 8000918:	689b      	ldr	r3, [r3, #8]
 800091a:	69fa      	ldr	r2, [r7, #28]
 800091c:	68d2      	ldr	r2, [r2, #12]
 800091e:	609a      	str	r2, [r3, #8]
 8000920:	69fb      	ldr	r3, [r7, #28]
 8000922:	68db      	ldr	r3, [r3, #12]
 8000924:	69fa      	ldr	r2, [r7, #28]
 8000926:	6892      	ldr	r2, [r2, #8]
 8000928:	605a      	str	r2, [r3, #4]
 800092a:	68bb      	ldr	r3, [r7, #8]
 800092c:	685a      	ldr	r2, [r3, #4]
 800092e:	69fb      	ldr	r3, [r7, #28]
 8000930:	3304      	adds	r3, #4
 8000932:	429a      	cmp	r2, r3
 8000934:	d103      	bne.n	800093e <xTaskResumeAll+0xca>
 8000936:	69fb      	ldr	r3, [r7, #28]
 8000938:	68da      	ldr	r2, [r3, #12]
 800093a:	68bb      	ldr	r3, [r7, #8]
 800093c:	605a      	str	r2, [r3, #4]
 800093e:	69fb      	ldr	r3, [r7, #28]
 8000940:	2200      	movs	r2, #0
 8000942:	615a      	str	r2, [r3, #20]
 8000944:	68bb      	ldr	r3, [r7, #8]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	1e5a      	subs	r2, r3, #1
 800094a:	68bb      	ldr	r3, [r7, #8]
 800094c:	601a      	str	r2, [r3, #0]
                        prvAddTaskToReadyList( pxTCB );
 800094e:	69fb      	ldr	r3, [r7, #28]
 8000950:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000952:	2201      	movs	r2, #1
 8000954:	409a      	lsls	r2, r3
 8000956:	4b45      	ldr	r3, [pc, #276]	@ (8000a6c <xTaskResumeAll+0x1f8>)
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	4313      	orrs	r3, r2
 800095c:	4a43      	ldr	r2, [pc, #268]	@ (8000a6c <xTaskResumeAll+0x1f8>)
 800095e:	6013      	str	r3, [r2, #0]
 8000960:	69fb      	ldr	r3, [r7, #28]
 8000962:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000964:	4942      	ldr	r1, [pc, #264]	@ (8000a70 <xTaskResumeAll+0x1fc>)
 8000966:	4613      	mov	r3, r2
 8000968:	009b      	lsls	r3, r3, #2
 800096a:	4413      	add	r3, r2
 800096c:	009b      	lsls	r3, r3, #2
 800096e:	440b      	add	r3, r1
 8000970:	3304      	adds	r3, #4
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	607b      	str	r3, [r7, #4]
 8000976:	69fb      	ldr	r3, [r7, #28]
 8000978:	687a      	ldr	r2, [r7, #4]
 800097a:	609a      	str	r2, [r3, #8]
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	689a      	ldr	r2, [r3, #8]
 8000980:	69fb      	ldr	r3, [r7, #28]
 8000982:	60da      	str	r2, [r3, #12]
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	689b      	ldr	r3, [r3, #8]
 8000988:	69fa      	ldr	r2, [r7, #28]
 800098a:	3204      	adds	r2, #4
 800098c:	605a      	str	r2, [r3, #4]
 800098e:	69fb      	ldr	r3, [r7, #28]
 8000990:	1d1a      	adds	r2, r3, #4
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	609a      	str	r2, [r3, #8]
 8000996:	69fb      	ldr	r3, [r7, #28]
 8000998:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800099a:	4613      	mov	r3, r2
 800099c:	009b      	lsls	r3, r3, #2
 800099e:	4413      	add	r3, r2
 80009a0:	009b      	lsls	r3, r3, #2
 80009a2:	4a33      	ldr	r2, [pc, #204]	@ (8000a70 <xTaskResumeAll+0x1fc>)
 80009a4:	441a      	add	r2, r3
 80009a6:	69fb      	ldr	r3, [r7, #28]
 80009a8:	615a      	str	r2, [r3, #20]
 80009aa:	69fb      	ldr	r3, [r7, #28]
 80009ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80009ae:	4930      	ldr	r1, [pc, #192]	@ (8000a70 <xTaskResumeAll+0x1fc>)
 80009b0:	4613      	mov	r3, r2
 80009b2:	009b      	lsls	r3, r3, #2
 80009b4:	4413      	add	r3, r2
 80009b6:	009b      	lsls	r3, r3, #2
 80009b8:	440b      	add	r3, r1
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	69fa      	ldr	r2, [r7, #28]
 80009be:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80009c0:	1c59      	adds	r1, r3, #1
 80009c2:	482b      	ldr	r0, [pc, #172]	@ (8000a70 <xTaskResumeAll+0x1fc>)
 80009c4:	4613      	mov	r3, r2
 80009c6:	009b      	lsls	r3, r3, #2
 80009c8:	4413      	add	r3, r2
 80009ca:	009b      	lsls	r3, r3, #2
 80009cc:	4403      	add	r3, r0
 80009ce:	6019      	str	r1, [r3, #0]

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80009d0:	69fb      	ldr	r3, [r7, #28]
 80009d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80009d4:	4b27      	ldr	r3, [pc, #156]	@ (8000a74 <xTaskResumeAll+0x200>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80009da:	429a      	cmp	r2, r3
 80009dc:	d904      	bls.n	80009e8 <xTaskResumeAll+0x174>
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
 80009de:	4a26      	ldr	r2, [pc, #152]	@ (8000a78 <xTaskResumeAll+0x204>)
 80009e0:	693b      	ldr	r3, [r7, #16]
 80009e2:	2101      	movs	r1, #1
 80009e4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80009e8:	4b1f      	ldr	r3, [pc, #124]	@ (8000a68 <xTaskResumeAll+0x1f4>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	f47f af6c 	bne.w	80008ca <xTaskResumeAll+0x56>
                             * which sets xYieldPendings for the current core to pdTRUE. */
                        }
                        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                    }

                    if( pxTCB != NULL )
 80009f2:	69fb      	ldr	r3, [r7, #28]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d001      	beq.n	80009fc <xTaskResumeAll+0x188>
                         * which may have prevented the next unblock time from being
                         * re-calculated, in which case re-calculate it now.  Mainly
                         * important for low power tickless implementations, where
                         * this can prevent an unnecessary exit from low power
                         * state. */
                        prvResetNextTaskUnblockTime();
 80009f8:	f000 fa70 	bl	8000edc <prvResetNextTaskUnblockTime>
                     * It should be safe to call xTaskIncrementTick here from any core
                     * since we are in a critical section and xTaskIncrementTick itself
                     * protects itself within a critical section. Suspending the scheduler
                     * from any core causes xTaskIncrementTick to increment uxPendedCounts. */
                    {
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80009fc:	4b1f      	ldr	r3, [pc, #124]	@ (8000a7c <xTaskResumeAll+0x208>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	617b      	str	r3, [r7, #20]

                        if( xPendedCounts > ( TickType_t ) 0U )
 8000a02:	697b      	ldr	r3, [r7, #20]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d012      	beq.n	8000a2e <xTaskResumeAll+0x1ba>
                        {
                            do
                            {
                                if( xTaskIncrementTick() != pdFALSE )
 8000a08:	f000 f83c 	bl	8000a84 <xTaskIncrementTick>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d004      	beq.n	8000a1c <xTaskResumeAll+0x1a8>
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 8000a12:	4a19      	ldr	r2, [pc, #100]	@ (8000a78 <xTaskResumeAll+0x204>)
 8000a14:	693b      	ldr	r3, [r7, #16]
 8000a16:	2101      	movs	r1, #1
 8000a18:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }

                                --xPendedCounts;
 8000a1c:	697b      	ldr	r3, [r7, #20]
 8000a1e:	3b01      	subs	r3, #1
 8000a20:	617b      	str	r3, [r7, #20]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 8000a22:	697b      	ldr	r3, [r7, #20]
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d1ef      	bne.n	8000a08 <xTaskResumeAll+0x194>

                            xPendedTicks = 0;
 8000a28:	4b14      	ldr	r3, [pc, #80]	@ (8000a7c <xTaskResumeAll+0x208>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	601a      	str	r2, [r3, #0]
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
 8000a2e:	4a12      	ldr	r2, [pc, #72]	@ (8000a78 <xTaskResumeAll+0x204>)
 8000a30:	693b      	ldr	r3, [r7, #16]
 8000a32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d00b      	beq.n	8000a52 <xTaskResumeAll+0x1de>
                    {
                        #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	61bb      	str	r3, [r7, #24]
                        }
                        #endif /* #if ( configUSE_PREEMPTION != 0 ) */

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxCurrentTCB );
 8000a3e:	4b0d      	ldr	r3, [pc, #52]	@ (8000a74 <xTaskResumeAll+0x200>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	4b0f      	ldr	r3, [pc, #60]	@ (8000a80 <xTaskResumeAll+0x20c>)
 8000a44:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000a48:	601a      	str	r2, [r3, #0]
 8000a4a:	f3bf 8f4f 	dsb	sy
 8000a4e:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8000a52:	f000 fc51 	bl	80012f8 <vPortExitCritical>
    }

    traceRETURN_xTaskResumeAll( xAlreadyYielded );

    return xAlreadyYielded;
 8000a56:	69bb      	ldr	r3, [r7, #24]
}
 8000a58:	4618      	mov	r0, r3
 8000a5a:	3720      	adds	r7, #32
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	20000168 	.word	0x20000168
 8000a64:	20000140 	.word	0x20000140
 8000a68:	20000100 	.word	0x20000100
 8000a6c:	20000148 	.word	0x20000148
 8000a70:	20000044 	.word	0x20000044
 8000a74:	20000040 	.word	0x20000040
 8000a78:	20000154 	.word	0x20000154
 8000a7c:	20000150 	.word	0x20000150
 8000a80:	e000ed04 	.word	0xe000ed04

08000a84 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b08a      	sub	sp, #40	@ 0x28
 8000a88:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8000a8e:	4b7f      	ldr	r3, [pc, #508]	@ (8000c8c <xTaskIncrementTick+0x208>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	f040 80ef 	bne.w	8000c76 <xTaskIncrementTick+0x1f2>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8000a98:	4b7d      	ldr	r3, [pc, #500]	@ (8000c90 <xTaskIncrementTick+0x20c>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	3301      	adds	r3, #1
 8000a9e:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8000aa0:	4a7b      	ldr	r2, [pc, #492]	@ (8000c90 <xTaskIncrementTick+0x20c>)
 8000aa2:	6a3b      	ldr	r3, [r7, #32]
 8000aa4:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U )
 8000aa6:	6a3b      	ldr	r3, [r7, #32]
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d121      	bne.n	8000af0 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8000aac:	4b79      	ldr	r3, [pc, #484]	@ (8000c94 <xTaskIncrementTick+0x210>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d00b      	beq.n	8000ace <xTaskIncrementTick+0x4a>
    __asm volatile
 8000ab6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000aba:	f383 8811 	msr	BASEPRI, r3
 8000abe:	f3bf 8f6f 	isb	sy
 8000ac2:	f3bf 8f4f 	dsb	sy
 8000ac6:	607b      	str	r3, [r7, #4]
}
 8000ac8:	bf00      	nop
 8000aca:	bf00      	nop
 8000acc:	e7fd      	b.n	8000aca <xTaskIncrementTick+0x46>
 8000ace:	4b71      	ldr	r3, [pc, #452]	@ (8000c94 <xTaskIncrementTick+0x210>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	61fb      	str	r3, [r7, #28]
 8000ad4:	4b70      	ldr	r3, [pc, #448]	@ (8000c98 <xTaskIncrementTick+0x214>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a6e      	ldr	r2, [pc, #440]	@ (8000c94 <xTaskIncrementTick+0x210>)
 8000ada:	6013      	str	r3, [r2, #0]
 8000adc:	4a6e      	ldr	r2, [pc, #440]	@ (8000c98 <xTaskIncrementTick+0x214>)
 8000ade:	69fb      	ldr	r3, [r7, #28]
 8000ae0:	6013      	str	r3, [r2, #0]
 8000ae2:	4b6e      	ldr	r3, [pc, #440]	@ (8000c9c <xTaskIncrementTick+0x218>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	3301      	adds	r3, #1
 8000ae8:	4a6c      	ldr	r2, [pc, #432]	@ (8000c9c <xTaskIncrementTick+0x218>)
 8000aea:	6013      	str	r3, [r2, #0]
 8000aec:	f000 f9f6 	bl	8000edc <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8000af0:	4b6b      	ldr	r3, [pc, #428]	@ (8000ca0 <xTaskIncrementTick+0x21c>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	6a3a      	ldr	r2, [r7, #32]
 8000af6:	429a      	cmp	r2, r3
 8000af8:	f0c0 80a8 	bcc.w	8000c4c <xTaskIncrementTick+0x1c8>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000afc:	4b65      	ldr	r3, [pc, #404]	@ (8000c94 <xTaskIncrementTick+0x210>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d104      	bne.n	8000b10 <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
 8000b06:	4b66      	ldr	r3, [pc, #408]	@ (8000ca0 <xTaskIncrementTick+0x21c>)
 8000b08:	f04f 32ff 	mov.w	r2, #4294967295
 8000b0c:	601a      	str	r2, [r3, #0]
                    break;
 8000b0e:	e09d      	b.n	8000c4c <xTaskIncrementTick+0x1c8>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8000b10:	4b60      	ldr	r3, [pc, #384]	@ (8000c94 <xTaskIncrementTick+0x210>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	68db      	ldr	r3, [r3, #12]
 8000b16:	68db      	ldr	r3, [r3, #12]
 8000b18:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8000b1a:	69bb      	ldr	r3, [r7, #24]
 8000b1c:	685b      	ldr	r3, [r3, #4]
 8000b1e:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8000b20:	6a3a      	ldr	r2, [r7, #32]
 8000b22:	697b      	ldr	r3, [r7, #20]
 8000b24:	429a      	cmp	r2, r3
 8000b26:	d203      	bcs.n	8000b30 <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8000b28:	4a5d      	ldr	r2, [pc, #372]	@ (8000ca0 <xTaskIncrementTick+0x21c>)
 8000b2a:	697b      	ldr	r3, [r7, #20]
 8000b2c:	6013      	str	r3, [r2, #0]
                        break;
 8000b2e:	e08d      	b.n	8000c4c <xTaskIncrementTick+0x1c8>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8000b30:	69bb      	ldr	r3, [r7, #24]
 8000b32:	695b      	ldr	r3, [r3, #20]
 8000b34:	613b      	str	r3, [r7, #16]
 8000b36:	69bb      	ldr	r3, [r7, #24]
 8000b38:	689b      	ldr	r3, [r3, #8]
 8000b3a:	69ba      	ldr	r2, [r7, #24]
 8000b3c:	68d2      	ldr	r2, [r2, #12]
 8000b3e:	609a      	str	r2, [r3, #8]
 8000b40:	69bb      	ldr	r3, [r7, #24]
 8000b42:	68db      	ldr	r3, [r3, #12]
 8000b44:	69ba      	ldr	r2, [r7, #24]
 8000b46:	6892      	ldr	r2, [r2, #8]
 8000b48:	605a      	str	r2, [r3, #4]
 8000b4a:	693b      	ldr	r3, [r7, #16]
 8000b4c:	685a      	ldr	r2, [r3, #4]
 8000b4e:	69bb      	ldr	r3, [r7, #24]
 8000b50:	3304      	adds	r3, #4
 8000b52:	429a      	cmp	r2, r3
 8000b54:	d103      	bne.n	8000b5e <xTaskIncrementTick+0xda>
 8000b56:	69bb      	ldr	r3, [r7, #24]
 8000b58:	68da      	ldr	r2, [r3, #12]
 8000b5a:	693b      	ldr	r3, [r7, #16]
 8000b5c:	605a      	str	r2, [r3, #4]
 8000b5e:	69bb      	ldr	r3, [r7, #24]
 8000b60:	2200      	movs	r2, #0
 8000b62:	615a      	str	r2, [r3, #20]
 8000b64:	693b      	ldr	r3, [r7, #16]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	1e5a      	subs	r2, r3, #1
 8000b6a:	693b      	ldr	r3, [r7, #16]
 8000b6c:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8000b6e:	69bb      	ldr	r3, [r7, #24]
 8000b70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d01e      	beq.n	8000bb4 <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8000b76:	69bb      	ldr	r3, [r7, #24]
 8000b78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b7a:	60fb      	str	r3, [r7, #12]
 8000b7c:	69bb      	ldr	r3, [r7, #24]
 8000b7e:	69db      	ldr	r3, [r3, #28]
 8000b80:	69ba      	ldr	r2, [r7, #24]
 8000b82:	6a12      	ldr	r2, [r2, #32]
 8000b84:	609a      	str	r2, [r3, #8]
 8000b86:	69bb      	ldr	r3, [r7, #24]
 8000b88:	6a1b      	ldr	r3, [r3, #32]
 8000b8a:	69ba      	ldr	r2, [r7, #24]
 8000b8c:	69d2      	ldr	r2, [r2, #28]
 8000b8e:	605a      	str	r2, [r3, #4]
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	685a      	ldr	r2, [r3, #4]
 8000b94:	69bb      	ldr	r3, [r7, #24]
 8000b96:	3318      	adds	r3, #24
 8000b98:	429a      	cmp	r2, r3
 8000b9a:	d103      	bne.n	8000ba4 <xTaskIncrementTick+0x120>
 8000b9c:	69bb      	ldr	r3, [r7, #24]
 8000b9e:	6a1a      	ldr	r2, [r3, #32]
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	605a      	str	r2, [r3, #4]
 8000ba4:	69bb      	ldr	r3, [r7, #24]
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	629a      	str	r2, [r3, #40]	@ 0x28
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	1e5a      	subs	r2, r3, #1
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8000bb4:	69bb      	ldr	r3, [r7, #24]
 8000bb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000bb8:	2201      	movs	r2, #1
 8000bba:	409a      	lsls	r2, r3
 8000bbc:	4b39      	ldr	r3, [pc, #228]	@ (8000ca4 <xTaskIncrementTick+0x220>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4313      	orrs	r3, r2
 8000bc2:	4a38      	ldr	r2, [pc, #224]	@ (8000ca4 <xTaskIncrementTick+0x220>)
 8000bc4:	6013      	str	r3, [r2, #0]
 8000bc6:	69bb      	ldr	r3, [r7, #24]
 8000bc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000bca:	4937      	ldr	r1, [pc, #220]	@ (8000ca8 <xTaskIncrementTick+0x224>)
 8000bcc:	4613      	mov	r3, r2
 8000bce:	009b      	lsls	r3, r3, #2
 8000bd0:	4413      	add	r3, r2
 8000bd2:	009b      	lsls	r3, r3, #2
 8000bd4:	440b      	add	r3, r1
 8000bd6:	3304      	adds	r3, #4
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	60bb      	str	r3, [r7, #8]
 8000bdc:	69bb      	ldr	r3, [r7, #24]
 8000bde:	68ba      	ldr	r2, [r7, #8]
 8000be0:	609a      	str	r2, [r3, #8]
 8000be2:	68bb      	ldr	r3, [r7, #8]
 8000be4:	689a      	ldr	r2, [r3, #8]
 8000be6:	69bb      	ldr	r3, [r7, #24]
 8000be8:	60da      	str	r2, [r3, #12]
 8000bea:	68bb      	ldr	r3, [r7, #8]
 8000bec:	689b      	ldr	r3, [r3, #8]
 8000bee:	69ba      	ldr	r2, [r7, #24]
 8000bf0:	3204      	adds	r2, #4
 8000bf2:	605a      	str	r2, [r3, #4]
 8000bf4:	69bb      	ldr	r3, [r7, #24]
 8000bf6:	1d1a      	adds	r2, r3, #4
 8000bf8:	68bb      	ldr	r3, [r7, #8]
 8000bfa:	609a      	str	r2, [r3, #8]
 8000bfc:	69bb      	ldr	r3, [r7, #24]
 8000bfe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000c00:	4613      	mov	r3, r2
 8000c02:	009b      	lsls	r3, r3, #2
 8000c04:	4413      	add	r3, r2
 8000c06:	009b      	lsls	r3, r3, #2
 8000c08:	4a27      	ldr	r2, [pc, #156]	@ (8000ca8 <xTaskIncrementTick+0x224>)
 8000c0a:	441a      	add	r2, r3
 8000c0c:	69bb      	ldr	r3, [r7, #24]
 8000c0e:	615a      	str	r2, [r3, #20]
 8000c10:	69bb      	ldr	r3, [r7, #24]
 8000c12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000c14:	4924      	ldr	r1, [pc, #144]	@ (8000ca8 <xTaskIncrementTick+0x224>)
 8000c16:	4613      	mov	r3, r2
 8000c18:	009b      	lsls	r3, r3, #2
 8000c1a:	4413      	add	r3, r2
 8000c1c:	009b      	lsls	r3, r3, #2
 8000c1e:	440b      	add	r3, r1
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	69ba      	ldr	r2, [r7, #24]
 8000c24:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8000c26:	1c59      	adds	r1, r3, #1
 8000c28:	481f      	ldr	r0, [pc, #124]	@ (8000ca8 <xTaskIncrementTick+0x224>)
 8000c2a:	4613      	mov	r3, r2
 8000c2c:	009b      	lsls	r3, r3, #2
 8000c2e:	4413      	add	r3, r2
 8000c30:	009b      	lsls	r3, r3, #2
 8000c32:	4403      	add	r3, r0
 8000c34:	6019      	str	r1, [r3, #0]
                             * task.
                             * The case of equal priority tasks sharing
                             * processing time (which happens when both
                             * preemption and time slicing are on) is
                             * handled below.*/
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8000c36:	69bb      	ldr	r3, [r7, #24]
 8000c38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000c3a:	4b1c      	ldr	r3, [pc, #112]	@ (8000cac <xTaskIncrementTick+0x228>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c40:	429a      	cmp	r2, r3
 8000c42:	f67f af5b 	bls.w	8000afc <xTaskIncrementTick+0x78>
                            {
                                xSwitchRequired = pdTRUE;
 8000c46:	2301      	movs	r3, #1
 8000c48:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000c4a:	e757      	b.n	8000afc <xTaskIncrementTick+0x78>
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > 1U )
 8000c4c:	4b17      	ldr	r3, [pc, #92]	@ (8000cac <xTaskIncrementTick+0x228>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000c52:	4915      	ldr	r1, [pc, #84]	@ (8000ca8 <xTaskIncrementTick+0x224>)
 8000c54:	4613      	mov	r3, r2
 8000c56:	009b      	lsls	r3, r3, #2
 8000c58:	4413      	add	r3, r2
 8000c5a:	009b      	lsls	r3, r3, #2
 8000c5c:	440b      	add	r3, r1
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	2b01      	cmp	r3, #1
 8000c62:	d901      	bls.n	8000c68 <xTaskIncrementTick+0x1e4>
                {
                    xSwitchRequired = pdTRUE;
 8000c64:	2301      	movs	r3, #1
 8000c66:	627b      	str	r3, [r7, #36]	@ 0x24
        #if ( configUSE_PREEMPTION == 1 )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                /* For single core the core ID is always 0. */
                if( xYieldPendings[ 0 ] != pdFALSE )
 8000c68:	4b11      	ldr	r3, [pc, #68]	@ (8000cb0 <xTaskIncrementTick+0x22c>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d007      	beq.n	8000c80 <xTaskIncrementTick+0x1fc>
                {
                    xSwitchRequired = pdTRUE;
 8000c70:	2301      	movs	r3, #1
 8000c72:	627b      	str	r3, [r7, #36]	@ 0x24
 8000c74:	e004      	b.n	8000c80 <xTaskIncrementTick+0x1fc>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        xPendedTicks += 1U;
 8000c76:	4b0f      	ldr	r3, [pc, #60]	@ (8000cb4 <xTaskIncrementTick+0x230>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	3301      	adds	r3, #1
 8000c7c:	4a0d      	ldr	r2, [pc, #52]	@ (8000cb4 <xTaskIncrementTick+0x230>)
 8000c7e:	6013      	str	r3, [r2, #0]
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );

    return xSwitchRequired;
 8000c80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	3728      	adds	r7, #40	@ 0x28
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	20000168 	.word	0x20000168
 8000c90:	20000144 	.word	0x20000144
 8000c94:	200000f8 	.word	0x200000f8
 8000c98:	200000fc 	.word	0x200000fc
 8000c9c:	20000158 	.word	0x20000158
 8000ca0:	20000160 	.word	0x20000160
 8000ca4:	20000148 	.word	0x20000148
 8000ca8:	20000044 	.word	0x20000044
 8000cac:	20000040 	.word	0x20000040
 8000cb0:	20000154 	.word	0x20000154
 8000cb4:	20000150 	.word	0x20000150

08000cb8 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
 8000cb8:	b480      	push	{r7}
 8000cba:	b087      	sub	sp, #28
 8000cbc:	af00      	add	r7, sp, #0
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 8000cbe:	4b27      	ldr	r3, [pc, #156]	@ (8000d5c <vTaskSwitchContext+0xa4>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d003      	beq.n	8000cce <vTaskSwitchContext+0x16>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
 8000cc6:	4b26      	ldr	r3, [pc, #152]	@ (8000d60 <vTaskSwitchContext+0xa8>)
 8000cc8:	2201      	movs	r2, #1
 8000cca:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
 8000ccc:	e041      	b.n	8000d52 <vTaskSwitchContext+0x9a>
            xYieldPendings[ 0 ] = pdFALSE;
 8000cce:	4b24      	ldr	r3, [pc, #144]	@ (8000d60 <vTaskSwitchContext+0xa8>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	601a      	str	r2, [r3, #0]
            taskSELECT_HIGHEST_PRIORITY_TASK();
 8000cd4:	4b23      	ldr	r3, [pc, #140]	@ (8000d64 <vTaskSwitchContext+0xac>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	60fb      	str	r3, [r7, #12]
        __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	fab3 f383 	clz	r3, r3
 8000ce0:	72fb      	strb	r3, [r7, #11]
        return ucReturn;
 8000ce2:	7afb      	ldrb	r3, [r7, #11]
 8000ce4:	f1c3 031f 	rsb	r3, r3, #31
 8000ce8:	617b      	str	r3, [r7, #20]
 8000cea:	491f      	ldr	r1, [pc, #124]	@ (8000d68 <vTaskSwitchContext+0xb0>)
 8000cec:	697a      	ldr	r2, [r7, #20]
 8000cee:	4613      	mov	r3, r2
 8000cf0:	009b      	lsls	r3, r3, #2
 8000cf2:	4413      	add	r3, r2
 8000cf4:	009b      	lsls	r3, r3, #2
 8000cf6:	440b      	add	r3, r1
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d10b      	bne.n	8000d16 <vTaskSwitchContext+0x5e>
    __asm volatile
 8000cfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000d02:	f383 8811 	msr	BASEPRI, r3
 8000d06:	f3bf 8f6f 	isb	sy
 8000d0a:	f3bf 8f4f 	dsb	sy
 8000d0e:	607b      	str	r3, [r7, #4]
}
 8000d10:	bf00      	nop
 8000d12:	bf00      	nop
 8000d14:	e7fd      	b.n	8000d12 <vTaskSwitchContext+0x5a>
 8000d16:	697a      	ldr	r2, [r7, #20]
 8000d18:	4613      	mov	r3, r2
 8000d1a:	009b      	lsls	r3, r3, #2
 8000d1c:	4413      	add	r3, r2
 8000d1e:	009b      	lsls	r3, r3, #2
 8000d20:	4a11      	ldr	r2, [pc, #68]	@ (8000d68 <vTaskSwitchContext+0xb0>)
 8000d22:	4413      	add	r3, r2
 8000d24:	613b      	str	r3, [r7, #16]
 8000d26:	693b      	ldr	r3, [r7, #16]
 8000d28:	685b      	ldr	r3, [r3, #4]
 8000d2a:	685a      	ldr	r2, [r3, #4]
 8000d2c:	693b      	ldr	r3, [r7, #16]
 8000d2e:	605a      	str	r2, [r3, #4]
 8000d30:	693b      	ldr	r3, [r7, #16]
 8000d32:	685a      	ldr	r2, [r3, #4]
 8000d34:	693b      	ldr	r3, [r7, #16]
 8000d36:	3308      	adds	r3, #8
 8000d38:	429a      	cmp	r2, r3
 8000d3a:	d103      	bne.n	8000d44 <vTaskSwitchContext+0x8c>
 8000d3c:	693b      	ldr	r3, [r7, #16]
 8000d3e:	68da      	ldr	r2, [r3, #12]
 8000d40:	693b      	ldr	r3, [r7, #16]
 8000d42:	605a      	str	r2, [r3, #4]
 8000d44:	693b      	ldr	r3, [r7, #16]
 8000d46:	685b      	ldr	r3, [r3, #4]
 8000d48:	68db      	ldr	r3, [r3, #12]
 8000d4a:	4a08      	ldr	r2, [pc, #32]	@ (8000d6c <vTaskSwitchContext+0xb4>)
 8000d4c:	6013      	str	r3, [r2, #0]
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 8000d4e:	4b07      	ldr	r3, [pc, #28]	@ (8000d6c <vTaskSwitchContext+0xb4>)
 8000d50:	681b      	ldr	r3, [r3, #0]
    }
 8000d52:	bf00      	nop
 8000d54:	371c      	adds	r7, #28
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bc80      	pop	{r7}
 8000d5a:	4770      	bx	lr
 8000d5c:	20000168 	.word	0x20000168
 8000d60:	20000154 	.word	0x20000154
 8000d64:	20000148 	.word	0x20000148
 8000d68:	20000044 	.word	0x20000044
 8000d6c:	20000040 	.word	0x20000040

08000d70 <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]

    for( ; configCONTROL_INFINITE_LOOP(); )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8000d78:	f000 f852 	bl	8000e20 <prvCheckTasksWaitingTermination>
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains one more task than the
             * number of idle tasks, which is equal to the configured numbers of cores
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) configNUMBER_OF_CORES )
 8000d7c:	4b06      	ldr	r3, [pc, #24]	@ (8000d98 <prvIdleTask+0x28>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	2b01      	cmp	r3, #1
 8000d82:	d9f9      	bls.n	8000d78 <prvIdleTask+0x8>
            {
                taskYIELD();
 8000d84:	4b05      	ldr	r3, [pc, #20]	@ (8000d9c <prvIdleTask+0x2c>)
 8000d86:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000d8a:	601a      	str	r2, [r3, #0]
 8000d8c:	f3bf 8f4f 	dsb	sy
 8000d90:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8000d94:	e7f0      	b.n	8000d78 <prvIdleTask+0x8>
 8000d96:	bf00      	nop
 8000d98:	20000044 	.word	0x20000044
 8000d9c:	e000ed04 	.word	0xe000ed04

08000da0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8000da6:	2300      	movs	r3, #0
 8000da8:	607b      	str	r3, [r7, #4]
 8000daa:	e00c      	b.n	8000dc6 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8000dac:	687a      	ldr	r2, [r7, #4]
 8000dae:	4613      	mov	r3, r2
 8000db0:	009b      	lsls	r3, r3, #2
 8000db2:	4413      	add	r3, r2
 8000db4:	009b      	lsls	r3, r3, #2
 8000db6:	4a12      	ldr	r2, [pc, #72]	@ (8000e00 <prvInitialiseTaskLists+0x60>)
 8000db8:	4413      	add	r3, r2
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f7ff f9e0 	bl	8000180 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	3301      	adds	r3, #1
 8000dc4:	607b      	str	r3, [r7, #4]
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	2b06      	cmp	r3, #6
 8000dca:	d9ef      	bls.n	8000dac <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8000dcc:	480d      	ldr	r0, [pc, #52]	@ (8000e04 <prvInitialiseTaskLists+0x64>)
 8000dce:	f7ff f9d7 	bl	8000180 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8000dd2:	480d      	ldr	r0, [pc, #52]	@ (8000e08 <prvInitialiseTaskLists+0x68>)
 8000dd4:	f7ff f9d4 	bl	8000180 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8000dd8:	480c      	ldr	r0, [pc, #48]	@ (8000e0c <prvInitialiseTaskLists+0x6c>)
 8000dda:	f7ff f9d1 	bl	8000180 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8000dde:	480c      	ldr	r0, [pc, #48]	@ (8000e10 <prvInitialiseTaskLists+0x70>)
 8000de0:	f7ff f9ce 	bl	8000180 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8000de4:	480b      	ldr	r0, [pc, #44]	@ (8000e14 <prvInitialiseTaskLists+0x74>)
 8000de6:	f7ff f9cb 	bl	8000180 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8000dea:	4b0b      	ldr	r3, [pc, #44]	@ (8000e18 <prvInitialiseTaskLists+0x78>)
 8000dec:	4a05      	ldr	r2, [pc, #20]	@ (8000e04 <prvInitialiseTaskLists+0x64>)
 8000dee:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8000df0:	4b0a      	ldr	r3, [pc, #40]	@ (8000e1c <prvInitialiseTaskLists+0x7c>)
 8000df2:	4a05      	ldr	r2, [pc, #20]	@ (8000e08 <prvInitialiseTaskLists+0x68>)
 8000df4:	601a      	str	r2, [r3, #0]
}
 8000df6:	bf00      	nop
 8000df8:	3708      	adds	r7, #8
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	20000044 	.word	0x20000044
 8000e04:	200000d0 	.word	0x200000d0
 8000e08:	200000e4 	.word	0x200000e4
 8000e0c:	20000100 	.word	0x20000100
 8000e10:	20000114 	.word	0x20000114
 8000e14:	2000012c 	.word	0x2000012c
 8000e18:	200000f8 	.word	0x200000f8
 8000e1c:	200000fc 	.word	0x200000fc

08000e20 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8000e26:	e019      	b.n	8000e5c <prvCheckTasksWaitingTermination+0x3c>
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                taskENTER_CRITICAL();
 8000e28:	f000 fa36 	bl	8001298 <vPortEnterCritical>
                {
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8000e2c:	4b10      	ldr	r3, [pc, #64]	@ (8000e70 <prvCheckTasksWaitingTermination+0x50>)
 8000e2e:	68db      	ldr	r3, [r3, #12]
 8000e30:	68db      	ldr	r3, [r3, #12]
 8000e32:	607b      	str	r3, [r7, #4]
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	3304      	adds	r3, #4
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f7ff fa04 	bl	8000246 <uxListRemove>
                        --uxCurrentNumberOfTasks;
 8000e3e:	4b0d      	ldr	r3, [pc, #52]	@ (8000e74 <prvCheckTasksWaitingTermination+0x54>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	3b01      	subs	r3, #1
 8000e44:	4a0b      	ldr	r2, [pc, #44]	@ (8000e74 <prvCheckTasksWaitingTermination+0x54>)
 8000e46:	6013      	str	r3, [r2, #0]
                        --uxDeletedTasksWaitingCleanUp;
 8000e48:	4b0b      	ldr	r3, [pc, #44]	@ (8000e78 <prvCheckTasksWaitingTermination+0x58>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	3b01      	subs	r3, #1
 8000e4e:	4a0a      	ldr	r2, [pc, #40]	@ (8000e78 <prvCheckTasksWaitingTermination+0x58>)
 8000e50:	6013      	str	r3, [r2, #0]
                    }
                }
                taskEXIT_CRITICAL();
 8000e52:	f000 fa51 	bl	80012f8 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8000e56:	6878      	ldr	r0, [r7, #4]
 8000e58:	f000 f810 	bl	8000e7c <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8000e5c:	4b06      	ldr	r3, [pc, #24]	@ (8000e78 <prvCheckTasksWaitingTermination+0x58>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d1e1      	bne.n	8000e28 <prvCheckTasksWaitingTermination+0x8>
            }
            #endif /* #if( configNUMBER_OF_CORES == 1 ) */
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8000e64:	bf00      	nop
 8000e66:	bf00      	nop
 8000e68:	3708      	adds	r7, #8
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	20000114 	.word	0x20000114
 8000e74:	20000140 	.word	0x20000140
 8000e78:	20000128 	.word	0x20000128

08000e7c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b084      	sub	sp, #16
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
        #elif ( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 )
        {
            /* The task could have been allocated statically or dynamically, so
             * check what was statically allocated before trying to free the
             * memory. */
            if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d108      	bne.n	8000ea0 <prvDeleteTCB+0x24>
            {
                /* Both the stack and TCB were allocated dynamically, so both
                 * must be freed. */
                vPortFreeStack( pxTCB->pxStack );
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e92:	4618      	mov	r0, r3
 8000e94:	f000 fbee 	bl	8001674 <vPortFree>
                vPortFree( pxTCB );
 8000e98:	6878      	ldr	r0, [r7, #4]
 8000e9a:	f000 fbeb 	bl	8001674 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8000e9e:	e019      	b.n	8000ed4 <prvDeleteTCB+0x58>
            else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8000ea6:	2b01      	cmp	r3, #1
 8000ea8:	d103      	bne.n	8000eb2 <prvDeleteTCB+0x36>
                vPortFree( pxTCB );
 8000eaa:	6878      	ldr	r0, [r7, #4]
 8000eac:	f000 fbe2 	bl	8001674 <vPortFree>
    }
 8000eb0:	e010      	b.n	8000ed4 <prvDeleteTCB+0x58>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8000eb8:	2b02      	cmp	r3, #2
 8000eba:	d00b      	beq.n	8000ed4 <prvDeleteTCB+0x58>
    __asm volatile
 8000ebc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000ec0:	f383 8811 	msr	BASEPRI, r3
 8000ec4:	f3bf 8f6f 	isb	sy
 8000ec8:	f3bf 8f4f 	dsb	sy
 8000ecc:	60fb      	str	r3, [r7, #12]
}
 8000ece:	bf00      	nop
 8000ed0:	bf00      	nop
 8000ed2:	e7fd      	b.n	8000ed0 <prvDeleteTCB+0x54>
    }
 8000ed4:	bf00      	nop
 8000ed6:	3710      	adds	r7, #16
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}

08000edc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000ee0:	4b09      	ldr	r3, [pc, #36]	@ (8000f08 <prvResetNextTaskUnblockTime+0x2c>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d104      	bne.n	8000ef4 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8000eea:	4b08      	ldr	r3, [pc, #32]	@ (8000f0c <prvResetNextTaskUnblockTime+0x30>)
 8000eec:	f04f 32ff 	mov.w	r2, #4294967295
 8000ef0:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8000ef2:	e005      	b.n	8000f00 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8000ef4:	4b04      	ldr	r3, [pc, #16]	@ (8000f08 <prvResetNextTaskUnblockTime+0x2c>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	68db      	ldr	r3, [r3, #12]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a03      	ldr	r2, [pc, #12]	@ (8000f0c <prvResetNextTaskUnblockTime+0x30>)
 8000efe:	6013      	str	r3, [r2, #0]
}
 8000f00:	bf00      	nop
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bc80      	pop	{r7}
 8000f06:	4770      	bx	lr
 8000f08:	200000f8 	.word	0x200000f8
 8000f0c:	20000160 	.word	0x20000160

08000f10 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b088      	sub	sp, #32
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
 8000f18:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8000f1a:	4b37      	ldr	r3, [pc, #220]	@ (8000ff8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	61fb      	str	r3, [r7, #28]
    List_t * const pxDelayedList = pxDelayedTaskList;
 8000f20:	4b36      	ldr	r3, [pc, #216]	@ (8000ffc <prvAddCurrentTaskToDelayedList+0xec>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	61bb      	str	r3, [r7, #24]
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 8000f26:	4b36      	ldr	r3, [pc, #216]	@ (8001000 <prvAddCurrentTaskToDelayedList+0xf0>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8000f2c:	4b35      	ldr	r3, [pc, #212]	@ (8001004 <prvAddCurrentTaskToDelayedList+0xf4>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	3304      	adds	r3, #4
 8000f32:	4618      	mov	r0, r3
 8000f34:	f7ff f987 	bl	8000246 <uxListRemove>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d10b      	bne.n	8000f56 <prvAddCurrentTaskToDelayedList+0x46>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8000f3e:	4b31      	ldr	r3, [pc, #196]	@ (8001004 <prvAddCurrentTaskToDelayedList+0xf4>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f44:	2201      	movs	r2, #1
 8000f46:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4a:	43da      	mvns	r2, r3
 8000f4c:	4b2e      	ldr	r3, [pc, #184]	@ (8001008 <prvAddCurrentTaskToDelayedList+0xf8>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4013      	ands	r3, r2
 8000f52:	4a2d      	ldr	r2, [pc, #180]	@ (8001008 <prvAddCurrentTaskToDelayedList+0xf8>)
 8000f54:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f5c:	d124      	bne.n	8000fa8 <prvAddCurrentTaskToDelayedList+0x98>
 8000f5e:	683b      	ldr	r3, [r7, #0]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d021      	beq.n	8000fa8 <prvAddCurrentTaskToDelayedList+0x98>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8000f64:	4b29      	ldr	r3, [pc, #164]	@ (800100c <prvAddCurrentTaskToDelayedList+0xfc>)
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	613b      	str	r3, [r7, #16]
 8000f6a:	4b26      	ldr	r3, [pc, #152]	@ (8001004 <prvAddCurrentTaskToDelayedList+0xf4>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	693a      	ldr	r2, [r7, #16]
 8000f70:	609a      	str	r2, [r3, #8]
 8000f72:	4b24      	ldr	r3, [pc, #144]	@ (8001004 <prvAddCurrentTaskToDelayedList+0xf4>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	693a      	ldr	r2, [r7, #16]
 8000f78:	6892      	ldr	r2, [r2, #8]
 8000f7a:	60da      	str	r2, [r3, #12]
 8000f7c:	4b21      	ldr	r3, [pc, #132]	@ (8001004 <prvAddCurrentTaskToDelayedList+0xf4>)
 8000f7e:	681a      	ldr	r2, [r3, #0]
 8000f80:	693b      	ldr	r3, [r7, #16]
 8000f82:	689b      	ldr	r3, [r3, #8]
 8000f84:	3204      	adds	r2, #4
 8000f86:	605a      	str	r2, [r3, #4]
 8000f88:	4b1e      	ldr	r3, [pc, #120]	@ (8001004 <prvAddCurrentTaskToDelayedList+0xf4>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	1d1a      	adds	r2, r3, #4
 8000f8e:	693b      	ldr	r3, [r7, #16]
 8000f90:	609a      	str	r2, [r3, #8]
 8000f92:	4b1c      	ldr	r3, [pc, #112]	@ (8001004 <prvAddCurrentTaskToDelayedList+0xf4>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4a1d      	ldr	r2, [pc, #116]	@ (800100c <prvAddCurrentTaskToDelayedList+0xfc>)
 8000f98:	615a      	str	r2, [r3, #20]
 8000f9a:	4b1c      	ldr	r3, [pc, #112]	@ (800100c <prvAddCurrentTaskToDelayedList+0xfc>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	3301      	adds	r3, #1
 8000fa0:	4a1a      	ldr	r2, [pc, #104]	@ (800100c <prvAddCurrentTaskToDelayedList+0xfc>)
 8000fa2:	6013      	str	r3, [r2, #0]
 8000fa4:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8000fa6:	e022      	b.n	8000fee <prvAddCurrentTaskToDelayedList+0xde>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8000fa8:	69fa      	ldr	r2, [r7, #28]
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4413      	add	r3, r2
 8000fae:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8000fb0:	4b14      	ldr	r3, [pc, #80]	@ (8001004 <prvAddCurrentTaskToDelayedList+0xf4>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	68fa      	ldr	r2, [r7, #12]
 8000fb6:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8000fb8:	68fa      	ldr	r2, [r7, #12]
 8000fba:	69fb      	ldr	r3, [r7, #28]
 8000fbc:	429a      	cmp	r2, r3
 8000fbe:	d207      	bcs.n	8000fd0 <prvAddCurrentTaskToDelayedList+0xc0>
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8000fc0:	4b10      	ldr	r3, [pc, #64]	@ (8001004 <prvAddCurrentTaskToDelayedList+0xf4>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	3304      	adds	r3, #4
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	6978      	ldr	r0, [r7, #20]
 8000fca:	f7ff f904 	bl	80001d6 <vListInsert>
}
 8000fce:	e00e      	b.n	8000fee <prvAddCurrentTaskToDelayedList+0xde>
                vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8000fd0:	4b0c      	ldr	r3, [pc, #48]	@ (8001004 <prvAddCurrentTaskToDelayedList+0xf4>)
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	3304      	adds	r3, #4
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	69b8      	ldr	r0, [r7, #24]
 8000fda:	f7ff f8fc 	bl	80001d6 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8000fde:	4b0c      	ldr	r3, [pc, #48]	@ (8001010 <prvAddCurrentTaskToDelayedList+0x100>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	68fa      	ldr	r2, [r7, #12]
 8000fe4:	429a      	cmp	r2, r3
 8000fe6:	d202      	bcs.n	8000fee <prvAddCurrentTaskToDelayedList+0xde>
                    xNextTaskUnblockTime = xTimeToWake;
 8000fe8:	4a09      	ldr	r2, [pc, #36]	@ (8001010 <prvAddCurrentTaskToDelayedList+0x100>)
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	6013      	str	r3, [r2, #0]
}
 8000fee:	bf00      	nop
 8000ff0:	3720      	adds	r7, #32
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	20000144 	.word	0x20000144
 8000ffc:	200000f8 	.word	0x200000f8
 8001000:	200000fc 	.word	0x200000fc
 8001004:	20000040 	.word	0x20000040
 8001008:	20000148 	.word	0x20000148
 800100c:	2000012c 	.word	0x2000012c
 8001010:	20000160 	.word	0x20000160

08001014 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8001014:	b480      	push	{r7}
 8001016:	b085      	sub	sp, #20
 8001018:	af00      	add	r7, sp, #0
 800101a:	60f8      	str	r0, [r7, #12]
 800101c:	60b9      	str	r1, [r7, #8]
 800101e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */
    pxTopOfStack--;                                                      /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	3b04      	subs	r3, #4
 8001024:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800102c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	3b04      	subs	r3, #4
 8001032:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	f023 0201 	bic.w	r2, r3, #1
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	3b04      	subs	r3, #4
 8001042:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8001044:	4a08      	ldr	r2, [pc, #32]	@ (8001068 <pxPortInitialiseStack+0x54>)
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 5;                                                   /* R12, R3, R2 and R1. */
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	3b14      	subs	r3, #20
 800104e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters;                        /* R0 */
 8001050:	687a      	ldr	r2, [r7, #4]
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 8;                                                   /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	3b20      	subs	r3, #32
 800105a:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800105c:	68fb      	ldr	r3, [r7, #12]
}
 800105e:	4618      	mov	r0, r3
 8001060:	3714      	adds	r7, #20
 8001062:	46bd      	mov	sp, r7
 8001064:	bc80      	pop	{r7}
 8001066:	4770      	bx	lr
 8001068:	0800106d 	.word	0x0800106d

0800106c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800106c:	b480      	push	{r7}
 800106e:	b085      	sub	sp, #20
 8001070:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 8001072:	2300      	movs	r3, #0
 8001074:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8001076:	4b12      	ldr	r3, [pc, #72]	@ (80010c0 <prvTaskExitError+0x54>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800107e:	d00b      	beq.n	8001098 <prvTaskExitError+0x2c>
    __asm volatile
 8001080:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001084:	f383 8811 	msr	BASEPRI, r3
 8001088:	f3bf 8f6f 	isb	sy
 800108c:	f3bf 8f4f 	dsb	sy
 8001090:	60fb      	str	r3, [r7, #12]
}
 8001092:	bf00      	nop
 8001094:	bf00      	nop
 8001096:	e7fd      	b.n	8001094 <prvTaskExitError+0x28>
    __asm volatile
 8001098:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800109c:	f383 8811 	msr	BASEPRI, r3
 80010a0:	f3bf 8f6f 	isb	sy
 80010a4:	f3bf 8f4f 	dsb	sy
 80010a8:	60bb      	str	r3, [r7, #8]
}
 80010aa:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80010ac:	bf00      	nop
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d0fc      	beq.n	80010ae <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80010b4:	bf00      	nop
 80010b6:	bf00      	nop
 80010b8:	3714      	adds	r7, #20
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bc80      	pop	{r7}
 80010be:	4770      	bx	lr
 80010c0:	20000004 	.word	0x20000004
	...

080010d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80010d0:	4b07      	ldr	r3, [pc, #28]	@ (80010f0 <pxCurrentTCBConst2>)
 80010d2:	6819      	ldr	r1, [r3, #0]
 80010d4:	6808      	ldr	r0, [r1, #0]
 80010d6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80010da:	f380 8809 	msr	PSP, r0
 80010de:	f3bf 8f6f 	isb	sy
 80010e2:	f04f 0000 	mov.w	r0, #0
 80010e6:	f380 8811 	msr	BASEPRI, r0
 80010ea:	f04e 0e0d 	orr.w	lr, lr, #13
 80010ee:	4770      	bx	lr

080010f0 <pxCurrentTCBConst2>:
 80010f0:	20000040 	.word	0x20000040
        "   bx r14                          \n"
        "                                   \n"
        "   .align 4                        \n"
        "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
        );
}
 80010f4:	bf00      	nop
 80010f6:	bf00      	nop

080010f8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
    __asm volatile (
 80010f8:	4806      	ldr	r0, [pc, #24]	@ (8001114 <prvPortStartFirstTask+0x1c>)
 80010fa:	6800      	ldr	r0, [r0, #0]
 80010fc:	6800      	ldr	r0, [r0, #0]
 80010fe:	f380 8808 	msr	MSP, r0
 8001102:	b662      	cpsie	i
 8001104:	b661      	cpsie	f
 8001106:	f3bf 8f4f 	dsb	sy
 800110a:	f3bf 8f6f 	isb	sy
 800110e:	df00      	svc	0
 8001110:	bf00      	nop
 8001112:	0000      	.short	0x0000
 8001114:	e000ed08 	.word	0xe000ed08
        " isb                   \n"
        " svc 0                 \n" /* System call to start first task. */
        " nop                   \n"
        " .ltorg                \n"
        );
}
 8001118:	bf00      	nop
 800111a:	bf00      	nop

0800111c <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b08a      	sub	sp, #40	@ 0x28
 8001120:	af00      	add	r7, sp, #0
     * configCHECK_HANDLER_INSTALLATION to 0 in their FreeRTOSConfig.h. Direct
     * routing, which is validated here when configCHECK_HANDLER_INSTALLATION
     * is 1, should be preferred when possible. */
    #if ( configCHECK_HANDLER_INSTALLATION == 1 )
    {
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 8001122:	4b54      	ldr	r3, [pc, #336]	@ (8001274 <xPortStartScheduler+0x158>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	627b      	str	r3, [r7, #36]	@ 0x24
         * https://www.FreeRTOS.org/FAQHelp.html.
         *
         * Systems with a configurable address for the interrupt vector table
         * can also encounter assertion failures or even system faults here if
         * VTOR is not set correctly to point to the application's vector table. */
        configASSERT( pxVectorTable[ portVECTOR_INDEX_SVC ] == vPortSVCHandler );
 8001128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800112a:	332c      	adds	r3, #44	@ 0x2c
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	4a52      	ldr	r2, [pc, #328]	@ (8001278 <xPortStartScheduler+0x15c>)
 8001130:	4293      	cmp	r3, r2
 8001132:	d00b      	beq.n	800114c <xPortStartScheduler+0x30>
    __asm volatile
 8001134:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001138:	f383 8811 	msr	BASEPRI, r3
 800113c:	f3bf 8f6f 	isb	sy
 8001140:	f3bf 8f4f 	dsb	sy
 8001144:	61fb      	str	r3, [r7, #28]
}
 8001146:	bf00      	nop
 8001148:	bf00      	nop
 800114a:	e7fd      	b.n	8001148 <xPortStartScheduler+0x2c>
        configASSERT( pxVectorTable[ portVECTOR_INDEX_PENDSV ] == xPortPendSVHandler );
 800114c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800114e:	3338      	adds	r3, #56	@ 0x38
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4a4a      	ldr	r2, [pc, #296]	@ (800127c <xPortStartScheduler+0x160>)
 8001154:	4293      	cmp	r3, r2
 8001156:	d00b      	beq.n	8001170 <xPortStartScheduler+0x54>
    __asm volatile
 8001158:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800115c:	f383 8811 	msr	BASEPRI, r3
 8001160:	f3bf 8f6f 	isb	sy
 8001164:	f3bf 8f4f 	dsb	sy
 8001168:	61bb      	str	r3, [r7, #24]
}
 800116a:	bf00      	nop
 800116c:	bf00      	nop
 800116e:	e7fd      	b.n	800116c <xPortStartScheduler+0x50>
    #endif /* configCHECK_HANDLER_INSTALLATION */

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint8_t ucOriginalPriority;
        volatile uint32_t ulImplementedPrioBits = 0;
 8001170:	2300      	movs	r3, #0
 8001172:	60bb      	str	r3, [r7, #8]
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8001174:	4b42      	ldr	r3, [pc, #264]	@ (8001280 <xPortStartScheduler+0x164>)
 8001176:	623b      	str	r3, [r7, #32]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ucOriginalPriority = *pucFirstUserPriorityRegister;
 8001178:	6a3b      	ldr	r3, [r7, #32]
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	b2db      	uxtb	r3, r3
 800117e:	73fb      	strb	r3, [r7, #15]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8001180:	6a3b      	ldr	r3, [r7, #32]
 8001182:	22ff      	movs	r2, #255	@ 0xff
 8001184:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8001186:	6a3b      	ldr	r3, [r7, #32]
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	b2db      	uxtb	r3, r3
 800118c:	71fb      	strb	r3, [r7, #7]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800118e:	79fb      	ldrb	r3, [r7, #7]
 8001190:	b2db      	uxtb	r3, r3
 8001192:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8001196:	b2da      	uxtb	r2, r3
 8001198:	4b3a      	ldr	r3, [pc, #232]	@ (8001284 <xPortStartScheduler+0x168>)
 800119a:	701a      	strb	r2, [r3, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
 800119c:	4b39      	ldr	r3, [pc, #228]	@ (8001284 <xPortStartScheduler+0x168>)
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d10b      	bne.n	80011bc <xPortStartScheduler+0xa0>
    __asm volatile
 80011a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80011a8:	f383 8811 	msr	BASEPRI, r3
 80011ac:	f3bf 8f6f 	isb	sy
 80011b0:	f3bf 8f4f 	dsb	sy
 80011b4:	617b      	str	r3, [r7, #20]
}
 80011b6:	bf00      	nop
 80011b8:	bf00      	nop
 80011ba:	e7fd      	b.n	80011b8 <xPortStartScheduler+0x9c>

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
 80011bc:	79fb      	ldrb	r3, [r7, #7]
 80011be:	b2db      	uxtb	r3, r3
 80011c0:	43db      	mvns	r3, r3
 80011c2:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d013      	beq.n	80011f2 <xPortStartScheduler+0xd6>
    __asm volatile
 80011ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80011ce:	f383 8811 	msr	BASEPRI, r3
 80011d2:	f3bf 8f6f 	isb	sy
 80011d6:	f3bf 8f4f 	dsb	sy
 80011da:	613b      	str	r3, [r7, #16]
}
 80011dc:	bf00      	nop
 80011de:	bf00      	nop
 80011e0:	e7fd      	b.n	80011de <xPortStartScheduler+0xc2>
        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
        {
            ulImplementedPrioBits++;
 80011e2:	68bb      	ldr	r3, [r7, #8]
 80011e4:	3301      	adds	r3, #1
 80011e6:	60bb      	str	r3, [r7, #8]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80011e8:	79fb      	ldrb	r3, [r7, #7]
 80011ea:	b2db      	uxtb	r3, r3
 80011ec:	005b      	lsls	r3, r3, #1
 80011ee:	b2db      	uxtb	r3, r3
 80011f0:	71fb      	strb	r3, [r7, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80011f2:	79fb      	ldrb	r3, [r7, #7]
 80011f4:	b2db      	uxtb	r3, r3
 80011f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80011fa:	2b80      	cmp	r3, #128	@ 0x80
 80011fc:	d0f1      	beq.n	80011e2 <xPortStartScheduler+0xc6>
        }

        if( ulImplementedPrioBits == 8 )
 80011fe:	68bb      	ldr	r3, [r7, #8]
 8001200:	2b08      	cmp	r3, #8
 8001202:	d103      	bne.n	800120c <xPortStartScheduler+0xf0>
             *
             * The following assert ensures that the sub-priority bit in the
             * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
             * confusion. */
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
 8001204:	4b20      	ldr	r3, [pc, #128]	@ (8001288 <xPortStartScheduler+0x16c>)
 8001206:	2200      	movs	r2, #0
 8001208:	601a      	str	r2, [r3, #0]
 800120a:	e004      	b.n	8001216 <xPortStartScheduler+0xfa>
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 800120c:	68bb      	ldr	r3, [r7, #8]
 800120e:	f1c3 0307 	rsb	r3, r3, #7
 8001212:	4a1d      	ldr	r2, [pc, #116]	@ (8001288 <xPortStartScheduler+0x16c>)
 8001214:	6013      	str	r3, [r2, #0]
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8001216:	4b1c      	ldr	r3, [pc, #112]	@ (8001288 <xPortStartScheduler+0x16c>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	021b      	lsls	r3, r3, #8
 800121c:	4a1a      	ldr	r2, [pc, #104]	@ (8001288 <xPortStartScheduler+0x16c>)
 800121e:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8001220:	4b19      	ldr	r3, [pc, #100]	@ (8001288 <xPortStartScheduler+0x16c>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001228:	4a17      	ldr	r2, [pc, #92]	@ (8001288 <xPortStartScheduler+0x16c>)
 800122a:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ucOriginalPriority;
 800122c:	7bfb      	ldrb	r3, [r7, #15]
 800122e:	b2da      	uxtb	r2, r3
 8001230:	6a3b      	ldr	r3, [r7, #32]
 8001232:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts, and make SVCall
     * the highest priority. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8001234:	4b15      	ldr	r3, [pc, #84]	@ (800128c <xPortStartScheduler+0x170>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4a14      	ldr	r2, [pc, #80]	@ (800128c <xPortStartScheduler+0x170>)
 800123a:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 800123e:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8001240:	4b12      	ldr	r3, [pc, #72]	@ (800128c <xPortStartScheduler+0x170>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a11      	ldr	r2, [pc, #68]	@ (800128c <xPortStartScheduler+0x170>)
 8001246:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800124a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR2_REG = 0;
 800124c:	4b10      	ldr	r3, [pc, #64]	@ (8001290 <xPortStartScheduler+0x174>)
 800124e:	2200      	movs	r2, #0
 8001250:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8001252:	f000 f8c3 	bl	80013dc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8001256:	4b0f      	ldr	r3, [pc, #60]	@ (8001294 <xPortStartScheduler+0x178>)
 8001258:	2200      	movs	r2, #0
 800125a:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800125c:	f7ff ff4c 	bl	80010f8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8001260:	f7ff fd2a 	bl	8000cb8 <vTaskSwitchContext>
    prvTaskExitError();
 8001264:	f7ff ff02 	bl	800106c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8001268:	2300      	movs	r3, #0
}
 800126a:	4618      	mov	r0, r3
 800126c:	3728      	adds	r7, #40	@ 0x28
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	e000ed08 	.word	0xe000ed08
 8001278:	080010d1 	.word	0x080010d1
 800127c:	08001351 	.word	0x08001351
 8001280:	e000e400 	.word	0xe000e400
 8001284:	2000016c 	.word	0x2000016c
 8001288:	20000170 	.word	0x20000170
 800128c:	e000ed20 	.word	0xe000ed20
 8001290:	e000ed1c 	.word	0xe000ed1c
 8001294:	20000004 	.word	0x20000004

08001298 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
    __asm volatile
 800129e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80012a2:	f383 8811 	msr	BASEPRI, r3
 80012a6:	f3bf 8f6f 	isb	sy
 80012aa:	f3bf 8f4f 	dsb	sy
 80012ae:	607b      	str	r3, [r7, #4]
}
 80012b0:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80012b2:	4b0f      	ldr	r3, [pc, #60]	@ (80012f0 <vPortEnterCritical+0x58>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	3301      	adds	r3, #1
 80012b8:	4a0d      	ldr	r2, [pc, #52]	@ (80012f0 <vPortEnterCritical+0x58>)
 80012ba:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80012bc:	4b0c      	ldr	r3, [pc, #48]	@ (80012f0 <vPortEnterCritical+0x58>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	2b01      	cmp	r3, #1
 80012c2:	d110      	bne.n	80012e6 <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80012c4:	4b0b      	ldr	r3, [pc, #44]	@ (80012f4 <vPortEnterCritical+0x5c>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d00b      	beq.n	80012e6 <vPortEnterCritical+0x4e>
    __asm volatile
 80012ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80012d2:	f383 8811 	msr	BASEPRI, r3
 80012d6:	f3bf 8f6f 	isb	sy
 80012da:	f3bf 8f4f 	dsb	sy
 80012de:	603b      	str	r3, [r7, #0]
}
 80012e0:	bf00      	nop
 80012e2:	bf00      	nop
 80012e4:	e7fd      	b.n	80012e2 <vPortEnterCritical+0x4a>
    }
}
 80012e6:	bf00      	nop
 80012e8:	370c      	adds	r7, #12
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bc80      	pop	{r7}
 80012ee:	4770      	bx	lr
 80012f0:	20000004 	.word	0x20000004
 80012f4:	e000ed04 	.word	0xe000ed04

080012f8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80012fe:	4b12      	ldr	r3, [pc, #72]	@ (8001348 <vPortExitCritical+0x50>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d10b      	bne.n	800131e <vPortExitCritical+0x26>
    __asm volatile
 8001306:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800130a:	f383 8811 	msr	BASEPRI, r3
 800130e:	f3bf 8f6f 	isb	sy
 8001312:	f3bf 8f4f 	dsb	sy
 8001316:	607b      	str	r3, [r7, #4]
}
 8001318:	bf00      	nop
 800131a:	bf00      	nop
 800131c:	e7fd      	b.n	800131a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800131e:	4b0a      	ldr	r3, [pc, #40]	@ (8001348 <vPortExitCritical+0x50>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	3b01      	subs	r3, #1
 8001324:	4a08      	ldr	r2, [pc, #32]	@ (8001348 <vPortExitCritical+0x50>)
 8001326:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8001328:	4b07      	ldr	r3, [pc, #28]	@ (8001348 <vPortExitCritical+0x50>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d105      	bne.n	800133c <vPortExitCritical+0x44>
 8001330:	2300      	movs	r3, #0
 8001332:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	f383 8811 	msr	BASEPRI, r3
    (
        "   msr basepri, %0 " ::"r" ( ulNewMaskValue ) : "memory"
    );
}
 800133a:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800133c:	bf00      	nop
 800133e:	370c      	adds	r7, #12
 8001340:	46bd      	mov	sp, r7
 8001342:	bc80      	pop	{r7}
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	20000004 	.word	0x20000004
 800134c:	00000000 	.word	0x00000000

08001350 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8001350:	f3ef 8009 	mrs	r0, PSP
 8001354:	f3bf 8f6f 	isb	sy
 8001358:	4b0d      	ldr	r3, [pc, #52]	@ (8001390 <pxCurrentTCBConst>)
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001360:	6010      	str	r0, [r2, #0]
 8001362:	e92d 4008 	stmdb	sp!, {r3, lr}
 8001366:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800136a:	f380 8811 	msr	BASEPRI, r0
 800136e:	f7ff fca3 	bl	8000cb8 <vTaskSwitchContext>
 8001372:	f04f 0000 	mov.w	r0, #0
 8001376:	f380 8811 	msr	BASEPRI, r0
 800137a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800137e:	6819      	ldr	r1, [r3, #0]
 8001380:	6808      	ldr	r0, [r1, #0]
 8001382:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8001386:	f380 8809 	msr	PSP, r0
 800138a:	f3bf 8f6f 	isb	sy
 800138e:	4770      	bx	lr

08001390 <pxCurrentTCBConst>:
 8001390:	20000040 	.word	0x20000040
        "                                       \n"
        "   .align 4                            \n"
        "pxCurrentTCBConst: .word pxCurrentTCB  \n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8001394:	bf00      	nop
 8001396:	bf00      	nop

08001398 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
    __asm volatile
 800139e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80013a2:	f383 8811 	msr	BASEPRI, r3
 80013a6:	f3bf 8f6f 	isb	sy
 80013aa:	f3bf 8f4f 	dsb	sy
 80013ae:	607b      	str	r3, [r7, #4]
}
 80013b0:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80013b2:	f7ff fb67 	bl	8000a84 <xTaskIncrementTick>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d003      	beq.n	80013c4 <SysTick_Handler+0x2c>
        {
            traceISR_EXIT_TO_SCHEDULER();

            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80013bc:	4b06      	ldr	r3, [pc, #24]	@ (80013d8 <SysTick_Handler+0x40>)
 80013be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80013c2:	601a      	str	r2, [r3, #0]
 80013c4:	2300      	movs	r3, #0
 80013c6:	603b      	str	r3, [r7, #0]
    __asm volatile
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	f383 8811 	msr	BASEPRI, r3
}
 80013ce:	bf00      	nop
        {
            traceISR_EXIT();
        }
    }
    portENABLE_INTERRUPTS();
}
 80013d0:	bf00      	nop
 80013d2:	3708      	adds	r7, #8
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	e000ed04 	.word	0xe000ed04

080013dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80013e0:	4b08      	ldr	r3, [pc, #32]	@ (8001404 <vPortSetupTimerInterrupt+0x28>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80013e6:	4b08      	ldr	r3, [pc, #32]	@ (8001408 <vPortSetupTimerInterrupt+0x2c>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80013ec:	4b07      	ldr	r3, [pc, #28]	@ (800140c <vPortSetupTimerInterrupt+0x30>)
 80013ee:	f641 723f 	movw	r2, #7999	@ 0x1f3f
 80013f2:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80013f4:	4b03      	ldr	r3, [pc, #12]	@ (8001404 <vPortSetupTimerInterrupt+0x28>)
 80013f6:	2207      	movs	r2, #7
 80013f8:	601a      	str	r2, [r3, #0]
}
 80013fa:	bf00      	nop
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bc80      	pop	{r7}
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	e000e010 	.word	0xe000e010
 8001408:	e000e018 	.word	0xe000e018
 800140c:	e000e014 	.word	0xe000e014

08001410 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = ( size_t ) 0U;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b08e      	sub	sp, #56	@ 0x38
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8001418:	2300      	movs	r3, #0
 800141a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    size_t xAdditionalRequiredSize;

    if( xWantedSize > 0 )
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d022      	beq.n	8001468 <pvPortMalloc+0x58>
    {
        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( heapADD_WILL_OVERFLOW( xWantedSize, xHeapStructSize ) == 0 )
 8001422:	2308      	movs	r3, #8
 8001424:	43db      	mvns	r3, r3
 8001426:	687a      	ldr	r2, [r7, #4]
 8001428:	429a      	cmp	r2, r3
 800142a:	d81b      	bhi.n	8001464 <pvPortMalloc+0x54>
        {
            xWantedSize += xHeapStructSize;
 800142c:	2208      	movs	r2, #8
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	4413      	add	r3, r2
 8001432:	607b      	str	r3, [r7, #4]

            /* Ensure that blocks are always aligned to the required number
             * of bytes. */
            if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	f003 0307 	and.w	r3, r3, #7
 800143a:	2b00      	cmp	r3, #0
 800143c:	d014      	beq.n	8001468 <pvPortMalloc+0x58>
            {
                /* Byte alignment required. */
                xAdditionalRequiredSize = portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	f003 0307 	and.w	r3, r3, #7
 8001444:	f1c3 0308 	rsb	r3, r3, #8
 8001448:	62bb      	str	r3, [r7, #40]	@ 0x28

                if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 800144a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800144c:	43db      	mvns	r3, r3
 800144e:	687a      	ldr	r2, [r7, #4]
 8001450:	429a      	cmp	r2, r3
 8001452:	d804      	bhi.n	800145e <pvPortMalloc+0x4e>
                {
                    xWantedSize += xAdditionalRequiredSize;
 8001454:	687a      	ldr	r2, [r7, #4]
 8001456:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001458:	4413      	add	r3, r2
 800145a:	607b      	str	r3, [r7, #4]
 800145c:	e004      	b.n	8001468 <pvPortMalloc+0x58>
                }
                else
                {
                    xWantedSize = 0;
 800145e:	2300      	movs	r3, #0
 8001460:	607b      	str	r3, [r7, #4]
 8001462:	e001      	b.n	8001468 <pvPortMalloc+0x58>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            xWantedSize = 0;
 8001464:	2300      	movs	r3, #0
 8001466:	607b      	str	r3, [r7, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    vTaskSuspendAll();
 8001468:	f7ff f9f6 	bl	8000858 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800146c:	4b7a      	ldr	r3, [pc, #488]	@ (8001658 <pvPortMalloc+0x248>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d101      	bne.n	8001478 <pvPortMalloc+0x68>
        {
            prvHeapInit();
 8001474:	f000 f978 	bl	8001768 <prvHeapInit>

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2b00      	cmp	r3, #0
 800147c:	f2c0 80d3 	blt.w	8001626 <pvPortMalloc+0x216>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2b00      	cmp	r3, #0
 8001484:	f000 80cf 	beq.w	8001626 <pvPortMalloc+0x216>
 8001488:	4b74      	ldr	r3, [pc, #464]	@ (800165c <pvPortMalloc+0x24c>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	687a      	ldr	r2, [r7, #4]
 800148e:	429a      	cmp	r2, r3
 8001490:	f200 80c9 	bhi.w	8001626 <pvPortMalloc+0x216>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8001494:	4b72      	ldr	r3, [pc, #456]	@ (8001660 <pvPortMalloc+0x250>)
 8001496:	633b      	str	r3, [r7, #48]	@ 0x30
                pxBlock = heapPROTECT_BLOCK_POINTER( xStart.pxNextFreeBlock );
 8001498:	4b71      	ldr	r3, [pc, #452]	@ (8001660 <pvPortMalloc+0x250>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	637b      	str	r3, [r7, #52]	@ 0x34
                heapVALIDATE_BLOCK_POINTER( pxBlock );
 800149e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80014a0:	4a70      	ldr	r2, [pc, #448]	@ (8001664 <pvPortMalloc+0x254>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d305      	bcc.n	80014b2 <pvPortMalloc+0xa2>
 80014a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80014a8:	4a6f      	ldr	r2, [pc, #444]	@ (8001668 <pvPortMalloc+0x258>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d801      	bhi.n	80014b2 <pvPortMalloc+0xa2>
 80014ae:	2301      	movs	r3, #1
 80014b0:	e000      	b.n	80014b4 <pvPortMalloc+0xa4>
 80014b2:	2300      	movs	r3, #0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d129      	bne.n	800150c <pvPortMalloc+0xfc>
    __asm volatile
 80014b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80014bc:	f383 8811 	msr	BASEPRI, r3
 80014c0:	f3bf 8f6f 	isb	sy
 80014c4:	f3bf 8f4f 	dsb	sy
 80014c8:	623b      	str	r3, [r7, #32]
}
 80014ca:	bf00      	nop
 80014cc:	bf00      	nop
 80014ce:	e7fd      	b.n	80014cc <pvPortMalloc+0xbc>

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
                {
                    pxPreviousBlock = pxBlock;
 80014d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80014d2:	633b      	str	r3, [r7, #48]	@ 0x30
                    pxBlock = heapPROTECT_BLOCK_POINTER( pxBlock->pxNextFreeBlock );
 80014d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	637b      	str	r3, [r7, #52]	@ 0x34
                    heapVALIDATE_BLOCK_POINTER( pxBlock );
 80014da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80014dc:	4a61      	ldr	r2, [pc, #388]	@ (8001664 <pvPortMalloc+0x254>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d305      	bcc.n	80014ee <pvPortMalloc+0xde>
 80014e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80014e4:	4a60      	ldr	r2, [pc, #384]	@ (8001668 <pvPortMalloc+0x258>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d801      	bhi.n	80014ee <pvPortMalloc+0xde>
 80014ea:	2301      	movs	r3, #1
 80014ec:	e000      	b.n	80014f0 <pvPortMalloc+0xe0>
 80014ee:	2300      	movs	r3, #0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d10b      	bne.n	800150c <pvPortMalloc+0xfc>
    __asm volatile
 80014f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80014f8:	f383 8811 	msr	BASEPRI, r3
 80014fc:	f3bf 8f6f 	isb	sy
 8001500:	f3bf 8f4f 	dsb	sy
 8001504:	61fb      	str	r3, [r7, #28]
}
 8001506:	bf00      	nop
 8001508:	bf00      	nop
 800150a:	e7fd      	b.n	8001508 <pvPortMalloc+0xf8>
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 800150c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	687a      	ldr	r2, [r7, #4]
 8001512:	429a      	cmp	r2, r3
 8001514:	d903      	bls.n	800151e <pvPortMalloc+0x10e>
 8001516:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d1d8      	bne.n	80014d0 <pvPortMalloc+0xc0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800151e:	4b4e      	ldr	r3, [pc, #312]	@ (8001658 <pvPortMalloc+0x248>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001524:	429a      	cmp	r2, r3
 8001526:	d07e      	beq.n	8001626 <pvPortMalloc+0x216>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxPreviousBlock->pxNextFreeBlock ) ) + xHeapStructSize );
 8001528:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	2208      	movs	r2, #8
 800152e:	4413      	add	r3, r2
 8001530:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    heapVALIDATE_BLOCK_POINTER( pvReturn );
 8001532:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001534:	4a4b      	ldr	r2, [pc, #300]	@ (8001664 <pvPortMalloc+0x254>)
 8001536:	4293      	cmp	r3, r2
 8001538:	d305      	bcc.n	8001546 <pvPortMalloc+0x136>
 800153a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800153c:	4a4a      	ldr	r2, [pc, #296]	@ (8001668 <pvPortMalloc+0x258>)
 800153e:	4293      	cmp	r3, r2
 8001540:	d801      	bhi.n	8001546 <pvPortMalloc+0x136>
 8001542:	2301      	movs	r3, #1
 8001544:	e000      	b.n	8001548 <pvPortMalloc+0x138>
 8001546:	2300      	movs	r3, #0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d10b      	bne.n	8001564 <pvPortMalloc+0x154>
    __asm volatile
 800154c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001550:	f383 8811 	msr	BASEPRI, r3
 8001554:	f3bf 8f6f 	isb	sy
 8001558:	f3bf 8f4f 	dsb	sy
 800155c:	61bb      	str	r3, [r7, #24]
}
 800155e:	bf00      	nop
 8001560:	bf00      	nop
 8001562:	e7fd      	b.n	8001560 <pvPortMalloc+0x150>

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8001564:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800156a:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    configASSERT( heapSUBTRACT_WILL_UNDERFLOW( pxBlock->xBlockSize, xWantedSize ) == 0 );
 800156c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	687a      	ldr	r2, [r7, #4]
 8001572:	429a      	cmp	r2, r3
 8001574:	d90b      	bls.n	800158e <pvPortMalloc+0x17e>
    __asm volatile
 8001576:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800157a:	f383 8811 	msr	BASEPRI, r3
 800157e:	f3bf 8f6f 	isb	sy
 8001582:	f3bf 8f4f 	dsb	sy
 8001586:	617b      	str	r3, [r7, #20]
}
 8001588:	bf00      	nop
 800158a:	bf00      	nop
 800158c:	e7fd      	b.n	800158a <pvPortMalloc+0x17a>

                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800158e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001590:	685a      	ldr	r2, [r3, #4]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	1ad2      	subs	r2, r2, r3
 8001596:	2308      	movs	r3, #8
 8001598:	005b      	lsls	r3, r3, #1
 800159a:	429a      	cmp	r2, r3
 800159c:	d924      	bls.n	80015e8 <pvPortMalloc+0x1d8>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800159e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	4413      	add	r3, r2
 80015a4:	627b      	str	r3, [r7, #36]	@ 0x24
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80015a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015a8:	f003 0307 	and.w	r3, r3, #7
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d00b      	beq.n	80015c8 <pvPortMalloc+0x1b8>
    __asm volatile
 80015b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80015b4:	f383 8811 	msr	BASEPRI, r3
 80015b8:	f3bf 8f6f 	isb	sy
 80015bc:	f3bf 8f4f 	dsb	sy
 80015c0:	613b      	str	r3, [r7, #16]
}
 80015c2:	bf00      	nop
 80015c4:	bf00      	nop
 80015c6:	e7fd      	b.n	80015c4 <pvPortMalloc+0x1b4>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80015c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80015ca:	685a      	ldr	r2, [r3, #4]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	1ad2      	subs	r2, r2, r3
 80015d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015d2:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80015d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80015d6:	687a      	ldr	r2, [r7, #4]
 80015d8:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        pxNewBlockLink->pxNextFreeBlock = pxPreviousBlock->pxNextFreeBlock;
 80015da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015e0:	601a      	str	r2, [r3, #0]
                        pxPreviousBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxNewBlockLink );
 80015e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80015e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80015e6:	601a      	str	r2, [r3, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80015e8:	4b1c      	ldr	r3, [pc, #112]	@ (800165c <pvPortMalloc+0x24c>)
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	4a1a      	ldr	r2, [pc, #104]	@ (800165c <pvPortMalloc+0x24c>)
 80015f4:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80015f6:	4b19      	ldr	r3, [pc, #100]	@ (800165c <pvPortMalloc+0x24c>)
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	4b1c      	ldr	r3, [pc, #112]	@ (800166c <pvPortMalloc+0x25c>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	429a      	cmp	r2, r3
 8001600:	d203      	bcs.n	800160a <pvPortMalloc+0x1fa>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8001602:	4b16      	ldr	r3, [pc, #88]	@ (800165c <pvPortMalloc+0x24c>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4a19      	ldr	r2, [pc, #100]	@ (800166c <pvPortMalloc+0x25c>)
 8001608:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 800160a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001612:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001614:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8001616:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001618:	2200      	movs	r2, #0
 800161a:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800161c:	4b14      	ldr	r3, [pc, #80]	@ (8001670 <pvPortMalloc+0x260>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	3301      	adds	r3, #1
 8001622:	4a13      	ldr	r2, [pc, #76]	@ (8001670 <pvPortMalloc+0x260>)
 8001624:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8001626:	f7ff f925 	bl	8000874 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800162a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800162c:	f003 0307 	and.w	r3, r3, #7
 8001630:	2b00      	cmp	r3, #0
 8001632:	d00b      	beq.n	800164c <pvPortMalloc+0x23c>
    __asm volatile
 8001634:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001638:	f383 8811 	msr	BASEPRI, r3
 800163c:	f3bf 8f6f 	isb	sy
 8001640:	f3bf 8f4f 	dsb	sy
 8001644:	60fb      	str	r3, [r7, #12]
}
 8001646:	bf00      	nop
 8001648:	bf00      	nop
 800164a:	e7fd      	b.n	8001648 <pvPortMalloc+0x238>
    return pvReturn;
 800164c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800164e:	4618      	mov	r0, r3
 8001650:	3738      	adds	r7, #56	@ 0x38
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	2000217c 	.word	0x2000217c
 800165c:	20002180 	.word	0x20002180
 8001660:	20002174 	.word	0x20002174
 8001664:	20000174 	.word	0x20000174
 8001668:	20002173 	.word	0x20002173
 800166c:	20002184 	.word	0x20002184
 8001670:	20002188 	.word	0x20002188

08001674 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b088      	sub	sp, #32
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	61fb      	str	r3, [r7, #28]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d064      	beq.n	8001750 <vPortFree+0xdc>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8001686:	2308      	movs	r3, #8
 8001688:	425b      	negs	r3, r3
 800168a:	69fa      	ldr	r2, [r7, #28]
 800168c:	4413      	add	r3, r2
 800168e:	61fb      	str	r3, [r7, #28]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8001690:	69fb      	ldr	r3, [r7, #28]
 8001692:	61bb      	str	r3, [r7, #24]

        heapVALIDATE_BLOCK_POINTER( pxLink );
 8001694:	69bb      	ldr	r3, [r7, #24]
 8001696:	4a30      	ldr	r2, [pc, #192]	@ (8001758 <vPortFree+0xe4>)
 8001698:	4293      	cmp	r3, r2
 800169a:	d305      	bcc.n	80016a8 <vPortFree+0x34>
 800169c:	69bb      	ldr	r3, [r7, #24]
 800169e:	4a2f      	ldr	r2, [pc, #188]	@ (800175c <vPortFree+0xe8>)
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d801      	bhi.n	80016a8 <vPortFree+0x34>
 80016a4:	2301      	movs	r3, #1
 80016a6:	e000      	b.n	80016aa <vPortFree+0x36>
 80016a8:	2300      	movs	r3, #0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d10b      	bne.n	80016c6 <vPortFree+0x52>
    __asm volatile
 80016ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80016b2:	f383 8811 	msr	BASEPRI, r3
 80016b6:	f3bf 8f6f 	isb	sy
 80016ba:	f3bf 8f4f 	dsb	sy
 80016be:	617b      	str	r3, [r7, #20]
}
 80016c0:	bf00      	nop
 80016c2:	bf00      	nop
 80016c4:	e7fd      	b.n	80016c2 <vPortFree+0x4e>
        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 80016c6:	69bb      	ldr	r3, [r7, #24]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	db0b      	blt.n	80016e6 <vPortFree+0x72>
    __asm volatile
 80016ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80016d2:	f383 8811 	msr	BASEPRI, r3
 80016d6:	f3bf 8f6f 	isb	sy
 80016da:	f3bf 8f4f 	dsb	sy
 80016de:	613b      	str	r3, [r7, #16]
}
 80016e0:	bf00      	nop
 80016e2:	bf00      	nop
 80016e4:	e7fd      	b.n	80016e2 <vPortFree+0x6e>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80016e6:	69bb      	ldr	r3, [r7, #24]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d00b      	beq.n	8001706 <vPortFree+0x92>
    __asm volatile
 80016ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80016f2:	f383 8811 	msr	BASEPRI, r3
 80016f6:	f3bf 8f6f 	isb	sy
 80016fa:	f3bf 8f4f 	dsb	sy
 80016fe:	60fb      	str	r3, [r7, #12]
}
 8001700:	bf00      	nop
 8001702:	bf00      	nop
 8001704:	e7fd      	b.n	8001702 <vPortFree+0x8e>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8001706:	69bb      	ldr	r3, [r7, #24]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	0fdb      	lsrs	r3, r3, #31
 800170c:	f003 0301 	and.w	r3, r3, #1
 8001710:	b2db      	uxtb	r3, r3
 8001712:	2b00      	cmp	r3, #0
 8001714:	d01c      	beq.n	8001750 <vPortFree+0xdc>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8001716:	69bb      	ldr	r3, [r7, #24]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d118      	bne.n	8001750 <vPortFree+0xdc>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 800171e:	69bb      	ldr	r3, [r7, #24]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001726:	69bb      	ldr	r3, [r7, #24]
 8001728:	605a      	str	r2, [r3, #4]
                        ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                    }
                }
                #endif

                vTaskSuspendAll();
 800172a:	f7ff f895 	bl	8000858 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 800172e:	69bb      	ldr	r3, [r7, #24]
 8001730:	685a      	ldr	r2, [r3, #4]
 8001732:	4b0b      	ldr	r3, [pc, #44]	@ (8001760 <vPortFree+0xec>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4413      	add	r3, r2
 8001738:	4a09      	ldr	r2, [pc, #36]	@ (8001760 <vPortFree+0xec>)
 800173a:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800173c:	69b8      	ldr	r0, [r7, #24]
 800173e:	f000 f86d 	bl	800181c <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8001742:	4b08      	ldr	r3, [pc, #32]	@ (8001764 <vPortFree+0xf0>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	3301      	adds	r3, #1
 8001748:	4a06      	ldr	r2, [pc, #24]	@ (8001764 <vPortFree+0xf0>)
 800174a:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 800174c:	f7ff f892 	bl	8000874 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8001750:	bf00      	nop
 8001752:	3720      	adds	r7, #32
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	20000174 	.word	0x20000174
 800175c:	20002173 	.word	0x20002173
 8001760:	20002180 	.word	0x20002180
 8001764:	2000218c 	.word	0x2000218c

08001768 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8001768:	b480      	push	{r7}
 800176a:	b085      	sub	sp, #20
 800176c:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    portPOINTER_SIZE_TYPE uxStartAddress, uxEndAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800176e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001772:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxStartAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8001774:	4b24      	ldr	r3, [pc, #144]	@ (8001808 <prvHeapInit+0xa0>)
 8001776:	60fb      	str	r3, [r7, #12]

    if( ( uxStartAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	f003 0307 	and.w	r3, r3, #7
 800177e:	2b00      	cmp	r3, #0
 8001780:	d00c      	beq.n	800179c <prvHeapInit+0x34>
    {
        uxStartAddress += ( portBYTE_ALIGNMENT - 1 );
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	3307      	adds	r3, #7
 8001786:	60fb      	str	r3, [r7, #12]
        uxStartAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	f023 0307 	bic.w	r3, r3, #7
 800178e:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= ( size_t ) ( uxStartAddress - ( portPOINTER_SIZE_TYPE ) ucHeap );
 8001790:	68ba      	ldr	r2, [r7, #8]
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	4a1c      	ldr	r2, [pc, #112]	@ (8001808 <prvHeapInit+0xa0>)
 8001798:	4413      	add	r3, r2
 800179a:	60bb      	str	r3, [r7, #8]
    }
    #endif

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) heapPROTECT_BLOCK_POINTER( uxStartAddress );
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	4a1b      	ldr	r2, [pc, #108]	@ (800180c <prvHeapInit+0xa4>)
 80017a0:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80017a2:	4b1a      	ldr	r3, [pc, #104]	@ (800180c <prvHeapInit+0xa4>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxEndAddress = uxStartAddress + ( portPOINTER_SIZE_TYPE ) xTotalHeapSize;
 80017a8:	68fa      	ldr	r2, [r7, #12]
 80017aa:	68bb      	ldr	r3, [r7, #8]
 80017ac:	4413      	add	r3, r2
 80017ae:	607b      	str	r3, [r7, #4]
    uxEndAddress -= ( portPOINTER_SIZE_TYPE ) xHeapStructSize;
 80017b0:	2208      	movs	r2, #8
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	1a9b      	subs	r3, r3, r2
 80017b6:	607b      	str	r3, [r7, #4]
    uxEndAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	f023 0307 	bic.w	r3, r3, #7
 80017be:	607b      	str	r3, [r7, #4]
    pxEnd = ( BlockLink_t * ) uxEndAddress;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	4a13      	ldr	r2, [pc, #76]	@ (8001810 <prvHeapInit+0xa8>)
 80017c4:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80017c6:	4b12      	ldr	r3, [pc, #72]	@ (8001810 <prvHeapInit+0xa8>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	2200      	movs	r2, #0
 80017cc:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );
 80017ce:	4b10      	ldr	r3, [pc, #64]	@ (8001810 <prvHeapInit+0xa8>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	2200      	movs	r2, #0
 80017d4:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) uxStartAddress;
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxEndAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	687a      	ldr	r2, [r7, #4]
 80017de:	1ad2      	subs	r2, r2, r3
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 80017e4:	4b0a      	ldr	r3, [pc, #40]	@ (8001810 <prvHeapInit+0xa8>)
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	4a08      	ldr	r2, [pc, #32]	@ (8001814 <prvHeapInit+0xac>)
 80017f2:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	4a07      	ldr	r2, [pc, #28]	@ (8001818 <prvHeapInit+0xb0>)
 80017fa:	6013      	str	r3, [r2, #0]
}
 80017fc:	bf00      	nop
 80017fe:	3714      	adds	r7, #20
 8001800:	46bd      	mov	sp, r7
 8001802:	bc80      	pop	{r7}
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop
 8001808:	20000174 	.word	0x20000174
 800180c:	20002174 	.word	0x20002174
 8001810:	2000217c 	.word	0x2000217c
 8001814:	20002184 	.word	0x20002184
 8001818:	20002180 	.word	0x20002180

0800181c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 800181c:	b480      	push	{r7}
 800181e:	b087      	sub	sp, #28
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) < pxBlockToInsert; pxIterator = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8001824:	4b36      	ldr	r3, [pc, #216]	@ (8001900 <prvInsertBlockIntoFreeList+0xe4>)
 8001826:	617b      	str	r3, [r7, #20]
 8001828:	e002      	b.n	8001830 <prvInsertBlockIntoFreeList+0x14>
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	617b      	str	r3, [r7, #20]
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	687a      	ldr	r2, [r7, #4]
 8001836:	429a      	cmp	r2, r3
 8001838:	d8f7      	bhi.n	800182a <prvInsertBlockIntoFreeList+0xe>
    {
        /* Nothing to do here, just iterate to the right position. */
    }

    if( pxIterator != &xStart )
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	4a30      	ldr	r2, [pc, #192]	@ (8001900 <prvInsertBlockIntoFreeList+0xe4>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d018      	beq.n	8001874 <prvInsertBlockIntoFreeList+0x58>
    {
        heapVALIDATE_BLOCK_POINTER( pxIterator );
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	4a2f      	ldr	r2, [pc, #188]	@ (8001904 <prvInsertBlockIntoFreeList+0xe8>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d305      	bcc.n	8001856 <prvInsertBlockIntoFreeList+0x3a>
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	4a2e      	ldr	r2, [pc, #184]	@ (8001908 <prvInsertBlockIntoFreeList+0xec>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d801      	bhi.n	8001856 <prvInsertBlockIntoFreeList+0x3a>
 8001852:	2301      	movs	r3, #1
 8001854:	e000      	b.n	8001858 <prvInsertBlockIntoFreeList+0x3c>
 8001856:	2300      	movs	r3, #0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d10b      	bne.n	8001874 <prvInsertBlockIntoFreeList+0x58>
    __asm volatile
 800185c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001860:	f383 8811 	msr	BASEPRI, r3
 8001864:	f3bf 8f6f 	isb	sy
 8001868:	f3bf 8f4f 	dsb	sy
 800186c:	60fb      	str	r3, [r7, #12]
}
 800186e:	bf00      	nop
 8001870:	bf00      	nop
 8001872:	e7fd      	b.n	8001870 <prvInsertBlockIntoFreeList+0x54>
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	613b      	str	r3, [r7, #16]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	693a      	ldr	r2, [r7, #16]
 800187e:	4413      	add	r3, r2
 8001880:	687a      	ldr	r2, [r7, #4]
 8001882:	429a      	cmp	r2, r3
 8001884:	d108      	bne.n	8001898 <prvInsertBlockIntoFreeList+0x7c>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	685a      	ldr	r2, [r3, #4]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	441a      	add	r2, r3
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	613b      	str	r3, [r7, #16]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	693a      	ldr	r2, [r7, #16]
 80018a2:	441a      	add	r2, r3
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d118      	bne.n	80018de <prvInsertBlockIntoFreeList+0xc2>
    {
        if( heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) != pxEnd )
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	681a      	ldr	r2, [r3, #0]
 80018b0:	4b16      	ldr	r3, [pc, #88]	@ (800190c <prvInsertBlockIntoFreeList+0xf0>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d00d      	beq.n	80018d4 <prvInsertBlockIntoFreeList+0xb8>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->xBlockSize;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	685a      	ldr	r2, [r3, #4]
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	441a      	add	r2, r3
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->pxNextFreeBlock;
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	601a      	str	r2, [r3, #0]
 80018d2:	e008      	b.n	80018e6 <prvInsertBlockIntoFreeList+0xca>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 80018d4:	4b0d      	ldr	r3, [pc, #52]	@ (800190c <prvInsertBlockIntoFreeList+0xf0>)
 80018d6:	681a      	ldr	r2, [r3, #0]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	601a      	str	r2, [r3, #0]
 80018dc:	e003      	b.n	80018e6 <prvInsertBlockIntoFreeList+0xca>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80018e6:	697a      	ldr	r2, [r7, #20]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	429a      	cmp	r2, r3
 80018ec:	d002      	beq.n	80018f4 <prvInsertBlockIntoFreeList+0xd8>
    {
        pxIterator->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxBlockToInsert );
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	687a      	ldr	r2, [r7, #4]
 80018f2:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80018f4:	bf00      	nop
 80018f6:	371c      	adds	r7, #28
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bc80      	pop	{r7}
 80018fc:	4770      	bx	lr
 80018fe:	bf00      	nop
 8001900:	20002174 	.word	0x20002174
 8001904:	20000174 	.word	0x20000174
 8001908:	20002173 	.word	0x20002173
 800190c:	2000217c 	.word	0x2000217c

08001910 <EXTI0_IRQHandler>:
//=================================
void (*GP_Fun[16])(void);
//=================================
//       IRQ Handlers
//=================================
void EXTI0_IRQHandler() {
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0
	EXTI->PR |= (1 << 0);
 8001914:	4b05      	ldr	r3, [pc, #20]	@ (800192c <EXTI0_IRQHandler+0x1c>)
 8001916:	695b      	ldr	r3, [r3, #20]
 8001918:	4a04      	ldr	r2, [pc, #16]	@ (800192c <EXTI0_IRQHandler+0x1c>)
 800191a:	f043 0301 	orr.w	r3, r3, #1
 800191e:	6153      	str	r3, [r2, #20]
	GP_Fun[0]();
 8001920:	4b03      	ldr	r3, [pc, #12]	@ (8001930 <EXTI0_IRQHandler+0x20>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4798      	blx	r3
}
 8001926:	bf00      	nop
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	40010400 	.word	0x40010400
 8001930:	20002190 	.word	0x20002190

08001934 <EXTI1_IRQHandler>:
void EXTI1_IRQHandler() {
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0
	EXTI->PR |= (1 << 1);
 8001938:	4b05      	ldr	r3, [pc, #20]	@ (8001950 <EXTI1_IRQHandler+0x1c>)
 800193a:	695b      	ldr	r3, [r3, #20]
 800193c:	4a04      	ldr	r2, [pc, #16]	@ (8001950 <EXTI1_IRQHandler+0x1c>)
 800193e:	f043 0302 	orr.w	r3, r3, #2
 8001942:	6153      	str	r3, [r2, #20]
	GP_Fun[1]();
 8001944:	4b03      	ldr	r3, [pc, #12]	@ (8001954 <EXTI1_IRQHandler+0x20>)
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	4798      	blx	r3
}
 800194a:	bf00      	nop
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	40010400 	.word	0x40010400
 8001954:	20002190 	.word	0x20002190

08001958 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler() {
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
	EXTI->PR |= (1 << 2);
 800195c:	4b05      	ldr	r3, [pc, #20]	@ (8001974 <EXTI2_IRQHandler+0x1c>)
 800195e:	695b      	ldr	r3, [r3, #20]
 8001960:	4a04      	ldr	r2, [pc, #16]	@ (8001974 <EXTI2_IRQHandler+0x1c>)
 8001962:	f043 0304 	orr.w	r3, r3, #4
 8001966:	6153      	str	r3, [r2, #20]
	GP_Fun[2]();
 8001968:	4b03      	ldr	r3, [pc, #12]	@ (8001978 <EXTI2_IRQHandler+0x20>)
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	4798      	blx	r3
}
 800196e:	bf00      	nop
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	40010400 	.word	0x40010400
 8001978:	20002190 	.word	0x20002190

0800197c <EXTI3_IRQHandler>:
void EXTI3_IRQHandler() {
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
	EXTI->PR |= (1 << 3);
 8001980:	4b05      	ldr	r3, [pc, #20]	@ (8001998 <EXTI3_IRQHandler+0x1c>)
 8001982:	695b      	ldr	r3, [r3, #20]
 8001984:	4a04      	ldr	r2, [pc, #16]	@ (8001998 <EXTI3_IRQHandler+0x1c>)
 8001986:	f043 0308 	orr.w	r3, r3, #8
 800198a:	6153      	str	r3, [r2, #20]
	GP_Fun[3]();
 800198c:	4b03      	ldr	r3, [pc, #12]	@ (800199c <EXTI3_IRQHandler+0x20>)
 800198e:	68db      	ldr	r3, [r3, #12]
 8001990:	4798      	blx	r3
}
 8001992:	bf00      	nop
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	40010400 	.word	0x40010400
 800199c:	20002190 	.word	0x20002190

080019a0 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler() {
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0
	EXTI->PR |= (1 << 4);
 80019a4:	4b05      	ldr	r3, [pc, #20]	@ (80019bc <EXTI4_IRQHandler+0x1c>)
 80019a6:	695b      	ldr	r3, [r3, #20]
 80019a8:	4a04      	ldr	r2, [pc, #16]	@ (80019bc <EXTI4_IRQHandler+0x1c>)
 80019aa:	f043 0310 	orr.w	r3, r3, #16
 80019ae:	6153      	str	r3, [r2, #20]
	GP_Fun[4]();
 80019b0:	4b03      	ldr	r3, [pc, #12]	@ (80019c0 <EXTI4_IRQHandler+0x20>)
 80019b2:	691b      	ldr	r3, [r3, #16]
 80019b4:	4798      	blx	r3
}
 80019b6:	bf00      	nop
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	40010400 	.word	0x40010400
 80019c0:	20002190 	.word	0x20002190

080019c4 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler() {
 80019c4:	b580      	push	{r7, lr}
 80019c6:	af00      	add	r7, sp, #0
	if (EXTI->PR & (1 << 5)) {
 80019c8:	4b28      	ldr	r3, [pc, #160]	@ (8001a6c <EXTI9_5_IRQHandler+0xa8>)
 80019ca:	695b      	ldr	r3, [r3, #20]
 80019cc:	f003 0320 	and.w	r3, r3, #32
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d009      	beq.n	80019e8 <EXTI9_5_IRQHandler+0x24>
		EXTI->PR |= (1 << 5);
 80019d4:	4b25      	ldr	r3, [pc, #148]	@ (8001a6c <EXTI9_5_IRQHandler+0xa8>)
 80019d6:	695b      	ldr	r3, [r3, #20]
 80019d8:	4a24      	ldr	r2, [pc, #144]	@ (8001a6c <EXTI9_5_IRQHandler+0xa8>)
 80019da:	f043 0320 	orr.w	r3, r3, #32
 80019de:	6153      	str	r3, [r2, #20]
		GP_Fun[5]();
 80019e0:	4b23      	ldr	r3, [pc, #140]	@ (8001a70 <EXTI9_5_IRQHandler+0xac>)
 80019e2:	695b      	ldr	r3, [r3, #20]
 80019e4:	4798      	blx	r3
		GP_Fun[8]();
	} else if (EXTI->PR & (1 << 9)) {
		EXTI->PR |= (1 << 9);
		GP_Fun[9]();
	}
}
 80019e6:	e03e      	b.n	8001a66 <EXTI9_5_IRQHandler+0xa2>
	} else if (EXTI->PR & (1 << 6)) {
 80019e8:	4b20      	ldr	r3, [pc, #128]	@ (8001a6c <EXTI9_5_IRQHandler+0xa8>)
 80019ea:	695b      	ldr	r3, [r3, #20]
 80019ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d009      	beq.n	8001a08 <EXTI9_5_IRQHandler+0x44>
		EXTI->PR |= (1 << 6);
 80019f4:	4b1d      	ldr	r3, [pc, #116]	@ (8001a6c <EXTI9_5_IRQHandler+0xa8>)
 80019f6:	695b      	ldr	r3, [r3, #20]
 80019f8:	4a1c      	ldr	r2, [pc, #112]	@ (8001a6c <EXTI9_5_IRQHandler+0xa8>)
 80019fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80019fe:	6153      	str	r3, [r2, #20]
		GP_Fun[6]();
 8001a00:	4b1b      	ldr	r3, [pc, #108]	@ (8001a70 <EXTI9_5_IRQHandler+0xac>)
 8001a02:	699b      	ldr	r3, [r3, #24]
 8001a04:	4798      	blx	r3
}
 8001a06:	e02e      	b.n	8001a66 <EXTI9_5_IRQHandler+0xa2>
	} else if (EXTI->PR & (1 << 7)) {
 8001a08:	4b18      	ldr	r3, [pc, #96]	@ (8001a6c <EXTI9_5_IRQHandler+0xa8>)
 8001a0a:	695b      	ldr	r3, [r3, #20]
 8001a0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d009      	beq.n	8001a28 <EXTI9_5_IRQHandler+0x64>
		EXTI->PR |= (1 << 7);
 8001a14:	4b15      	ldr	r3, [pc, #84]	@ (8001a6c <EXTI9_5_IRQHandler+0xa8>)
 8001a16:	695b      	ldr	r3, [r3, #20]
 8001a18:	4a14      	ldr	r2, [pc, #80]	@ (8001a6c <EXTI9_5_IRQHandler+0xa8>)
 8001a1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a1e:	6153      	str	r3, [r2, #20]
		GP_Fun[7]();
 8001a20:	4b13      	ldr	r3, [pc, #76]	@ (8001a70 <EXTI9_5_IRQHandler+0xac>)
 8001a22:	69db      	ldr	r3, [r3, #28]
 8001a24:	4798      	blx	r3
}
 8001a26:	e01e      	b.n	8001a66 <EXTI9_5_IRQHandler+0xa2>
	} else if (EXTI->PR & (1 << 8)) {
 8001a28:	4b10      	ldr	r3, [pc, #64]	@ (8001a6c <EXTI9_5_IRQHandler+0xa8>)
 8001a2a:	695b      	ldr	r3, [r3, #20]
 8001a2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d009      	beq.n	8001a48 <EXTI9_5_IRQHandler+0x84>
		EXTI->PR |= (1 << 8);
 8001a34:	4b0d      	ldr	r3, [pc, #52]	@ (8001a6c <EXTI9_5_IRQHandler+0xa8>)
 8001a36:	695b      	ldr	r3, [r3, #20]
 8001a38:	4a0c      	ldr	r2, [pc, #48]	@ (8001a6c <EXTI9_5_IRQHandler+0xa8>)
 8001a3a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a3e:	6153      	str	r3, [r2, #20]
		GP_Fun[8]();
 8001a40:	4b0b      	ldr	r3, [pc, #44]	@ (8001a70 <EXTI9_5_IRQHandler+0xac>)
 8001a42:	6a1b      	ldr	r3, [r3, #32]
 8001a44:	4798      	blx	r3
}
 8001a46:	e00e      	b.n	8001a66 <EXTI9_5_IRQHandler+0xa2>
	} else if (EXTI->PR & (1 << 9)) {
 8001a48:	4b08      	ldr	r3, [pc, #32]	@ (8001a6c <EXTI9_5_IRQHandler+0xa8>)
 8001a4a:	695b      	ldr	r3, [r3, #20]
 8001a4c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d008      	beq.n	8001a66 <EXTI9_5_IRQHandler+0xa2>
		EXTI->PR |= (1 << 9);
 8001a54:	4b05      	ldr	r3, [pc, #20]	@ (8001a6c <EXTI9_5_IRQHandler+0xa8>)
 8001a56:	695b      	ldr	r3, [r3, #20]
 8001a58:	4a04      	ldr	r2, [pc, #16]	@ (8001a6c <EXTI9_5_IRQHandler+0xa8>)
 8001a5a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a5e:	6153      	str	r3, [r2, #20]
		GP_Fun[9]();
 8001a60:	4b03      	ldr	r3, [pc, #12]	@ (8001a70 <EXTI9_5_IRQHandler+0xac>)
 8001a62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a64:	4798      	blx	r3
}
 8001a66:	bf00      	nop
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	40010400 	.word	0x40010400
 8001a70:	20002190 	.word	0x20002190

08001a74 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler() {
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
	if (EXTI->PR & (1 << 10)) {
 8001a78:	4b30      	ldr	r3, [pc, #192]	@ (8001b3c <EXTI15_10_IRQHandler+0xc8>)
 8001a7a:	695b      	ldr	r3, [r3, #20]
 8001a7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d009      	beq.n	8001a98 <EXTI15_10_IRQHandler+0x24>
		EXTI->PR |= (1 << 10);
 8001a84:	4b2d      	ldr	r3, [pc, #180]	@ (8001b3c <EXTI15_10_IRQHandler+0xc8>)
 8001a86:	695b      	ldr	r3, [r3, #20]
 8001a88:	4a2c      	ldr	r2, [pc, #176]	@ (8001b3c <EXTI15_10_IRQHandler+0xc8>)
 8001a8a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001a8e:	6153      	str	r3, [r2, #20]
		GP_Fun[10]();
 8001a90:	4b2b      	ldr	r3, [pc, #172]	@ (8001b40 <EXTI15_10_IRQHandler+0xcc>)
 8001a92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a94:	4798      	blx	r3
	} else if (EXTI->PR & (1 << 15)) {
		EXTI->PR |= (1 << 15);
		GP_Fun[15]();
	}

}
 8001a96:	e04e      	b.n	8001b36 <EXTI15_10_IRQHandler+0xc2>
	} else if (EXTI->PR & (1 << 11)) {
 8001a98:	4b28      	ldr	r3, [pc, #160]	@ (8001b3c <EXTI15_10_IRQHandler+0xc8>)
 8001a9a:	695b      	ldr	r3, [r3, #20]
 8001a9c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d009      	beq.n	8001ab8 <EXTI15_10_IRQHandler+0x44>
		EXTI->PR |= (1 << 11);
 8001aa4:	4b25      	ldr	r3, [pc, #148]	@ (8001b3c <EXTI15_10_IRQHandler+0xc8>)
 8001aa6:	695b      	ldr	r3, [r3, #20]
 8001aa8:	4a24      	ldr	r2, [pc, #144]	@ (8001b3c <EXTI15_10_IRQHandler+0xc8>)
 8001aaa:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001aae:	6153      	str	r3, [r2, #20]
		GP_Fun[11]();
 8001ab0:	4b23      	ldr	r3, [pc, #140]	@ (8001b40 <EXTI15_10_IRQHandler+0xcc>)
 8001ab2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ab4:	4798      	blx	r3
}
 8001ab6:	e03e      	b.n	8001b36 <EXTI15_10_IRQHandler+0xc2>
	} else if (EXTI->PR & (1 << 12)) {
 8001ab8:	4b20      	ldr	r3, [pc, #128]	@ (8001b3c <EXTI15_10_IRQHandler+0xc8>)
 8001aba:	695b      	ldr	r3, [r3, #20]
 8001abc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d009      	beq.n	8001ad8 <EXTI15_10_IRQHandler+0x64>
		EXTI->PR |= (1 << 12);
 8001ac4:	4b1d      	ldr	r3, [pc, #116]	@ (8001b3c <EXTI15_10_IRQHandler+0xc8>)
 8001ac6:	695b      	ldr	r3, [r3, #20]
 8001ac8:	4a1c      	ldr	r2, [pc, #112]	@ (8001b3c <EXTI15_10_IRQHandler+0xc8>)
 8001aca:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001ace:	6153      	str	r3, [r2, #20]
		GP_Fun[12]();
 8001ad0:	4b1b      	ldr	r3, [pc, #108]	@ (8001b40 <EXTI15_10_IRQHandler+0xcc>)
 8001ad2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ad4:	4798      	blx	r3
}
 8001ad6:	e02e      	b.n	8001b36 <EXTI15_10_IRQHandler+0xc2>
	} else if (EXTI->PR & (1 << 13)) {
 8001ad8:	4b18      	ldr	r3, [pc, #96]	@ (8001b3c <EXTI15_10_IRQHandler+0xc8>)
 8001ada:	695b      	ldr	r3, [r3, #20]
 8001adc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d009      	beq.n	8001af8 <EXTI15_10_IRQHandler+0x84>
		EXTI->PR |= (1 << 13);
 8001ae4:	4b15      	ldr	r3, [pc, #84]	@ (8001b3c <EXTI15_10_IRQHandler+0xc8>)
 8001ae6:	695b      	ldr	r3, [r3, #20]
 8001ae8:	4a14      	ldr	r2, [pc, #80]	@ (8001b3c <EXTI15_10_IRQHandler+0xc8>)
 8001aea:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001aee:	6153      	str	r3, [r2, #20]
		GP_Fun[13]();
 8001af0:	4b13      	ldr	r3, [pc, #76]	@ (8001b40 <EXTI15_10_IRQHandler+0xcc>)
 8001af2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001af4:	4798      	blx	r3
}
 8001af6:	e01e      	b.n	8001b36 <EXTI15_10_IRQHandler+0xc2>
	} else if (EXTI->PR & (1 << 14)) {
 8001af8:	4b10      	ldr	r3, [pc, #64]	@ (8001b3c <EXTI15_10_IRQHandler+0xc8>)
 8001afa:	695b      	ldr	r3, [r3, #20]
 8001afc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d009      	beq.n	8001b18 <EXTI15_10_IRQHandler+0xa4>
		EXTI->PR |= (1 << 14);
 8001b04:	4b0d      	ldr	r3, [pc, #52]	@ (8001b3c <EXTI15_10_IRQHandler+0xc8>)
 8001b06:	695b      	ldr	r3, [r3, #20]
 8001b08:	4a0c      	ldr	r2, [pc, #48]	@ (8001b3c <EXTI15_10_IRQHandler+0xc8>)
 8001b0a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b0e:	6153      	str	r3, [r2, #20]
		GP_Fun[14]();
 8001b10:	4b0b      	ldr	r3, [pc, #44]	@ (8001b40 <EXTI15_10_IRQHandler+0xcc>)
 8001b12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001b14:	4798      	blx	r3
}
 8001b16:	e00e      	b.n	8001b36 <EXTI15_10_IRQHandler+0xc2>
	} else if (EXTI->PR & (1 << 15)) {
 8001b18:	4b08      	ldr	r3, [pc, #32]	@ (8001b3c <EXTI15_10_IRQHandler+0xc8>)
 8001b1a:	695b      	ldr	r3, [r3, #20]
 8001b1c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d008      	beq.n	8001b36 <EXTI15_10_IRQHandler+0xc2>
		EXTI->PR |= (1 << 15);
 8001b24:	4b05      	ldr	r3, [pc, #20]	@ (8001b3c <EXTI15_10_IRQHandler+0xc8>)
 8001b26:	695b      	ldr	r3, [r3, #20]
 8001b28:	4a04      	ldr	r2, [pc, #16]	@ (8001b3c <EXTI15_10_IRQHandler+0xc8>)
 8001b2a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001b2e:	6153      	str	r3, [r2, #20]
		GP_Fun[15]();
 8001b30:	4b03      	ldr	r3, [pc, #12]	@ (8001b40 <EXTI15_10_IRQHandler+0xcc>)
 8001b32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b34:	4798      	blx	r3
}
 8001b36:	bf00      	nop
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	40010400 	.word	0x40010400
 8001b40:	20002190 	.word	0x20002190

08001b44 <Get_CRLH_Position>:
 *      Author: Alaa Wahba
 */

#include "GPIO.h"

uint8 Get_CRLH_Position(uint16 pinNumber) {
 8001b44:	b480      	push	{r7}
 8001b46:	b085      	sub	sp, #20
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	80fb      	strh	r3, [r7, #6]
	uint8 shift = 0;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	73fb      	strb	r3, [r7, #15]
	switch (pinNumber) {
 8001b52:	88fb      	ldrh	r3, [r7, #6]
 8001b54:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001b58:	f000 80b8 	beq.w	8001ccc <Get_CRLH_Position+0x188>
 8001b5c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001b60:	f300 80b7 	bgt.w	8001cd2 <Get_CRLH_Position+0x18e>
 8001b64:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001b68:	f000 80ad 	beq.w	8001cc6 <Get_CRLH_Position+0x182>
 8001b6c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001b70:	f300 80af 	bgt.w	8001cd2 <Get_CRLH_Position+0x18e>
 8001b74:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001b78:	f000 80a2 	beq.w	8001cc0 <Get_CRLH_Position+0x17c>
 8001b7c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001b80:	f300 80a7 	bgt.w	8001cd2 <Get_CRLH_Position+0x18e>
 8001b84:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001b88:	f000 8097 	beq.w	8001cba <Get_CRLH_Position+0x176>
 8001b8c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001b90:	f300 809f 	bgt.w	8001cd2 <Get_CRLH_Position+0x18e>
 8001b94:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001b98:	f000 808c 	beq.w	8001cb4 <Get_CRLH_Position+0x170>
 8001b9c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001ba0:	f300 8097 	bgt.w	8001cd2 <Get_CRLH_Position+0x18e>
 8001ba4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ba8:	f000 8081 	beq.w	8001cae <Get_CRLH_Position+0x16a>
 8001bac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001bb0:	f300 808f 	bgt.w	8001cd2 <Get_CRLH_Position+0x18e>
 8001bb4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001bb8:	d076      	beq.n	8001ca8 <Get_CRLH_Position+0x164>
 8001bba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001bbe:	f300 8088 	bgt.w	8001cd2 <Get_CRLH_Position+0x18e>
 8001bc2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001bc6:	d06c      	beq.n	8001ca2 <Get_CRLH_Position+0x15e>
 8001bc8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001bcc:	f300 8081 	bgt.w	8001cd2 <Get_CRLH_Position+0x18e>
 8001bd0:	2b80      	cmp	r3, #128	@ 0x80
 8001bd2:	d063      	beq.n	8001c9c <Get_CRLH_Position+0x158>
 8001bd4:	2b80      	cmp	r3, #128	@ 0x80
 8001bd6:	dc7c      	bgt.n	8001cd2 <Get_CRLH_Position+0x18e>
 8001bd8:	2b20      	cmp	r3, #32
 8001bda:	dc47      	bgt.n	8001c6c <Get_CRLH_Position+0x128>
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	dd78      	ble.n	8001cd2 <Get_CRLH_Position+0x18e>
 8001be0:	3b01      	subs	r3, #1
 8001be2:	2b1f      	cmp	r3, #31
 8001be4:	d875      	bhi.n	8001cd2 <Get_CRLH_Position+0x18e>
 8001be6:	a201      	add	r2, pc, #4	@ (adr r2, 8001bec <Get_CRLH_Position+0xa8>)
 8001be8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bec:	08001c73 	.word	0x08001c73
 8001bf0:	08001c79 	.word	0x08001c79
 8001bf4:	08001cd3 	.word	0x08001cd3
 8001bf8:	08001c7f 	.word	0x08001c7f
 8001bfc:	08001cd3 	.word	0x08001cd3
 8001c00:	08001cd3 	.word	0x08001cd3
 8001c04:	08001cd3 	.word	0x08001cd3
 8001c08:	08001c85 	.word	0x08001c85
 8001c0c:	08001cd3 	.word	0x08001cd3
 8001c10:	08001cd3 	.word	0x08001cd3
 8001c14:	08001cd3 	.word	0x08001cd3
 8001c18:	08001cd3 	.word	0x08001cd3
 8001c1c:	08001cd3 	.word	0x08001cd3
 8001c20:	08001cd3 	.word	0x08001cd3
 8001c24:	08001cd3 	.word	0x08001cd3
 8001c28:	08001c8b 	.word	0x08001c8b
 8001c2c:	08001cd3 	.word	0x08001cd3
 8001c30:	08001cd3 	.word	0x08001cd3
 8001c34:	08001cd3 	.word	0x08001cd3
 8001c38:	08001cd3 	.word	0x08001cd3
 8001c3c:	08001cd3 	.word	0x08001cd3
 8001c40:	08001cd3 	.word	0x08001cd3
 8001c44:	08001cd3 	.word	0x08001cd3
 8001c48:	08001cd3 	.word	0x08001cd3
 8001c4c:	08001cd3 	.word	0x08001cd3
 8001c50:	08001cd3 	.word	0x08001cd3
 8001c54:	08001cd3 	.word	0x08001cd3
 8001c58:	08001cd3 	.word	0x08001cd3
 8001c5c:	08001cd3 	.word	0x08001cd3
 8001c60:	08001cd3 	.word	0x08001cd3
 8001c64:	08001cd3 	.word	0x08001cd3
 8001c68:	08001c91 	.word	0x08001c91
 8001c6c:	2b40      	cmp	r3, #64	@ 0x40
 8001c6e:	d012      	beq.n	8001c96 <Get_CRLH_Position+0x152>
 8001c70:	e02f      	b.n	8001cd2 <Get_CRLH_Position+0x18e>
	case PIN_0:
		shift = 0;
 8001c72:	2300      	movs	r3, #0
 8001c74:	73fb      	strb	r3, [r7, #15]
		break;
 8001c76:	e02c      	b.n	8001cd2 <Get_CRLH_Position+0x18e>
	case PIN_1:
		shift = 4;
 8001c78:	2304      	movs	r3, #4
 8001c7a:	73fb      	strb	r3, [r7, #15]
		break;
 8001c7c:	e029      	b.n	8001cd2 <Get_CRLH_Position+0x18e>
	case PIN_2:
		shift = 8;
 8001c7e:	2308      	movs	r3, #8
 8001c80:	73fb      	strb	r3, [r7, #15]
		break;
 8001c82:	e026      	b.n	8001cd2 <Get_CRLH_Position+0x18e>
	case PIN_3:
		shift = 12;
 8001c84:	230c      	movs	r3, #12
 8001c86:	73fb      	strb	r3, [r7, #15]
		break;
 8001c88:	e023      	b.n	8001cd2 <Get_CRLH_Position+0x18e>
	case PIN_4:
		shift = 16;
 8001c8a:	2310      	movs	r3, #16
 8001c8c:	73fb      	strb	r3, [r7, #15]
		break;
 8001c8e:	e020      	b.n	8001cd2 <Get_CRLH_Position+0x18e>
	case PIN_5:
		shift = 20;
 8001c90:	2314      	movs	r3, #20
 8001c92:	73fb      	strb	r3, [r7, #15]
		break;
 8001c94:	e01d      	b.n	8001cd2 <Get_CRLH_Position+0x18e>
	case PIN_6:
		shift = 24;
 8001c96:	2318      	movs	r3, #24
 8001c98:	73fb      	strb	r3, [r7, #15]
		break;
 8001c9a:	e01a      	b.n	8001cd2 <Get_CRLH_Position+0x18e>
	case PIN_7:
		shift = 28;
 8001c9c:	231c      	movs	r3, #28
 8001c9e:	73fb      	strb	r3, [r7, #15]
		break;
 8001ca0:	e017      	b.n	8001cd2 <Get_CRLH_Position+0x18e>

	case PIN_8:
		shift = 0;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	73fb      	strb	r3, [r7, #15]
		break;
 8001ca6:	e014      	b.n	8001cd2 <Get_CRLH_Position+0x18e>
	case PIN_9:
		shift = 4;
 8001ca8:	2304      	movs	r3, #4
 8001caa:	73fb      	strb	r3, [r7, #15]
		break;
 8001cac:	e011      	b.n	8001cd2 <Get_CRLH_Position+0x18e>
	case PIN_10:
		shift = 8;
 8001cae:	2308      	movs	r3, #8
 8001cb0:	73fb      	strb	r3, [r7, #15]
		break;
 8001cb2:	e00e      	b.n	8001cd2 <Get_CRLH_Position+0x18e>
	case PIN_11:
		shift = 12;
 8001cb4:	230c      	movs	r3, #12
 8001cb6:	73fb      	strb	r3, [r7, #15]
		break;
 8001cb8:	e00b      	b.n	8001cd2 <Get_CRLH_Position+0x18e>
	case PIN_12:
		shift = 16;
 8001cba:	2310      	movs	r3, #16
 8001cbc:	73fb      	strb	r3, [r7, #15]
		break;
 8001cbe:	e008      	b.n	8001cd2 <Get_CRLH_Position+0x18e>
	case PIN_13:
		shift = 20;
 8001cc0:	2314      	movs	r3, #20
 8001cc2:	73fb      	strb	r3, [r7, #15]
		break;
 8001cc4:	e005      	b.n	8001cd2 <Get_CRLH_Position+0x18e>
	case PIN_14:
		shift = 24;
 8001cc6:	2318      	movs	r3, #24
 8001cc8:	73fb      	strb	r3, [r7, #15]
		break;
 8001cca:	e002      	b.n	8001cd2 <Get_CRLH_Position+0x18e>
	case PIN_15:
		shift = 28;
 8001ccc:	231c      	movs	r3, #28
 8001cce:	73fb      	strb	r3, [r7, #15]
		break;
 8001cd0:	bf00      	nop

	}
	return shift;
 8001cd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	3714      	adds	r7, #20
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bc80      	pop	{r7}
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop

08001ce0 <GPIO_init>:
 * @retval 			- none
 * Note				- Stm32F103C6 MCU has GPIO A,B,C,D,E Modules
 * 				     But LQFP48 Package has only GPIO A,B,PART of C/D exported as external PINS from the MCU
 */

void GPIO_init(GPIO_Registers_t *GPIOx, GPIO_PinConfig_t *pinConfig) {
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b086      	sub	sp, #24
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
 8001ce8:	6039      	str	r1, [r7, #0]
	// CRL configures the pins from pin 0 to 7
	// CRH configures the pins from pin 8 to 15
	volatile uint32 *config_Register = NULL; //this pointer determines which register to use
 8001cea:	2300      	movs	r3, #0
 8001cec:	613b      	str	r3, [r7, #16]
	config_Register = (pinConfig->Pin_Number < PIN_8) ? &GPIOx->CRL : &GPIOx->CRH;
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	881b      	ldrh	r3, [r3, #0]
 8001cf2:	2bff      	cmp	r3, #255	@ 0xff
 8001cf4:	d801      	bhi.n	8001cfa <GPIO_init+0x1a>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	e001      	b.n	8001cfe <GPIO_init+0x1e>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	3304      	adds	r3, #4
 8001cfe:	613b      	str	r3, [r7, #16]

	// This returns the starting bit in register CRL/CRH for the specified pin.
	uint8 shift_bit = Get_CRLH_Position(pinConfig->Pin_Number);
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	881b      	ldrh	r3, [r3, #0]
 8001d04:	4618      	mov	r0, r3
 8001d06:	f7ff ff1d 	bl	8001b44 <Get_CRLH_Position>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	73fb      	strb	r3, [r7, #15]

	// First Clear the CNF[1:0] MODE[1:0]
	(*config_Register) &= ~(0xF << shift_bit);
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	7bfa      	ldrb	r2, [r7, #15]
 8001d14:	210f      	movs	r1, #15
 8001d16:	fa01 f202 	lsl.w	r2, r1, r2
 8001d1a:	43d2      	mvns	r2, r2
 8001d1c:	401a      	ands	r2, r3
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	601a      	str	r2, [r3, #0]

	uint8 register_bits = 0;
 8001d22:	2300      	movs	r3, #0
 8001d24:	75fb      	strb	r3, [r7, #23]
	// if pin is OUTPUT
	if ((pinConfig->MODE == MODE_OUTPUT_AF_OD) || (pinConfig->MODE == MODE_OUTPUT_AF_PP) || (pinConfig->MODE == MODE_OUTPUT_PP)	|| (pinConfig->MODE == MODE_OUTPUT_OD)) {
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	789b      	ldrb	r3, [r3, #2]
 8001d2a:	2b07      	cmp	r3, #7
 8001d2c:	d00b      	beq.n	8001d46 <GPIO_init+0x66>
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	789b      	ldrb	r3, [r3, #2]
 8001d32:	2b06      	cmp	r3, #6
 8001d34:	d007      	beq.n	8001d46 <GPIO_init+0x66>
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	789b      	ldrb	r3, [r3, #2]
 8001d3a:	2b04      	cmp	r3, #4
 8001d3c:	d003      	beq.n	8001d46 <GPIO_init+0x66>
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	789b      	ldrb	r3, [r3, #2]
 8001d42:	2b05      	cmp	r3, #5
 8001d44:	d10e      	bne.n	8001d64 <GPIO_init+0x84>
		register_bits = ((((pinConfig->MODE - 4) << 2)	| pinConfig->Output_Speed) & 0x0f);
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	789b      	ldrb	r3, [r3, #2]
 8001d4a:	3b04      	subs	r3, #4
 8001d4c:	009b      	lsls	r3, r3, #2
 8001d4e:	b25a      	sxtb	r2, r3
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	78db      	ldrb	r3, [r3, #3]
 8001d54:	b25b      	sxtb	r3, r3
 8001d56:	4313      	orrs	r3, r2
 8001d58:	b25b      	sxtb	r3, r3
 8001d5a:	b2db      	uxtb	r3, r3
 8001d5c:	f003 030f 	and.w	r3, r3, #15
 8001d60:	75fb      	strb	r3, [r7, #23]
 8001d62:	e02c      	b.n	8001dbe <GPIO_init+0xde>

	}
	else
	{
		if ((pinConfig->MODE == MODE_INPUT_FLO) || (pinConfig->MODE == MODE_Analog))
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	789b      	ldrb	r3, [r3, #2]
 8001d68:	2b01      	cmp	r3, #1
 8001d6a:	d003      	beq.n	8001d74 <GPIO_init+0x94>
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	789b      	ldrb	r3, [r3, #2]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d107      	bne.n	8001d84 <GPIO_init+0xa4>
		{
			register_bits = (((pinConfig->MODE << 2) | 0x00) & 0x0f);
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	789b      	ldrb	r3, [r3, #2]
 8001d78:	009b      	lsls	r3, r3, #2
 8001d7a:	b2db      	uxtb	r3, r3
 8001d7c:	f003 030f 	and.w	r3, r3, #15
 8001d80:	75fb      	strb	r3, [r7, #23]
 8001d82:	e01c      	b.n	8001dbe <GPIO_init+0xde>
		}
		else if (pinConfig->MODE == MODE_INPUT_AF)
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	789b      	ldrb	r3, [r3, #2]
 8001d88:	2b10      	cmp	r3, #16
 8001d8a:	d102      	bne.n	8001d92 <GPIO_init+0xb2>
		{
			// consider alternative input as input floating
			register_bits = (((MODE_INPUT_FLO << 2) | 0x00) & 0x0f);
 8001d8c:	2304      	movs	r3, #4
 8001d8e:	75fb      	strb	r3, [r7, #23]
 8001d90:	e015      	b.n	8001dbe <GPIO_init+0xde>
		}
		else
		{
			register_bits = (((MODE_INPUT_PU << 2) | 0x00) & 0x0f);
 8001d92:	2308      	movs	r3, #8
 8001d94:	75fb      	strb	r3, [r7, #23]
			if (pinConfig->MODE == MODE_INPUT_PU)
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	789b      	ldrb	r3, [r3, #2]
 8001d9a:	2b02      	cmp	r3, #2
 8001d9c:	d107      	bne.n	8001dae <GPIO_init+0xce>
			{
				// set ODR register 1 for input pull up
				GPIOx->ODR |= pinConfig->Pin_Number;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	68db      	ldr	r3, [r3, #12]
 8001da2:	683a      	ldr	r2, [r7, #0]
 8001da4:	8812      	ldrh	r2, [r2, #0]
 8001da6:	431a      	orrs	r2, r3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	60da      	str	r2, [r3, #12]
 8001dac:	e007      	b.n	8001dbe <GPIO_init+0xde>
			}
			else
			{
				// set ODR register 0 for input pull down
				GPIOx->ODR &= ~(pinConfig->Pin_Number);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	68db      	ldr	r3, [r3, #12]
 8001db2:	683a      	ldr	r2, [r7, #0]
 8001db4:	8812      	ldrh	r2, [r2, #0]
 8001db6:	43d2      	mvns	r2, r2
 8001db8:	401a      	ands	r2, r3
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	60da      	str	r2, [r3, #12]
			}
		}

	}
	// write to CRL /CRH
	(*config_Register) |= (register_bits << shift_bit);
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	7df9      	ldrb	r1, [r7, #23]
 8001dc4:	7bfa      	ldrb	r2, [r7, #15]
 8001dc6:	fa01 f202 	lsl.w	r2, r1, r2
 8001dca:	431a      	orrs	r2, r3
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	601a      	str	r2, [r3, #0]
}
 8001dd0:	bf00      	nop
 8001dd2:	3718      	adds	r7, #24
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}

08001dd8 <NVIC_Enable>:
 * @brief          - Enables the NVIC interrupt pin
 * @param [in]     - IRQ_Number :  The specified Interrupt Number to be enabled
 * @retval         - none
 */

void NVIC_Enable(uint8 IRQ_Number) {
 8001dd8:	b480      	push	{r7}
 8001dda:	b083      	sub	sp, #12
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	4603      	mov	r3, r0
 8001de0:	71fb      	strb	r3, [r7, #7]
	if ((IRQ_Number >= 0) && (IRQ_Number <= 31)) {
 8001de2:	79fb      	ldrb	r3, [r7, #7]
 8001de4:	2b1f      	cmp	r3, #31
 8001de6:	d809      	bhi.n	8001dfc <NVIC_Enable+0x24>
		ISER0 |= (1U << IRQ_Number);
 8001de8:	4b0f      	ldr	r3, [pc, #60]	@ (8001e28 <NVIC_Enable+0x50>)
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	79fb      	ldrb	r3, [r7, #7]
 8001dee:	2101      	movs	r1, #1
 8001df0:	fa01 f303 	lsl.w	r3, r1, r3
 8001df4:	490c      	ldr	r1, [pc, #48]	@ (8001e28 <NVIC_Enable+0x50>)
 8001df6:	4313      	orrs	r3, r2
 8001df8:	600b      	str	r3, [r1, #0]
	} else if ((IRQ_Number >= 32) && (IRQ_Number <= 59)) {
		ISER1 |= (1U << (IRQ_Number - 32));
	}
}
 8001dfa:	e00f      	b.n	8001e1c <NVIC_Enable+0x44>
	} else if ((IRQ_Number >= 32) && (IRQ_Number <= 59)) {
 8001dfc:	79fb      	ldrb	r3, [r7, #7]
 8001dfe:	2b1f      	cmp	r3, #31
 8001e00:	d90c      	bls.n	8001e1c <NVIC_Enable+0x44>
 8001e02:	79fb      	ldrb	r3, [r7, #7]
 8001e04:	2b3b      	cmp	r3, #59	@ 0x3b
 8001e06:	d809      	bhi.n	8001e1c <NVIC_Enable+0x44>
		ISER1 |= (1U << (IRQ_Number - 32));
 8001e08:	4b08      	ldr	r3, [pc, #32]	@ (8001e2c <NVIC_Enable+0x54>)
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	79fb      	ldrb	r3, [r7, #7]
 8001e0e:	3b20      	subs	r3, #32
 8001e10:	2101      	movs	r1, #1
 8001e12:	fa01 f303 	lsl.w	r3, r1, r3
 8001e16:	4905      	ldr	r1, [pc, #20]	@ (8001e2c <NVIC_Enable+0x54>)
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	600b      	str	r3, [r1, #0]
}
 8001e1c:	bf00      	nop
 8001e1e:	370c      	adds	r7, #12
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bc80      	pop	{r7}
 8001e24:	4770      	bx	lr
 8001e26:	bf00      	nop
 8001e28:	e000e100 	.word	0xe000e100
 8001e2c:	e000e104 	.word	0xe000e104

08001e30 <RCC_getSYSCLK_Freq>:
 1101: SYSCLK divided by 128
 1110: SYSCLK divided by 256
 1111: SYSCLK divided by 512
 */
uint8 AHB_PrescTable[16U] = { 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 6, 7, 8, 9 };
uint32 RCC_getSYSCLK_Freq(void) {
 8001e30:	b480      	push	{r7}
 8001e32:	b083      	sub	sp, #12
 8001e34:	af00      	add	r7, sp, #0
	/*
	 * 	00: HSI selected as system clock
	 01: HSE selected as system clock
	 10: PLL selected as system clock
	 */
	uint8 SW = (RCC->CFGR >> 2) & 0b11;
 8001e36:	4b22      	ldr	r3, [pc, #136]	@ (8001ec0 <RCC_getSYSCLK_Freq+0x90>)
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	089b      	lsrs	r3, r3, #2
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	f003 0303 	and.w	r3, r3, #3
 8001e42:	70fb      	strb	r3, [r7, #3]
	uint32 sysClk = HSI;
 8001e44:	4b1f      	ldr	r3, [pc, #124]	@ (8001ec4 <RCC_getSYSCLK_Freq+0x94>)
 8001e46:	607b      	str	r3, [r7, #4]
	uint8 pll_src;
	switch (SW) {
 8001e48:	78fb      	ldrb	r3, [r7, #3]
 8001e4a:	2b02      	cmp	r3, #2
 8001e4c:	d00c      	beq.n	8001e68 <RCC_getSYSCLK_Freq+0x38>
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	dc30      	bgt.n	8001eb4 <RCC_getSYSCLK_Freq+0x84>
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d002      	beq.n	8001e5c <RCC_getSYSCLK_Freq+0x2c>
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d003      	beq.n	8001e62 <RCC_getSYSCLK_Freq+0x32>
 8001e5a:	e02b      	b.n	8001eb4 <RCC_getSYSCLK_Freq+0x84>
	case 0:
		sysClk = HSI;
 8001e5c:	4b19      	ldr	r3, [pc, #100]	@ (8001ec4 <RCC_getSYSCLK_Freq+0x94>)
 8001e5e:	607b      	str	r3, [r7, #4]
		break;
 8001e60:	e028      	b.n	8001eb4 <RCC_getSYSCLK_Freq+0x84>
	case 1:
		//todo need to calculate  it //HSE User Should Specify it
		sysClk = HSE;
 8001e62:	4b18      	ldr	r3, [pc, #96]	@ (8001ec4 <RCC_getSYSCLK_Freq+0x94>)
 8001e64:	607b      	str	r3, [r7, #4]
		break;
 8001e66:	e025      	b.n	8001eb4 <RCC_getSYSCLK_Freq+0x84>
	case 2:
		 pll_src = (RCC->CFGR >> 16) & 1 ;
 8001e68:	4b15      	ldr	r3, [pc, #84]	@ (8001ec0 <RCC_getSYSCLK_Freq+0x90>)
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	0c1b      	lsrs	r3, r3, #16
 8001e6e:	b2db      	uxtb	r3, r3
 8001e70:	f003 0301 	and.w	r3, r3, #1
 8001e74:	70bb      	strb	r3, [r7, #2]
		if(pll_src){ // HSE
 8001e76:	78bb      	ldrb	r3, [r7, #2]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d00a      	beq.n	8001e92 <RCC_getSYSCLK_Freq+0x62>
			 sysClk = GET(RCC->CFGR,17) == 1 ?( HSE /2) : HSE ; //check if HSE is divided by 2
 8001e7c:	4b10      	ldr	r3, [pc, #64]	@ (8001ec0 <RCC_getSYSCLK_Freq+0x90>)
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d101      	bne.n	8001e8c <RCC_getSYSCLK_Freq+0x5c>
 8001e88:	4b0f      	ldr	r3, [pc, #60]	@ (8001ec8 <RCC_getSYSCLK_Freq+0x98>)
 8001e8a:	e000      	b.n	8001e8e <RCC_getSYSCLK_Freq+0x5e>
 8001e8c:	4b0d      	ldr	r3, [pc, #52]	@ (8001ec4 <RCC_getSYSCLK_Freq+0x94>)
 8001e8e:	607b      	str	r3, [r7, #4]
 8001e90:	e001      	b.n	8001e96 <RCC_getSYSCLK_Freq+0x66>
		}else{ //HSI / 2 = 4MHZ
			sysClk = HSI/2 ;
 8001e92:	4b0d      	ldr	r3, [pc, #52]	@ (8001ec8 <RCC_getSYSCLK_Freq+0x98>)
 8001e94:	607b      	str	r3, [r7, #4]
		}
		uint16 pll_mul = (RCC->CFGR >> 18) & 0b1111;
 8001e96:	4b0a      	ldr	r3, [pc, #40]	@ (8001ec0 <RCC_getSYSCLK_Freq+0x90>)
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	0c9b      	lsrs	r3, r3, #18
 8001e9c:	b29b      	uxth	r3, r3
 8001e9e:	f003 030f 	and.w	r3, r3, #15
 8001ea2:	803b      	strh	r3, [r7, #0]
		sysClk = sysClk * (pll_mul+2);
 8001ea4:	883b      	ldrh	r3, [r7, #0]
 8001ea6:	3302      	adds	r3, #2
 8001ea8:	461a      	mov	r2, r3
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	fb02 f303 	mul.w	r3, r2, r3
 8001eb0:	607b      	str	r3, [r7, #4]
		break;
 8001eb2:	bf00      	nop

	}
	return sysClk;
 8001eb4:	687b      	ldr	r3, [r7, #4]
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	370c      	adds	r7, #12
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	bc80      	pop	{r7}
 8001ebe:	4770      	bx	lr
 8001ec0:	40021000 	.word	0x40021000
 8001ec4:	007a1200 	.word	0x007a1200
 8001ec8:	003d0900 	.word	0x003d0900

08001ecc <RCC_getPCKL1_Freq>:

uint32 RCC_getPCKL1_Freq(void) {
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0
	/* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
	return (RCC_getHCKL_Freq() >> APB_PrescTable[((RCC->CFGR >> 8) & 0b111)]); // First right shift is multiplication
 8001ed0:	f000 f824 	bl	8001f1c <RCC_getHCKL_Freq>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	4b05      	ldr	r3, [pc, #20]	@ (8001eec <RCC_getPCKL1_Freq+0x20>)
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	0a1b      	lsrs	r3, r3, #8
 8001edc:	f003 0307 	and.w	r3, r3, #7
 8001ee0:	4903      	ldr	r1, [pc, #12]	@ (8001ef0 <RCC_getPCKL1_Freq+0x24>)
 8001ee2:	5ccb      	ldrb	r3, [r1, r3]
 8001ee4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	40021000 	.word	0x40021000
 8001ef0:	20000008 	.word	0x20000008

08001ef4 <RCC_getPCKL2_Freq>:
uint32 RCC_getPCKL2_Freq(void) {
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	af00      	add	r7, sp, #0
	/* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
	return (RCC_getHCKL_Freq() >> APB_PrescTable[((RCC->CFGR >> 11) & 0b111)]);
 8001ef8:	f000 f810 	bl	8001f1c <RCC_getHCKL_Freq>
 8001efc:	4602      	mov	r2, r0
 8001efe:	4b05      	ldr	r3, [pc, #20]	@ (8001f14 <RCC_getPCKL2_Freq+0x20>)
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	0adb      	lsrs	r3, r3, #11
 8001f04:	f003 0307 	and.w	r3, r3, #7
 8001f08:	4903      	ldr	r1, [pc, #12]	@ (8001f18 <RCC_getPCKL2_Freq+0x24>)
 8001f0a:	5ccb      	ldrb	r3, [r1, r3]
 8001f0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	40021000 	.word	0x40021000
 8001f18:	20000008 	.word	0x20000008

08001f1c <RCC_getHCKL_Freq>:
uint32 RCC_getHCKL_Freq(void) {
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	af00      	add	r7, sp, #0
	/* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
	return (RCC_getSYSCLK_Freq() >> AHB_PrescTable[((RCC->CFGR >> 4) & 0b1111)]);
 8001f20:	f7ff ff86 	bl	8001e30 <RCC_getSYSCLK_Freq>
 8001f24:	4602      	mov	r2, r0
 8001f26:	4b05      	ldr	r3, [pc, #20]	@ (8001f3c <RCC_getHCKL_Freq+0x20>)
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	091b      	lsrs	r3, r3, #4
 8001f2c:	f003 030f 	and.w	r3, r3, #15
 8001f30:	4903      	ldr	r1, [pc, #12]	@ (8001f40 <RCC_getHCKL_Freq+0x24>)
 8001f32:	5ccb      	ldrb	r3, [r1, r3]
 8001f34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	40021000 	.word	0x40021000
 8001f40:	20000010 	.word	0x20000010

08001f44 <RCC_CLK_EN>:
		break;

	}
}

void RCC_CLK_EN(uint8 busID, uint8 periphralID) {
 8001f44:	b480      	push	{r7}
 8001f46:	b083      	sub	sp, #12
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	460a      	mov	r2, r1
 8001f4e:	71fb      	strb	r3, [r7, #7]
 8001f50:	4613      	mov	r3, r2
 8001f52:	71bb      	strb	r3, [r7, #6]
	switch (busID) {
 8001f54:	79fb      	ldrb	r3, [r7, #7]
 8001f56:	2b02      	cmp	r3, #2
 8001f58:	d01c      	beq.n	8001f94 <RCC_CLK_EN+0x50>
 8001f5a:	2b02      	cmp	r3, #2
 8001f5c:	dc25      	bgt.n	8001faa <RCC_CLK_EN+0x66>
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d002      	beq.n	8001f68 <RCC_CLK_EN+0x24>
 8001f62:	2b01      	cmp	r3, #1
 8001f64:	d00b      	beq.n	8001f7e <RCC_CLK_EN+0x3a>
		break;
	case AHB_ID:
		RCC->AHBENR |= (1 << periphralID);
		break;
	}
}
 8001f66:	e020      	b.n	8001faa <RCC_CLK_EN+0x66>
		RCC->ABP1ENR |= (1 << periphralID);
 8001f68:	4b12      	ldr	r3, [pc, #72]	@ (8001fb4 <RCC_CLK_EN+0x70>)
 8001f6a:	69db      	ldr	r3, [r3, #28]
 8001f6c:	79ba      	ldrb	r2, [r7, #6]
 8001f6e:	2101      	movs	r1, #1
 8001f70:	fa01 f202 	lsl.w	r2, r1, r2
 8001f74:	4611      	mov	r1, r2
 8001f76:	4a0f      	ldr	r2, [pc, #60]	@ (8001fb4 <RCC_CLK_EN+0x70>)
 8001f78:	430b      	orrs	r3, r1
 8001f7a:	61d3      	str	r3, [r2, #28]
		break;
 8001f7c:	e015      	b.n	8001faa <RCC_CLK_EN+0x66>
		RCC->ABP2ENR |= (1 << periphralID);
 8001f7e:	4b0d      	ldr	r3, [pc, #52]	@ (8001fb4 <RCC_CLK_EN+0x70>)
 8001f80:	699b      	ldr	r3, [r3, #24]
 8001f82:	79ba      	ldrb	r2, [r7, #6]
 8001f84:	2101      	movs	r1, #1
 8001f86:	fa01 f202 	lsl.w	r2, r1, r2
 8001f8a:	4611      	mov	r1, r2
 8001f8c:	4a09      	ldr	r2, [pc, #36]	@ (8001fb4 <RCC_CLK_EN+0x70>)
 8001f8e:	430b      	orrs	r3, r1
 8001f90:	6193      	str	r3, [r2, #24]
		break;
 8001f92:	e00a      	b.n	8001faa <RCC_CLK_EN+0x66>
		RCC->AHBENR |= (1 << periphralID);
 8001f94:	4b07      	ldr	r3, [pc, #28]	@ (8001fb4 <RCC_CLK_EN+0x70>)
 8001f96:	695b      	ldr	r3, [r3, #20]
 8001f98:	79ba      	ldrb	r2, [r7, #6]
 8001f9a:	2101      	movs	r1, #1
 8001f9c:	fa01 f202 	lsl.w	r2, r1, r2
 8001fa0:	4611      	mov	r1, r2
 8001fa2:	4a04      	ldr	r2, [pc, #16]	@ (8001fb4 <RCC_CLK_EN+0x70>)
 8001fa4:	430b      	orrs	r3, r1
 8001fa6:	6153      	str	r3, [r2, #20]
		break;
 8001fa8:	bf00      	nop
}
 8001faa:	bf00      	nop
 8001fac:	370c      	adds	r7, #12
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bc80      	pop	{r7}
 8001fb2:	4770      	bx	lr
 8001fb4:	40021000 	.word	0x40021000

08001fb8 <USART_init>:
 * @param [in] 		- USARTx: where x can be (1..3 depending on device used)
 * @param [in] 		- pinConfig: All UART Configuration USART_pinConfig_t
 * @retval 			-none
 * Note				-Support for Now Asynch mode & Clock 8 MHZ S
 */
void USART_init(USART_pinConfig_t *pinConfig, USART_Registers_t *USARTx) {
 8001fb8:	b5b0      	push	{r4, r5, r7, lr}
 8001fba:	b084      	sub	sp, #16
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
 8001fc0:	6039      	str	r1, [r7, #0]
	uint32 BRR, pclk;

	/*            Enable USART clocks      */
	if (USARTx == USART1) {
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	4a59      	ldr	r2, [pc, #356]	@ (800212c <USART_init+0x174>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d10b      	bne.n	8001fe2 <USART_init+0x2a>
		Global_pinConfig[USART1_Index] = *pinConfig;
 8001fca:	4a59      	ldr	r2, [pc, #356]	@ (8002130 <USART_init+0x178>)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	4614      	mov	r4, r2
 8001fd0:	461d      	mov	r5, r3
 8001fd2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001fd4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001fd6:	682b      	ldr	r3, [r5, #0]
 8001fd8:	6023      	str	r3, [r4, #0]
		RCC_CLK_EN(APB2_ID, USART1_ID);
 8001fda:	210e      	movs	r1, #14
 8001fdc:	2001      	movs	r0, #1
 8001fde:	f7ff ffb1 	bl	8001f44 <RCC_CLK_EN>
	}
	if (USARTx == USART2) {
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	4a53      	ldr	r2, [pc, #332]	@ (8002134 <USART_init+0x17c>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d10d      	bne.n	8002006 <USART_init+0x4e>
		Global_pinConfig[USART2_Index] = *pinConfig;
 8001fea:	4b51      	ldr	r3, [pc, #324]	@ (8002130 <USART_init+0x178>)
 8001fec:	687a      	ldr	r2, [r7, #4]
 8001fee:	f103 0414 	add.w	r4, r3, #20
 8001ff2:	4615      	mov	r5, r2
 8001ff4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ff6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ff8:	682b      	ldr	r3, [r5, #0]
 8001ffa:	6023      	str	r3, [r4, #0]
		RCC_CLK_EN(APB1_ID, USART2_ID);
 8001ffc:	2111      	movs	r1, #17
 8001ffe:	2000      	movs	r0, #0
 8002000:	f7ff ffa0 	bl	8001f44 <RCC_CLK_EN>
 8002004:	e010      	b.n	8002028 <USART_init+0x70>
	} else if (USARTx == USART3) {
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	4a4b      	ldr	r2, [pc, #300]	@ (8002138 <USART_init+0x180>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d10c      	bne.n	8002028 <USART_init+0x70>
		Global_pinConfig[USART3_Index] = *pinConfig;
 800200e:	4b48      	ldr	r3, [pc, #288]	@ (8002130 <USART_init+0x178>)
 8002010:	687a      	ldr	r2, [r7, #4]
 8002012:	f103 0428 	add.w	r4, r3, #40	@ 0x28
 8002016:	4615      	mov	r5, r2
 8002018:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800201a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800201c:	682b      	ldr	r3, [r5, #0]
 800201e:	6023      	str	r3, [r4, #0]
		RCC_CLK_EN(APB1_ID, USART3_ID);
 8002020:	2112      	movs	r1, #18
 8002022:	2000      	movs	r0, #0
 8002024:	f7ff ff8e 	bl	8001f44 <RCC_CLK_EN>
	}

	/*            Enable USART Module    	  */
	//Bit 13 UE: USART enable
	USARTx->CR1 |= (1 << 13);
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	60da      	str	r2, [r3, #12]
	/*            Enable TX/RX  		      */
	USARTx->CR1 |= pinConfig->USART_Mode;
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	687a      	ldr	r2, [r7, #4]
 800203a:	7812      	ldrb	r2, [r2, #0]
 800203c:	431a      	orrs	r2, r3
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	60da      	str	r2, [r3, #12]
	/*            Define The StopBits         */
	USARTx->CR2 |= pinConfig->StopBits;
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	691b      	ldr	r3, [r3, #16]
 8002046:	687a      	ldr	r2, [r7, #4]
 8002048:	7a12      	ldrb	r2, [r2, #8]
 800204a:	431a      	orrs	r2, r3
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	611a      	str	r2, [r3, #16]
	/*            Define The DataBits         */
	USARTx->CR1 |= pinConfig->DataLength;
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	687a      	ldr	r2, [r7, #4]
 8002056:	7a52      	ldrb	r2, [r2, #9]
 8002058:	431a      	orrs	r2, r3
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	60da      	str	r2, [r3, #12]
	/*            Configure The Parity        */
	USARTx->CR1 |= pinConfig->Parity;
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	68db      	ldr	r3, [r3, #12]
 8002062:	687a      	ldr	r2, [r7, #4]
 8002064:	7a92      	ldrb	r2, [r2, #10]
 8002066:	431a      	orrs	r2, r3
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	60da      	str	r2, [r3, #12]
	/*            Hardware Flow Control       */
	USARTx->CR3 |= pinConfig->FlowControl;
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	695b      	ldr	r3, [r3, #20]
 8002070:	687a      	ldr	r2, [r7, #4]
 8002072:	7ad2      	ldrb	r2, [r2, #11]
 8002074:	431a      	orrs	r2, r3
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	615a      	str	r2, [r3, #20]
	/*            Define The BaudRate	      */
//FCLK - Input clock to the peripheral (PCLK1 for USART2, 3 or PCLK2 for USART1)
	if (USARTx == USART1) {
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	4a2b      	ldr	r2, [pc, #172]	@ (800212c <USART_init+0x174>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d103      	bne.n	800208a <USART_init+0xd2>
		pclk = RCC_getPCKL2_Freq();
 8002082:	f7ff ff37 	bl	8001ef4 <RCC_getPCKL2_Freq>
 8002086:	60f8      	str	r0, [r7, #12]
 8002088:	e002      	b.n	8002090 <USART_init+0xd8>
	} else {
		pclk = RCC_getPCKL1_Freq();
 800208a:	f7ff ff1f 	bl	8001ecc <RCC_getPCKL1_Freq>
 800208e:	60f8      	str	r0, [r7, #12]
	}

	BRR = USART_BRR(pclk, pinConfig->BaudRate);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	011b      	lsls	r3, r3, #4
 8002096:	68fa      	ldr	r2, [r7, #12]
 8002098:	fbb2 f3f3 	udiv	r3, r2, r3
 800209c:	0119      	lsls	r1, r3, #4
 800209e:	68fa      	ldr	r2, [r7, #12]
 80020a0:	4613      	mov	r3, r2
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	4413      	add	r3, r2
 80020a6:	009a      	lsls	r2, r3, #2
 80020a8:	441a      	add	r2, r3
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	011b      	lsls	r3, r3, #4
 80020ba:	68f8      	ldr	r0, [r7, #12]
 80020bc:	fbb0 f3f3 	udiv	r3, r0, r3
 80020c0:	2064      	movs	r0, #100	@ 0x64
 80020c2:	fb00 f303 	mul.w	r3, r0, r3
 80020c6:	1ad3      	subs	r3, r2, r3
 80020c8:	011b      	lsls	r3, r3, #4
 80020ca:	4a1c      	ldr	r2, [pc, #112]	@ (800213c <USART_init+0x184>)
 80020cc:	fba2 2303 	umull	r2, r3, r2, r3
 80020d0:	095b      	lsrs	r3, r3, #5
 80020d2:	f003 030f 	and.w	r3, r3, #15
 80020d6:	430b      	orrs	r3, r1
 80020d8:	60bb      	str	r3, [r7, #8]
	USARTx->BRR = BRR;
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	68ba      	ldr	r2, [r7, #8]
 80020de:	609a      	str	r2, [r3, #8]

	/*            Enabling The Interrupt      */
	if (pinConfig->IRQ_Enable != USART_NONE) {
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	7b1b      	ldrb	r3, [r3, #12]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d01d      	beq.n	8002124 <USART_init+0x16c>
		USARTx->CR1 |= (pinConfig->IRQ_Enable);
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	687a      	ldr	r2, [r7, #4]
 80020ee:	7b12      	ldrb	r2, [r2, #12]
 80020f0:	431a      	orrs	r2, r3
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	60da      	str	r2, [r3, #12]
		//		Enable NVIC For USARTx IRQ
		if (USARTx == USART1) {
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	4a0c      	ldr	r2, [pc, #48]	@ (800212c <USART_init+0x174>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d103      	bne.n	8002106 <USART_init+0x14e>
			NVIC_Enable(NVIC_USART1);
 80020fe:	2025      	movs	r0, #37	@ 0x25
 8002100:	f7ff fe6a 	bl	8001dd8 <NVIC_Enable>
			NVIC_Enable(NVIC_USART2);
		} else if (USARTx == USART3) {
			NVIC_Enable(NVIC_USART3);
		}
	}
}
 8002104:	e00e      	b.n	8002124 <USART_init+0x16c>
		} else if (USARTx == USART2) {
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	4a0a      	ldr	r2, [pc, #40]	@ (8002134 <USART_init+0x17c>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d103      	bne.n	8002116 <USART_init+0x15e>
			NVIC_Enable(NVIC_USART2);
 800210e:	2026      	movs	r0, #38	@ 0x26
 8002110:	f7ff fe62 	bl	8001dd8 <NVIC_Enable>
}
 8002114:	e006      	b.n	8002124 <USART_init+0x16c>
		} else if (USARTx == USART3) {
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	4a07      	ldr	r2, [pc, #28]	@ (8002138 <USART_init+0x180>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d102      	bne.n	8002124 <USART_init+0x16c>
			NVIC_Enable(NVIC_USART3);
 800211e:	2027      	movs	r0, #39	@ 0x27
 8002120:	f7ff fe5a 	bl	8001dd8 <NVIC_Enable>
}
 8002124:	bf00      	nop
 8002126:	3710      	adds	r7, #16
 8002128:	46bd      	mov	sp, r7
 800212a:	bdb0      	pop	{r4, r5, r7, pc}
 800212c:	40013800 	.word	0x40013800
 8002130:	200021d0 	.word	0x200021d0
 8002134:	40004400 	.word	0x40004400
 8002138:	40004800 	.word	0x40004800
 800213c:	51eb851f 	.word	0x51eb851f

08002140 <USART_SetPins>:
 * @brief 			-initialize GPIO Pins
 * @param [in] 		-USARTx: where x can be (1..3 depending on device used)
 * @retval 			-none
 * @Note			-Should enable the corresponding ALT  & GPIO  in RCC clock Also called after USART_Init()
 */
void USART_SetPins(USART_Registers_t *USARTx) {
 8002140:	b580      	push	{r7, lr}
 8002142:	b084      	sub	sp, #16
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
	GPIO_PinConfig_t GPIO_pinConfig;
	if (USARTx == USART1) {
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	4a2b      	ldr	r2, [pc, #172]	@ (80021f8 <USART_SetPins+0xb8>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d118      	bne.n	8002182 <USART_SetPins+0x42>
		// configure  TX PORTA PIN9 As Alternate function Push pull
		GPIO_pinConfig.MODE = MODE_OUTPUT_AF_PP;
 8002150:	2306      	movs	r3, #6
 8002152:	73bb      	strb	r3, [r7, #14]
		GPIO_pinConfig.Output_Speed = SPEED_10M;
 8002154:	2301      	movs	r3, #1
 8002156:	73fb      	strb	r3, [r7, #15]
		GPIO_pinConfig.Pin_Number = PIN_9;
 8002158:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800215c:	81bb      	strh	r3, [r7, #12]
		GPIO_init(GPIOA, &GPIO_pinConfig);
 800215e:	f107 030c 	add.w	r3, r7, #12
 8002162:	4619      	mov	r1, r3
 8002164:	4825      	ldr	r0, [pc, #148]	@ (80021fc <USART_SetPins+0xbc>)
 8002166:	f7ff fdbb 	bl	8001ce0 <GPIO_init>
		// configure  RX PORTA PIN10 As  Alternate function INPUT
		GPIO_pinConfig.MODE = MODE_INPUT_AF;
 800216a:	2310      	movs	r3, #16
 800216c:	73bb      	strb	r3, [r7, #14]
		GPIO_pinConfig.Pin_Number = PIN_10;
 800216e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002172:	81bb      	strh	r3, [r7, #12]
		GPIO_init(GPIOA, &GPIO_pinConfig);
 8002174:	f107 030c 	add.w	r3, r7, #12
 8002178:	4619      	mov	r1, r3
 800217a:	4820      	ldr	r0, [pc, #128]	@ (80021fc <USART_SetPins+0xbc>)
 800217c:	f7ff fdb0 	bl	8001ce0 <GPIO_init>
			GPIO_init(GPIOB, &GPIO_pinConfig);
		}

	}

}
 8002180:	e036      	b.n	80021f0 <USART_SetPins+0xb0>
	} else if (USARTx == USART2) {
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	4a1e      	ldr	r2, [pc, #120]	@ (8002200 <USART_SetPins+0xc0>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d116      	bne.n	80021b8 <USART_SetPins+0x78>
		GPIO_pinConfig.MODE = MODE_OUTPUT_AF_PP;
 800218a:	2306      	movs	r3, #6
 800218c:	73bb      	strb	r3, [r7, #14]
		GPIO_pinConfig.Output_Speed = SPEED_10M;
 800218e:	2301      	movs	r3, #1
 8002190:	73fb      	strb	r3, [r7, #15]
		GPIO_pinConfig.Pin_Number = PIN_2;
 8002192:	2304      	movs	r3, #4
 8002194:	81bb      	strh	r3, [r7, #12]
		GPIO_init(GPIOA, &GPIO_pinConfig);
 8002196:	f107 030c 	add.w	r3, r7, #12
 800219a:	4619      	mov	r1, r3
 800219c:	4817      	ldr	r0, [pc, #92]	@ (80021fc <USART_SetPins+0xbc>)
 800219e:	f7ff fd9f 	bl	8001ce0 <GPIO_init>
		GPIO_pinConfig.MODE = MODE_INPUT_AF;
 80021a2:	2310      	movs	r3, #16
 80021a4:	73bb      	strb	r3, [r7, #14]
		GPIO_pinConfig.Pin_Number = PIN_3;
 80021a6:	2308      	movs	r3, #8
 80021a8:	81bb      	strh	r3, [r7, #12]
		GPIO_init(GPIOA, &GPIO_pinConfig);
 80021aa:	f107 030c 	add.w	r3, r7, #12
 80021ae:	4619      	mov	r1, r3
 80021b0:	4812      	ldr	r0, [pc, #72]	@ (80021fc <USART_SetPins+0xbc>)
 80021b2:	f7ff fd95 	bl	8001ce0 <GPIO_init>
}
 80021b6:	e01b      	b.n	80021f0 <USART_SetPins+0xb0>
	} else if (USARTx == USART3) {
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	4a12      	ldr	r2, [pc, #72]	@ (8002204 <USART_SetPins+0xc4>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d117      	bne.n	80021f0 <USART_SetPins+0xb0>
		GPIO_pinConfig.MODE = MODE_OUTPUT_AF_PP;
 80021c0:	2306      	movs	r3, #6
 80021c2:	73bb      	strb	r3, [r7, #14]
		GPIO_pinConfig.Output_Speed = SPEED_10M;
 80021c4:	2301      	movs	r3, #1
 80021c6:	73fb      	strb	r3, [r7, #15]
		GPIO_pinConfig.Pin_Number = PIN_10;
 80021c8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80021cc:	81bb      	strh	r3, [r7, #12]
		GPIO_init(GPIOB, &GPIO_pinConfig);
 80021ce:	f107 030c 	add.w	r3, r7, #12
 80021d2:	4619      	mov	r1, r3
 80021d4:	480c      	ldr	r0, [pc, #48]	@ (8002208 <USART_SetPins+0xc8>)
 80021d6:	f7ff fd83 	bl	8001ce0 <GPIO_init>
		GPIO_pinConfig.MODE = MODE_INPUT_AF;
 80021da:	2310      	movs	r3, #16
 80021dc:	73bb      	strb	r3, [r7, #14]
		GPIO_pinConfig.Pin_Number = PIN_11;
 80021de:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80021e2:	81bb      	strh	r3, [r7, #12]
		GPIO_init(GPIOB, &GPIO_pinConfig);
 80021e4:	f107 030c 	add.w	r3, r7, #12
 80021e8:	4619      	mov	r1, r3
 80021ea:	4807      	ldr	r0, [pc, #28]	@ (8002208 <USART_SetPins+0xc8>)
 80021ec:	f7ff fd78 	bl	8001ce0 <GPIO_init>
}
 80021f0:	bf00      	nop
 80021f2:	3710      	adds	r7, #16
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	40013800 	.word	0x40013800
 80021fc:	40010800 	.word	0x40010800
 8002200:	40004400 	.word	0x40004400
 8002204:	40004800 	.word	0x40004800
 8002208:	40010c00 	.word	0x40010c00

0800220c <USART_Send>:
 When receiving with the parity enabled, the value read in the MSB bit is the received parity
 bit
 */

void USART_Send(USART_Registers_t *USARTx, uint16 *pTxBuffer,
		enum Polling_Mechanism PollingEn) {
 800220c:	b480      	push	{r7}
 800220e:	b087      	sub	sp, #28
 8002210:	af00      	add	r7, sp, #0
 8002212:	60f8      	str	r0, [r7, #12]
 8002214:	60b9      	str	r1, [r7, #8]
 8002216:	4613      	mov	r3, r2
 8002218:	71fb      	strb	r3, [r7, #7]
	uint8 index = 0;
 800221a:	2300      	movs	r3, #0
 800221c:	75fb      	strb	r3, [r7, #23]
	index = (USARTx == USART1) ?
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	4a10      	ldr	r2, [pc, #64]	@ (8002264 <USART_Send+0x58>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d007      	beq.n	8002236 <USART_Send+0x2a>
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	4a0f      	ldr	r2, [pc, #60]	@ (8002268 <USART_Send+0x5c>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d101      	bne.n	8002232 <USART_Send+0x26>
 800222e:	2301      	movs	r3, #1
 8002230:	e002      	b.n	8002238 <USART_Send+0x2c>
 8002232:	2302      	movs	r3, #2
 8002234:	e000      	b.n	8002238 <USART_Send+0x2c>
 8002236:	2300      	movs	r3, #0
 8002238:	75fb      	strb	r3, [r7, #23]
			USART1_Index : ((USARTx == USART2) ? USART2_Index : USART3_Index);
//Write the data to send in the USART_DR register (this clears the TXE bit).
	if (PollingEn == Enable)
 800223a:	79fb      	ldrb	r3, [r7, #7]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d106      	bne.n	800224e <USART_Send+0x42>
		while (!(USARTx->SR & (1 << 7)))
 8002240:	bf00      	nop
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800224a:	2b00      	cmp	r3, #0
 800224c:	d0f9      	beq.n	8002242 <USART_Send+0x36>
			;	//TXE bit is 1 means Data is completely sent.

	if (Global_pinConfig[index].DataLength == USART_DataLength9) {
		USARTx->DR = (*pTxBuffer & (uint16) 0x01FF);
	} else {
		USARTx->DR = (*pTxBuffer & (uint8) 0xFF);
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	881b      	ldrh	r3, [r3, #0]
 8002252:	b2da      	uxtb	r2, r3
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	605a      	str	r2, [r3, #4]
	}
}
 8002258:	bf00      	nop
 800225a:	371c      	adds	r7, #28
 800225c:	46bd      	mov	sp, r7
 800225e:	bc80      	pop	{r7}
 8002260:	4770      	bx	lr
 8002262:	bf00      	nop
 8002264:	40013800 	.word	0x40013800
 8002268:	40004400 	.word	0x40004400

0800226c <USART_SendString>:
	 */
	while (!(USARTx->SR & (1 << 6)))
		;
}

void USART_SendString(USART_Registers_t *USARTx, const uint8 *str) {
 800226c:	b580      	push	{r7, lr}
 800226e:	b084      	sub	sp, #16
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
 8002274:	6039      	str	r1, [r7, #0]
	// Calculate string length
	size_t len = strlen(str);
 8002276:	6838      	ldr	r0, [r7, #0]
 8002278:	f7fd ff7a 	bl	8000170 <strlen>
 800227c:	60b8      	str	r0, [r7, #8]

	// Loop through each character and send it
	for (size_t i = 0; i < len; i++) {
 800227e:	2300      	movs	r3, #0
 8002280:	60fb      	str	r3, [r7, #12]
 8002282:	e00a      	b.n	800229a <USART_SendString+0x2e>
		// Send character
		USART_Send(USARTx, (uint16*) &str[i], Enable);
 8002284:	683a      	ldr	r2, [r7, #0]
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	4413      	add	r3, r2
 800228a:	2200      	movs	r2, #0
 800228c:	4619      	mov	r1, r3
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f7ff ffbc 	bl	800220c <USART_Send>
	for (size_t i = 0; i < len; i++) {
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	3301      	adds	r3, #1
 8002298:	60fb      	str	r3, [r7, #12]
 800229a:	68fa      	ldr	r2, [r7, #12]
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	429a      	cmp	r2, r3
 80022a0:	d3f0      	bcc.n	8002284 <USART_SendString+0x18>

	}
}
 80022a2:	bf00      	nop
 80022a4:	bf00      	nop
 80022a6:	3710      	adds	r7, #16
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}

080022ac <USART1_IRQHandler>:
	// Add the null terminator at the end of the received string.
	buffer[index] = '\0';
}

// ISR
void USART1_IRQHandler() {
 80022ac:	b580      	push	{r7, lr}
 80022ae:	af00      	add	r7, sp, #0
	Global_pinConfig[USART1_Index].P_CallBack_Fun();
 80022b0:	4b02      	ldr	r3, [pc, #8]	@ (80022bc <USART1_IRQHandler+0x10>)
 80022b2:	691b      	ldr	r3, [r3, #16]
 80022b4:	4798      	blx	r3
}
 80022b6:	bf00      	nop
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	200021d0 	.word	0x200021d0

080022c0 <USART2_IRQHandler>:
void USART2_IRQHandler() {
 80022c0:	b580      	push	{r7, lr}
 80022c2:	af00      	add	r7, sp, #0
	Global_pinConfig[USART2_Index].P_CallBack_Fun();
 80022c4:	4b02      	ldr	r3, [pc, #8]	@ (80022d0 <USART2_IRQHandler+0x10>)
 80022c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022c8:	4798      	blx	r3
}
 80022ca:	bf00      	nop
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	200021d0 	.word	0x200021d0

080022d4 <USART3_IRQHandler>:
void USART3_IRQHandler() {
 80022d4:	b580      	push	{r7, lr}
 80022d6:	af00      	add	r7, sp, #0
	Global_pinConfig[USART3_Index].P_CallBack_Fun();
 80022d8:	4b02      	ldr	r3, [pc, #8]	@ (80022e4 <USART3_IRQHandler+0x10>)
 80022da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022dc:	4798      	blx	r3
}
 80022de:	bf00      	nop
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	200021d0 	.word	0x200021d0

080022e8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80022e8:	b480      	push	{r7}
 80022ea:	b085      	sub	sp, #20
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	60f8      	str	r0, [r7, #12]
 80022f0:	60b9      	str	r1, [r7, #8]
 80022f2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	4a06      	ldr	r2, [pc, #24]	@ (8002310 <vApplicationGetIdleTaskMemory+0x28>)
 80022f8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	4a05      	ldr	r2, [pc, #20]	@ (8002314 <vApplicationGetIdleTaskMemory+0x2c>)
 80022fe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2280      	movs	r2, #128	@ 0x80
 8002304:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8002306:	bf00      	nop
 8002308:	3714      	adds	r7, #20
 800230a:	46bd      	mov	sp, r7
 800230c:	bc80      	pop	{r7}
 800230e:	4770      	bx	lr
 8002310:	2000220c 	.word	0x2000220c
 8002314:	20002260 	.word	0x20002260

08002318 <UART_RecieveTask>:
 */
#include "main.h"

	uint8 *msg = "Task creation failed\n";

void UART_RecieveTask(void *p){
 8002318:	b580      	push	{r7, lr}
 800231a:	b082      	sub	sp, #8
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
	while(1){
		USART_SendString(USART1, msg);
 8002320:	4b05      	ldr	r3, [pc, #20]	@ (8002338 <UART_RecieveTask+0x20>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4619      	mov	r1, r3
 8002326:	4805      	ldr	r0, [pc, #20]	@ (800233c <UART_RecieveTask+0x24>)
 8002328:	f7ff ffa0 	bl	800226c <USART_SendString>
		vTaskDelay((TickType_t)5);
 800232c:	2005      	movs	r0, #5
 800232e:	f7fe f9b7 	bl	80006a0 <vTaskDelay>
		USART_SendString(USART1, msg);
 8002332:	bf00      	nop
 8002334:	e7f4      	b.n	8002320 <UART_RecieveTask+0x8>
 8002336:	bf00      	nop
 8002338:	20000020 	.word	0x20000020
 800233c:	40013800 	.word	0x40013800

08002340 <main>:
	}
}


int main(void) {
 8002340:	b580      	push	{r7, lr}
 8002342:	b088      	sub	sp, #32
 8002344:	af02      	add	r7, sp, #8

	RCC_CLK_EN(APB2_ID, GPIOA_ID);
 8002346:	2102      	movs	r1, #2
 8002348:	2001      	movs	r0, #1
 800234a:	f7ff fdfb 	bl	8001f44 <RCC_CLK_EN>
	RCC_CLK_EN(APB2_ID, GPIOB_ID);
 800234e:	2103      	movs	r1, #3
 8002350:	2001      	movs	r0, #1
 8002352:	f7ff fdf7 	bl	8001f44 <RCC_CLK_EN>

	RCC_CLK_EN(APB2_ID, USART1_ID);
 8002356:	210e      	movs	r1, #14
 8002358:	2001      	movs	r0, #1
 800235a:	f7ff fdf3 	bl	8001f44 <RCC_CLK_EN>

	USART_pinConfig_t USART_pinConfig;
	USART_pinConfig.BaudRate = USART_BaudRate_115200;
 800235e:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8002362:	60bb      	str	r3, [r7, #8]
	USART_pinConfig.Parity = USART_Parity_None;
 8002364:	2300      	movs	r3, #0
 8002366:	73bb      	strb	r3, [r7, #14]
	USART_pinConfig.DataLength = USART_DataLength8;
 8002368:	2300      	movs	r3, #0
 800236a:	737b      	strb	r3, [r7, #13]
	USART_pinConfig.StopBits = USART_StopBits_1;
 800236c:	2300      	movs	r3, #0
 800236e:	733b      	strb	r3, [r7, #12]
	USART_pinConfig.FlowControl = USART_FlowControl_NONE;
 8002370:	2300      	movs	r3, #0
 8002372:	73fb      	strb	r3, [r7, #15]
	USART_pinConfig.USART_Mode = USART_TXRXEN;
 8002374:	230c      	movs	r3, #12
 8002376:	713b      	strb	r3, [r7, #4]
	USART_pinConfig.P_CallBack_Fun = NULL;
 8002378:	2300      	movs	r3, #0
 800237a:	617b      	str	r3, [r7, #20]
	USART_pinConfig.IRQ_Enable = USART_NONE;
 800237c:	2300      	movs	r3, #0
 800237e:	743b      	strb	r3, [r7, #16]

	USART_init(&USART_pinConfig, USART1);
 8002380:	1d3b      	adds	r3, r7, #4
 8002382:	490b      	ldr	r1, [pc, #44]	@ (80023b0 <main+0x70>)
 8002384:	4618      	mov	r0, r3
 8002386:	f7ff fe17 	bl	8001fb8 <USART_init>
	USART_SetPins(USART1);
 800238a:	4809      	ldr	r0, [pc, #36]	@ (80023b0 <main+0x70>)
 800238c:	f7ff fed8 	bl	8002140 <USART_SetPins>

//	node_t node = { .status = 0 };
//	uint8 received_json[50];

	xTaskCreate(UART_RecieveTask, "UART_Task", 256, NULL, 1, NULL);
 8002390:	2300      	movs	r3, #0
 8002392:	9301      	str	r3, [sp, #4]
 8002394:	2301      	movs	r3, #1
 8002396:	9300      	str	r3, [sp, #0]
 8002398:	2300      	movs	r3, #0
 800239a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800239e:	4905      	ldr	r1, [pc, #20]	@ (80023b4 <main+0x74>)
 80023a0:	4805      	ldr	r0, [pc, #20]	@ (80023b8 <main+0x78>)
 80023a2:	f7fe f83e 	bl	8000422 <xTaskCreate>

	vTaskStartScheduler();
 80023a6:	f7fe fa19 	bl	80007dc <vTaskStartScheduler>

	while (1) {
 80023aa:	bf00      	nop
 80023ac:	e7fd      	b.n	80023aa <main+0x6a>
 80023ae:	bf00      	nop
 80023b0:	40013800 	.word	0x40013800
 80023b4:	080024a0 	.word	0x080024a0
 80023b8:	08002319 	.word	0x08002319

080023bc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80023bc:	480d      	ldr	r0, [pc, #52]	@ (80023f4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80023be:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80023c0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80023c4:	480c      	ldr	r0, [pc, #48]	@ (80023f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80023c6:	490d      	ldr	r1, [pc, #52]	@ (80023fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80023c8:	4a0d      	ldr	r2, [pc, #52]	@ (8002400 <LoopForever+0xe>)
  movs r3, #0
 80023ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023cc:	e002      	b.n	80023d4 <LoopCopyDataInit>

080023ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023d2:	3304      	adds	r3, #4

080023d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023d8:	d3f9      	bcc.n	80023ce <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023da:	4a0a      	ldr	r2, [pc, #40]	@ (8002404 <LoopForever+0x12>)
  ldr r4, =_ebss
 80023dc:	4c0a      	ldr	r4, [pc, #40]	@ (8002408 <LoopForever+0x16>)
  movs r3, #0
 80023de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023e0:	e001      	b.n	80023e6 <LoopFillZerobss>

080023e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023e4:	3204      	adds	r2, #4

080023e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023e8:	d3fb      	bcc.n	80023e2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80023ea:	f000 f819 	bl	8002420 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80023ee:	f7ff ffa7 	bl	8002340 <main>

080023f2 <LoopForever>:

LoopForever:
  b LoopForever
 80023f2:	e7fe      	b.n	80023f2 <LoopForever>
  ldr   r0, =_estack
 80023f4:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 80023f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023fc:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8002400:	080024bc 	.word	0x080024bc
  ldr r2, =_sbss
 8002404:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8002408:	20002460 	.word	0x20002460

0800240c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800240c:	e7fe      	b.n	800240c <ADC1_2_IRQHandler>

0800240e <memset>:
 800240e:	4603      	mov	r3, r0
 8002410:	4402      	add	r2, r0
 8002412:	4293      	cmp	r3, r2
 8002414:	d100      	bne.n	8002418 <memset+0xa>
 8002416:	4770      	bx	lr
 8002418:	f803 1b01 	strb.w	r1, [r3], #1
 800241c:	e7f9      	b.n	8002412 <memset+0x4>
	...

08002420 <__libc_init_array>:
 8002420:	b570      	push	{r4, r5, r6, lr}
 8002422:	2600      	movs	r6, #0
 8002424:	4d0c      	ldr	r5, [pc, #48]	@ (8002458 <__libc_init_array+0x38>)
 8002426:	4c0d      	ldr	r4, [pc, #52]	@ (800245c <__libc_init_array+0x3c>)
 8002428:	1b64      	subs	r4, r4, r5
 800242a:	10a4      	asrs	r4, r4, #2
 800242c:	42a6      	cmp	r6, r4
 800242e:	d109      	bne.n	8002444 <__libc_init_array+0x24>
 8002430:	f000 f81a 	bl	8002468 <_init>
 8002434:	2600      	movs	r6, #0
 8002436:	4d0a      	ldr	r5, [pc, #40]	@ (8002460 <__libc_init_array+0x40>)
 8002438:	4c0a      	ldr	r4, [pc, #40]	@ (8002464 <__libc_init_array+0x44>)
 800243a:	1b64      	subs	r4, r4, r5
 800243c:	10a4      	asrs	r4, r4, #2
 800243e:	42a6      	cmp	r6, r4
 8002440:	d105      	bne.n	800244e <__libc_init_array+0x2e>
 8002442:	bd70      	pop	{r4, r5, r6, pc}
 8002444:	f855 3b04 	ldr.w	r3, [r5], #4
 8002448:	4798      	blx	r3
 800244a:	3601      	adds	r6, #1
 800244c:	e7ee      	b.n	800242c <__libc_init_array+0xc>
 800244e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002452:	4798      	blx	r3
 8002454:	3601      	adds	r6, #1
 8002456:	e7f2      	b.n	800243e <__libc_init_array+0x1e>
 8002458:	080024b4 	.word	0x080024b4
 800245c:	080024b4 	.word	0x080024b4
 8002460:	080024b4 	.word	0x080024b4
 8002464:	080024b8 	.word	0x080024b8

08002468 <_init>:
 8002468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800246a:	bf00      	nop
 800246c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800246e:	bc08      	pop	{r3}
 8002470:	469e      	mov	lr, r3
 8002472:	4770      	bx	lr

08002474 <_fini>:
 8002474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002476:	bf00      	nop
 8002478:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800247a:	bc08      	pop	{r3}
 800247c:	469e      	mov	lr, r3
 800247e:	4770      	bx	lr
